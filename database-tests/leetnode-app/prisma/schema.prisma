generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}


//USER INFO SECTION

model posts {
  postID    String @id @default(uuid())
  email     String
  title     String
  message   String   
  likes     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users users @relation(fields: [email], references: [email], onDelete: Cascade)
  postMedia postMedia[]

  @@index([email])
}

model postMedia {
  postID String @id @default(uuid())
  postMediaURL String? //uplaod uploaded file link from cloud storage. See https://github.com/prisma/prisma/discussions/11795
  posts posts @relation(fields: [postID], references: [postID], onDelete: Cascade)

  @@index([postMediaURL])
}

model users {
  email     String   @id
  password  String   
  name      String   
  dpURL     String? //upload uploaded file link from cloud storage. See https://github.com/prisma/prisma/discussions/11795
  role      Role 
  posts     posts[]
  students  students[]
  session   session[]
  account   account[]
}

enum Role {
  ADMIN
  USER
  PROF
}

model students {
  studentEmail String  @id
  matriculationNumber String @unique
  users users @relation(fields: [studentEmail], references: [email], onDelete: Cascade)
  studentMasteries studentMasteries[]
  studentAttempts studentAttempts[]

  @@index([studentEmail])
}

model studentAttempts {
  studentEmail String
  questionID String
  attemptOption Int
  attemptCorrect Boolean
  attemptSeconds Int
  students students @relation(fields: [studentEmail], references: [studentEmail], onDelete: Cascade)
  questions questions @relation(fields: [questionID], references: [questionID], onDelete: Cascade)
  
  @@id([studentEmail, questionID])

  @@index([studentEmail,questionID])
}

model studentMasteries {
  studentEmail String
  topicID String @id @default(uuid())
  masteryLevel Float @default(0)
  courseCompletion Float @default(0)
  topics topics @relation(fields: [topicID], references: [topicID], onDelete: Cascade)
  students students @relation(fields: [studentEmail], references: [studentEmail], onDelete: Cascade)

  @@index([topicID, studentEmail])
}

model session {
    email        String   @id
    sessionToken String   @unique
    expires      DateTime
    users        users    @relation(fields: [email], references: [email], onDelete: Cascade)
}

// Necessary for Next Auth
model account {
    email             String  @id
    //userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    users             users    @relation(fields: [email], references: [email], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

//QUESTION BANK SECTIOn

model topics {
  topicID String @id @default(uuid())
  topicName String 
  topicLevel Int
  questions questions[]
  studentMasteries studentMasteries[]
}

model questions {
  questionID String @id @default(uuid())
  topicID String
  questionContent String @db.VarChar(500)
  questionDifficulty Int //1-easy, 2-medium, 3-hard
  topics topics @relation(fields: [topicID], references: [topicID], onDelete: Cascade)
  studentAttempts studentAttempts[]
  questionMedia questionMedia[]
  answers answers[]

  @@index([topicID])
}

model questionMedia {
  questionID String @id @default(uuid())
  questionMediaURL String? //upload uploaded file link from cloud storage. See https://github.com/prisma/prisma/discussions/11795
  questions questions @relation(fields: [questionID], references: [questionID], onDelete: Cascade)

  @@index([questionID])
}

model answers {
  questionID     String @default(uuid())
  optionNumber   Int      
  answerContent  String   
  isCorrect      Boolean  
  questions questions @relation(fields: [questionID], references: [questionID], onDelete: Cascade)

  @@id([questionID, optionNumber])

  @@index([questionID])
}


