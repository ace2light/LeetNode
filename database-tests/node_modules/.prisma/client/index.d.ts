
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model posts
 * 
 */
export type posts = {
  postID: string
  email: string
  title: string
  message: string
  likes: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model postMedia
 * 
 */
export type postMedia = {
  postID: string
  postMediaURL: string | null
}

/**
 * Model users
 * 
 */
export type users = {
  email: string
  password: string
  name: string
  dpURL: string | null
  role: Role
}

/**
 * Model students
 * 
 */
export type students = {
  studentEmail: string
  matriculationNumber: string
}

/**
 * Model studentAttempts
 * 
 */
export type studentAttempts = {
  studentEmail: string
  questionID: string
  attemptOption: number
  attemptCorrect: boolean
  attemptSeconds: number
}

/**
 * Model studentMasteries
 * 
 */
export type studentMasteries = {
  studentEmail: string
  topicID: string
  masteryLevel: number
  courseCompletion: number
}

/**
 * Model topics
 * 
 */
export type topics = {
  topicID: string
  topicName: string
  topicLevel: number
}

/**
 * Model questions
 * 
 */
export type questions = {
  questionID: string
  topicID: string
  questionContent: string
  questionDifficulty: number
}

/**
 * Model questionMedia
 * 
 */
export type questionMedia = {
  questionID: string
  questionMediaURL: string | null
}

/**
 * Model answer
 * 
 */
export type answer = {
  questionID: string
  optionNumber: number
  answerContent: string
  isCorrect: boolean
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Posts
 * const posts = await prisma.posts.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Posts
   * const posts = await prisma.posts.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.posts`: Exposes CRUD operations for the **posts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.posts.findMany()
    * ```
    */
  get posts(): Prisma.postsDelegate<GlobalReject>;

  /**
   * `prisma.postMedia`: Exposes CRUD operations for the **postMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostMedias
    * const postMedias = await prisma.postMedia.findMany()
    * ```
    */
  get postMedia(): Prisma.postMediaDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.students`: Exposes CRUD operations for the **students** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.students.findMany()
    * ```
    */
  get students(): Prisma.studentsDelegate<GlobalReject>;

  /**
   * `prisma.studentAttempts`: Exposes CRUD operations for the **studentAttempts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentAttempts
    * const studentAttempts = await prisma.studentAttempts.findMany()
    * ```
    */
  get studentAttempts(): Prisma.studentAttemptsDelegate<GlobalReject>;

  /**
   * `prisma.studentMasteries`: Exposes CRUD operations for the **studentMasteries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentMasteries
    * const studentMasteries = await prisma.studentMasteries.findMany()
    * ```
    */
  get studentMasteries(): Prisma.studentMasteriesDelegate<GlobalReject>;

  /**
   * `prisma.topics`: Exposes CRUD operations for the **topics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topics.findMany()
    * ```
    */
  get topics(): Prisma.topicsDelegate<GlobalReject>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.questionsDelegate<GlobalReject>;

  /**
   * `prisma.questionMedia`: Exposes CRUD operations for the **questionMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionMedias
    * const questionMedias = await prisma.questionMedia.findMany()
    * ```
    */
  get questionMedia(): Prisma.questionMediaDelegate<GlobalReject>;

  /**
   * `prisma.answer`: Exposes CRUD operations for the **answer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answer.findMany()
    * ```
    */
  get answer(): Prisma.answerDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    posts: 'posts',
    postMedia: 'postMedia',
    users: 'users',
    students: 'students',
    studentAttempts: 'studentAttempts',
    studentMasteries: 'studentMasteries',
    topics: 'topics',
    questions: 'questions',
    questionMedia: 'questionMedia',
    answer: 'answer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PostsCountOutputType
   */


  export type PostsCountOutputType = {
    postMedia_rs: number
  }

  export type PostsCountOutputTypeSelect = {
    postMedia_rs?: boolean
  }

  export type PostsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PostsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PostsCountOutputType
    : S extends undefined
    ? never
    : S extends PostsCountOutputTypeArgs
    ?'include' extends U
    ? PostsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PostsCountOutputType ? PostsCountOutputType[P] : never
  } 
    : PostsCountOutputType
  : PostsCountOutputType




  // Custom InputTypes

  /**
   * PostsCountOutputType without action
   */
  export type PostsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PostsCountOutputType
     * 
    **/
    select?: PostsCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    postemail_rs: number
    studentEmail_user_rs: number
  }

  export type UsersCountOutputTypeSelect = {
    postemail_rs?: boolean
    studentEmail_user_rs?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type StudentsCountOutputType
   */


  export type StudentsCountOutputType = {
    student_Masteries_rs: number
    students_studentAttempt_rs: number
  }

  export type StudentsCountOutputTypeSelect = {
    student_Masteries_rs?: boolean
    students_studentAttempt_rs?: boolean
  }

  export type StudentsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StudentsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StudentsCountOutputType
    : S extends undefined
    ? never
    : S extends StudentsCountOutputTypeArgs
    ?'include' extends U
    ? StudentsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StudentsCountOutputType ? StudentsCountOutputType[P] : never
  } 
    : StudentsCountOutputType
  : StudentsCountOutputType




  // Custom InputTypes

  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StudentsCountOutputType
     * 
    **/
    select?: StudentsCountOutputTypeSelect | null
  }



  /**
   * Count Type TopicsCountOutputType
   */


  export type TopicsCountOutputType = {
    topicID_rs: number
    studentMasteriesTopic_rs: number
  }

  export type TopicsCountOutputTypeSelect = {
    topicID_rs?: boolean
    studentMasteriesTopic_rs?: boolean
  }

  export type TopicsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TopicsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TopicsCountOutputType
    : S extends undefined
    ? never
    : S extends TopicsCountOutputTypeArgs
    ?'include' extends U
    ? TopicsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TopicsCountOutputType ? TopicsCountOutputType[P] : never
  } 
    : TopicsCountOutputType
  : TopicsCountOutputType




  // Custom InputTypes

  /**
   * TopicsCountOutputType without action
   */
  export type TopicsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TopicsCountOutputType
     * 
    **/
    select?: TopicsCountOutputTypeSelect | null
  }



  /**
   * Count Type QuestionsCountOutputType
   */


  export type QuestionsCountOutputType = {
    questionAttemptID_rs: number
    questionMediaID_rs: number
    questionAnswerID_rs: number
  }

  export type QuestionsCountOutputTypeSelect = {
    questionAttemptID_rs?: boolean
    questionMediaID_rs?: boolean
    questionAnswerID_rs?: boolean
  }

  export type QuestionsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | QuestionsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? QuestionsCountOutputType
    : S extends undefined
    ? never
    : S extends QuestionsCountOutputTypeArgs
    ?'include' extends U
    ? QuestionsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof QuestionsCountOutputType ? QuestionsCountOutputType[P] : never
  } 
    : QuestionsCountOutputType
  : QuestionsCountOutputType




  // Custom InputTypes

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     * 
    **/
    select?: QuestionsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model posts
   */


  export type AggregatePosts = {
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  export type PostsAvgAggregateOutputType = {
    likes: number | null
  }

  export type PostsSumAggregateOutputType = {
    likes: number | null
  }

  export type PostsMinAggregateOutputType = {
    postID: string | null
    email: string | null
    title: string | null
    message: string | null
    likes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostsMaxAggregateOutputType = {
    postID: string | null
    email: string | null
    title: string | null
    message: string | null
    likes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostsCountAggregateOutputType = {
    postID: number
    email: number
    title: number
    message: number
    likes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostsAvgAggregateInputType = {
    likes?: true
  }

  export type PostsSumAggregateInputType = {
    likes?: true
  }

  export type PostsMinAggregateInputType = {
    postID?: true
    email?: true
    title?: true
    message?: true
    likes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostsMaxAggregateInputType = {
    postID?: true
    email?: true
    title?: true
    message?: true
    likes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostsCountAggregateInputType = {
    postID?: true
    email?: true
    title?: true
    message?: true
    likes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostsAggregateArgs = {
    /**
     * Filter which posts to aggregate.
     * 
    **/
    where?: postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     * 
    **/
    orderBy?: Enumerable<postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned posts
    **/
    _count?: true | PostsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostsMaxAggregateInputType
  }

  export type GetPostsAggregateType<T extends PostsAggregateArgs> = {
        [P in keyof T & keyof AggregatePosts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosts[P]>
      : GetScalarType<T[P], AggregatePosts[P]>
  }




  export type PostsGroupByArgs = {
    where?: postsWhereInput
    orderBy?: Enumerable<postsOrderByWithAggregationInput>
    by: Array<PostsScalarFieldEnum>
    having?: postsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostsCountAggregateInputType | true
    _avg?: PostsAvgAggregateInputType
    _sum?: PostsSumAggregateInputType
    _min?: PostsMinAggregateInputType
    _max?: PostsMaxAggregateInputType
  }


  export type PostsGroupByOutputType = {
    postID: string
    email: string
    title: string
    message: string
    likes: number
    createdAt: Date
    updatedAt: Date
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  type GetPostsGroupByPayload<T extends PostsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostsGroupByOutputType[P]>
            : GetScalarType<T[P], PostsGroupByOutputType[P]>
        }
      >
    >


  export type postsSelect = {
    postID?: boolean
    email?: boolean
    title?: boolean
    message?: boolean
    likes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userpost_rs?: boolean | usersArgs
    postMedia_rs?: boolean | postMediaFindManyArgs
    _count?: boolean | PostsCountOutputTypeArgs
  }

  export type postsInclude = {
    userpost_rs?: boolean | usersArgs
    postMedia_rs?: boolean | postMediaFindManyArgs
    _count?: boolean | PostsCountOutputTypeArgs
  }

  export type postsGetPayload<
    S extends boolean | null | undefined | postsArgs,
    U = keyof S
      > = S extends true
        ? posts
    : S extends undefined
    ? never
    : S extends postsArgs | postsFindManyArgs
    ?'include' extends U
    ? posts  & {
    [P in TrueKeys<S['include']>]:
        P extends 'userpost_rs' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'postMedia_rs' ? Array < postMediaGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? PostsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'userpost_rs' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'postMedia_rs' ? Array < postMediaGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? PostsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof posts ? posts[P] : never
  } 
    : posts
  : posts


  type postsCountArgs = Merge<
    Omit<postsFindManyArgs, 'select' | 'include'> & {
      select?: PostsCountAggregateInputType | true
    }
  >

  export interface postsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Posts that matches the filter.
     * @param {postsFindUniqueArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends postsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, postsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'posts'> extends True ? CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>> : CheckSelect<T, Prisma__postsClient<posts | null >, Prisma__postsClient<postsGetPayload<T> | null >>

    /**
     * Find the first Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsFindFirstArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends postsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, postsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'posts'> extends True ? CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>> : CheckSelect<T, Prisma__postsClient<posts | null >, Prisma__postsClient<postsGetPayload<T> | null >>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.posts.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.posts.findMany({ take: 10 })
     * 
     * // Only select the `postID`
     * const postsWithPostIDOnly = await prisma.posts.findMany({ select: { postID: true } })
     * 
    **/
    findMany<T extends postsFindManyArgs>(
      args?: SelectSubset<T, postsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<posts>>, PrismaPromise<Array<postsGetPayload<T>>>>

    /**
     * Create a Posts.
     * @param {postsCreateArgs} args - Arguments to create a Posts.
     * @example
     * // Create one Posts
     * const Posts = await prisma.posts.create({
     *   data: {
     *     // ... data to create a Posts
     *   }
     * })
     * 
    **/
    create<T extends postsCreateArgs>(
      args: SelectSubset<T, postsCreateArgs>
    ): CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>>

    /**
     * Create many Posts.
     *     @param {postsCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const posts = await prisma.posts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends postsCreateManyArgs>(
      args?: SelectSubset<T, postsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Posts.
     * @param {postsDeleteArgs} args - Arguments to delete one Posts.
     * @example
     * // Delete one Posts
     * const Posts = await prisma.posts.delete({
     *   where: {
     *     // ... filter to delete one Posts
     *   }
     * })
     * 
    **/
    delete<T extends postsDeleteArgs>(
      args: SelectSubset<T, postsDeleteArgs>
    ): CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>>

    /**
     * Update one Posts.
     * @param {postsUpdateArgs} args - Arguments to update one Posts.
     * @example
     * // Update one Posts
     * const posts = await prisma.posts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends postsUpdateArgs>(
      args: SelectSubset<T, postsUpdateArgs>
    ): CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>>

    /**
     * Delete zero or more Posts.
     * @param {postsDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.posts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends postsDeleteManyArgs>(
      args?: SelectSubset<T, postsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const posts = await prisma.posts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends postsUpdateManyArgs>(
      args: SelectSubset<T, postsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Posts.
     * @param {postsUpsertArgs} args - Arguments to update or create a Posts.
     * @example
     * // Update or create a Posts
     * const posts = await prisma.posts.upsert({
     *   create: {
     *     // ... data to create a Posts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Posts we want to update
     *   }
     * })
    **/
    upsert<T extends postsUpsertArgs>(
      args: SelectSubset<T, postsUpsertArgs>
    ): CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>>

    /**
     * Find one Posts that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {postsFindUniqueOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends postsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, postsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>>

    /**
     * Find the first Posts that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsFindFirstOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends postsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, postsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__postsClient<posts>, Prisma__postsClient<postsGetPayload<T>>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postsCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.posts.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends postsCountArgs>(
      args?: Subset<T, postsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostsAggregateArgs>(args: Subset<T, PostsAggregateArgs>): PrismaPromise<GetPostsAggregateType<T>>

    /**
     * Group by Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostsGroupByArgs['orderBy'] }
        : { orderBy?: PostsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for posts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__postsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userpost_rs<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    postMedia_rs<T extends postMediaFindManyArgs = {}>(args?: Subset<T, postMediaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<postMedia>>, PrismaPromise<Array<postMediaGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * posts base type for findUnique actions
   */
  export type postsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
    /**
     * Filter, which posts to fetch.
     * 
    **/
    where: postsWhereUniqueInput
  }

  /**
   * posts: findUnique
   */
  export interface postsFindUniqueArgs extends postsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * posts base type for findFirst actions
   */
  export type postsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
    /**
     * Filter, which posts to fetch.
     * 
    **/
    where?: postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     * 
    **/
    orderBy?: Enumerable<postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     * 
    **/
    cursor?: postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     * 
    **/
    distinct?: Enumerable<PostsScalarFieldEnum>
  }

  /**
   * posts: findFirst
   */
  export interface postsFindFirstArgs extends postsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * posts findMany
   */
  export type postsFindManyArgs = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
    /**
     * Filter, which posts to fetch.
     * 
    **/
    where?: postsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     * 
    **/
    orderBy?: Enumerable<postsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing posts.
     * 
    **/
    cursor?: postsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostsScalarFieldEnum>
  }


  /**
   * posts create
   */
  export type postsCreateArgs = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
    /**
     * The data needed to create a posts.
     * 
    **/
    data: XOR<postsCreateInput, postsUncheckedCreateInput>
  }


  /**
   * posts createMany
   */
  export type postsCreateManyArgs = {
    /**
     * The data used to create many posts.
     * 
    **/
    data: Enumerable<postsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * posts update
   */
  export type postsUpdateArgs = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
    /**
     * The data needed to update a posts.
     * 
    **/
    data: XOR<postsUpdateInput, postsUncheckedUpdateInput>
    /**
     * Choose, which posts to update.
     * 
    **/
    where: postsWhereUniqueInput
  }


  /**
   * posts updateMany
   */
  export type postsUpdateManyArgs = {
    /**
     * The data used to update posts.
     * 
    **/
    data: XOR<postsUpdateManyMutationInput, postsUncheckedUpdateManyInput>
    /**
     * Filter which posts to update
     * 
    **/
    where?: postsWhereInput
  }


  /**
   * posts upsert
   */
  export type postsUpsertArgs = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
    /**
     * The filter to search for the posts to update in case it exists.
     * 
    **/
    where: postsWhereUniqueInput
    /**
     * In case the posts found by the `where` argument doesn't exist, create a new posts with this data.
     * 
    **/
    create: XOR<postsCreateInput, postsUncheckedCreateInput>
    /**
     * In case the posts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<postsUpdateInput, postsUncheckedUpdateInput>
  }


  /**
   * posts delete
   */
  export type postsDeleteArgs = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
    /**
     * Filter which posts to delete.
     * 
    **/
    where: postsWhereUniqueInput
  }


  /**
   * posts deleteMany
   */
  export type postsDeleteManyArgs = {
    /**
     * Filter which posts to delete
     * 
    **/
    where?: postsWhereInput
  }


  /**
   * posts: findUniqueOrThrow
   */
  export type postsFindUniqueOrThrowArgs = postsFindUniqueArgsBase
      

  /**
   * posts: findFirstOrThrow
   */
  export type postsFindFirstOrThrowArgs = postsFindFirstArgsBase
      

  /**
   * posts without action
   */
  export type postsArgs = {
    /**
     * Select specific fields to fetch from the posts
     * 
    **/
    select?: postsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postsInclude | null
  }



  /**
   * Model postMedia
   */


  export type AggregatePostMedia = {
    _count: PostMediaCountAggregateOutputType | null
    _min: PostMediaMinAggregateOutputType | null
    _max: PostMediaMaxAggregateOutputType | null
  }

  export type PostMediaMinAggregateOutputType = {
    postID: string | null
    postMediaURL: string | null
  }

  export type PostMediaMaxAggregateOutputType = {
    postID: string | null
    postMediaURL: string | null
  }

  export type PostMediaCountAggregateOutputType = {
    postID: number
    postMediaURL: number
    _all: number
  }


  export type PostMediaMinAggregateInputType = {
    postID?: true
    postMediaURL?: true
  }

  export type PostMediaMaxAggregateInputType = {
    postID?: true
    postMediaURL?: true
  }

  export type PostMediaCountAggregateInputType = {
    postID?: true
    postMediaURL?: true
    _all?: true
  }

  export type PostMediaAggregateArgs = {
    /**
     * Filter which postMedia to aggregate.
     * 
    **/
    where?: postMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postMedias to fetch.
     * 
    **/
    orderBy?: Enumerable<postMediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: postMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postMedias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postMedias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned postMedias
    **/
    _count?: true | PostMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMediaMaxAggregateInputType
  }

  export type GetPostMediaAggregateType<T extends PostMediaAggregateArgs> = {
        [P in keyof T & keyof AggregatePostMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostMedia[P]>
      : GetScalarType<T[P], AggregatePostMedia[P]>
  }




  export type PostMediaGroupByArgs = {
    where?: postMediaWhereInput
    orderBy?: Enumerable<postMediaOrderByWithAggregationInput>
    by: Array<PostMediaScalarFieldEnum>
    having?: postMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostMediaCountAggregateInputType | true
    _min?: PostMediaMinAggregateInputType
    _max?: PostMediaMaxAggregateInputType
  }


  export type PostMediaGroupByOutputType = {
    postID: string
    postMediaURL: string | null
    _count: PostMediaCountAggregateOutputType | null
    _min: PostMediaMinAggregateOutputType | null
    _max: PostMediaMaxAggregateOutputType | null
  }

  type GetPostMediaGroupByPayload<T extends PostMediaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostMediaGroupByOutputType[P]>
            : GetScalarType<T[P], PostMediaGroupByOutputType[P]>
        }
      >
    >


  export type postMediaSelect = {
    postID?: boolean
    postMediaURL?: boolean
    postMedia_rs?: boolean | postsArgs
  }

  export type postMediaInclude = {
    postMedia_rs?: boolean | postsArgs
  }

  export type postMediaGetPayload<
    S extends boolean | null | undefined | postMediaArgs,
    U = keyof S
      > = S extends true
        ? postMedia
    : S extends undefined
    ? never
    : S extends postMediaArgs | postMediaFindManyArgs
    ?'include' extends U
    ? postMedia  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postMedia_rs' ? postsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postMedia_rs' ? postsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof postMedia ? postMedia[P] : never
  } 
    : postMedia
  : postMedia


  type postMediaCountArgs = Merge<
    Omit<postMediaFindManyArgs, 'select' | 'include'> & {
      select?: PostMediaCountAggregateInputType | true
    }
  >

  export interface postMediaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one PostMedia that matches the filter.
     * @param {postMediaFindUniqueArgs} args - Arguments to find a PostMedia
     * @example
     * // Get one PostMedia
     * const postMedia = await prisma.postMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends postMediaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, postMediaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'postMedia'> extends True ? CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>> : CheckSelect<T, Prisma__postMediaClient<postMedia | null >, Prisma__postMediaClient<postMediaGetPayload<T> | null >>

    /**
     * Find the first PostMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postMediaFindFirstArgs} args - Arguments to find a PostMedia
     * @example
     * // Get one PostMedia
     * const postMedia = await prisma.postMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends postMediaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, postMediaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'postMedia'> extends True ? CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>> : CheckSelect<T, Prisma__postMediaClient<postMedia | null >, Prisma__postMediaClient<postMediaGetPayload<T> | null >>

    /**
     * Find zero or more PostMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postMediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostMedias
     * const postMedias = await prisma.postMedia.findMany()
     * 
     * // Get first 10 PostMedias
     * const postMedias = await prisma.postMedia.findMany({ take: 10 })
     * 
     * // Only select the `postID`
     * const postMediaWithPostIDOnly = await prisma.postMedia.findMany({ select: { postID: true } })
     * 
    **/
    findMany<T extends postMediaFindManyArgs>(
      args?: SelectSubset<T, postMediaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<postMedia>>, PrismaPromise<Array<postMediaGetPayload<T>>>>

    /**
     * Create a PostMedia.
     * @param {postMediaCreateArgs} args - Arguments to create a PostMedia.
     * @example
     * // Create one PostMedia
     * const PostMedia = await prisma.postMedia.create({
     *   data: {
     *     // ... data to create a PostMedia
     *   }
     * })
     * 
    **/
    create<T extends postMediaCreateArgs>(
      args: SelectSubset<T, postMediaCreateArgs>
    ): CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>>

    /**
     * Create many PostMedias.
     *     @param {postMediaCreateManyArgs} args - Arguments to create many PostMedias.
     *     @example
     *     // Create many PostMedias
     *     const postMedia = await prisma.postMedia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends postMediaCreateManyArgs>(
      args?: SelectSubset<T, postMediaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PostMedia.
     * @param {postMediaDeleteArgs} args - Arguments to delete one PostMedia.
     * @example
     * // Delete one PostMedia
     * const PostMedia = await prisma.postMedia.delete({
     *   where: {
     *     // ... filter to delete one PostMedia
     *   }
     * })
     * 
    **/
    delete<T extends postMediaDeleteArgs>(
      args: SelectSubset<T, postMediaDeleteArgs>
    ): CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>>

    /**
     * Update one PostMedia.
     * @param {postMediaUpdateArgs} args - Arguments to update one PostMedia.
     * @example
     * // Update one PostMedia
     * const postMedia = await prisma.postMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends postMediaUpdateArgs>(
      args: SelectSubset<T, postMediaUpdateArgs>
    ): CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>>

    /**
     * Delete zero or more PostMedias.
     * @param {postMediaDeleteManyArgs} args - Arguments to filter PostMedias to delete.
     * @example
     * // Delete a few PostMedias
     * const { count } = await prisma.postMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends postMediaDeleteManyArgs>(
      args?: SelectSubset<T, postMediaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostMedias
     * const postMedia = await prisma.postMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends postMediaUpdateManyArgs>(
      args: SelectSubset<T, postMediaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PostMedia.
     * @param {postMediaUpsertArgs} args - Arguments to update or create a PostMedia.
     * @example
     * // Update or create a PostMedia
     * const postMedia = await prisma.postMedia.upsert({
     *   create: {
     *     // ... data to create a PostMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostMedia we want to update
     *   }
     * })
    **/
    upsert<T extends postMediaUpsertArgs>(
      args: SelectSubset<T, postMediaUpsertArgs>
    ): CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>>

    /**
     * Find one PostMedia that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {postMediaFindUniqueOrThrowArgs} args - Arguments to find a PostMedia
     * @example
     * // Get one PostMedia
     * const postMedia = await prisma.postMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends postMediaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, postMediaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>>

    /**
     * Find the first PostMedia that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postMediaFindFirstOrThrowArgs} args - Arguments to find a PostMedia
     * @example
     * // Get one PostMedia
     * const postMedia = await prisma.postMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends postMediaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, postMediaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__postMediaClient<postMedia>, Prisma__postMediaClient<postMediaGetPayload<T>>>

    /**
     * Count the number of PostMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postMediaCountArgs} args - Arguments to filter PostMedias to count.
     * @example
     * // Count the number of PostMedias
     * const count = await prisma.postMedia.count({
     *   where: {
     *     // ... the filter for the PostMedias we want to count
     *   }
     * })
    **/
    count<T extends postMediaCountArgs>(
      args?: Subset<T, postMediaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostMediaAggregateArgs>(args: Subset<T, PostMediaAggregateArgs>): PrismaPromise<GetPostMediaAggregateType<T>>

    /**
     * Group by PostMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostMediaGroupByArgs['orderBy'] }
        : { orderBy?: PostMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostMediaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for postMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__postMediaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postMedia_rs<T extends postsArgs = {}>(args?: Subset<T, postsArgs>): CheckSelect<T, Prisma__postsClient<posts | null >, Prisma__postsClient<postsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * postMedia base type for findUnique actions
   */
  export type postMediaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
    /**
     * Filter, which postMedia to fetch.
     * 
    **/
    where: postMediaWhereUniqueInput
  }

  /**
   * postMedia: findUnique
   */
  export interface postMediaFindUniqueArgs extends postMediaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * postMedia base type for findFirst actions
   */
  export type postMediaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
    /**
     * Filter, which postMedia to fetch.
     * 
    **/
    where?: postMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postMedias to fetch.
     * 
    **/
    orderBy?: Enumerable<postMediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for postMedias.
     * 
    **/
    cursor?: postMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postMedias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postMedias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of postMedias.
     * 
    **/
    distinct?: Enumerable<PostMediaScalarFieldEnum>
  }

  /**
   * postMedia: findFirst
   */
  export interface postMediaFindFirstArgs extends postMediaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * postMedia findMany
   */
  export type postMediaFindManyArgs = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
    /**
     * Filter, which postMedias to fetch.
     * 
    **/
    where?: postMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postMedias to fetch.
     * 
    **/
    orderBy?: Enumerable<postMediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing postMedias.
     * 
    **/
    cursor?: postMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postMedias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postMedias.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostMediaScalarFieldEnum>
  }


  /**
   * postMedia create
   */
  export type postMediaCreateArgs = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
    /**
     * The data needed to create a postMedia.
     * 
    **/
    data: XOR<postMediaCreateInput, postMediaUncheckedCreateInput>
  }


  /**
   * postMedia createMany
   */
  export type postMediaCreateManyArgs = {
    /**
     * The data used to create many postMedias.
     * 
    **/
    data: Enumerable<postMediaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * postMedia update
   */
  export type postMediaUpdateArgs = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
    /**
     * The data needed to update a postMedia.
     * 
    **/
    data: XOR<postMediaUpdateInput, postMediaUncheckedUpdateInput>
    /**
     * Choose, which postMedia to update.
     * 
    **/
    where: postMediaWhereUniqueInput
  }


  /**
   * postMedia updateMany
   */
  export type postMediaUpdateManyArgs = {
    /**
     * The data used to update postMedias.
     * 
    **/
    data: XOR<postMediaUpdateManyMutationInput, postMediaUncheckedUpdateManyInput>
    /**
     * Filter which postMedias to update
     * 
    **/
    where?: postMediaWhereInput
  }


  /**
   * postMedia upsert
   */
  export type postMediaUpsertArgs = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
    /**
     * The filter to search for the postMedia to update in case it exists.
     * 
    **/
    where: postMediaWhereUniqueInput
    /**
     * In case the postMedia found by the `where` argument doesn't exist, create a new postMedia with this data.
     * 
    **/
    create: XOR<postMediaCreateInput, postMediaUncheckedCreateInput>
    /**
     * In case the postMedia was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<postMediaUpdateInput, postMediaUncheckedUpdateInput>
  }


  /**
   * postMedia delete
   */
  export type postMediaDeleteArgs = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
    /**
     * Filter which postMedia to delete.
     * 
    **/
    where: postMediaWhereUniqueInput
  }


  /**
   * postMedia deleteMany
   */
  export type postMediaDeleteManyArgs = {
    /**
     * Filter which postMedias to delete
     * 
    **/
    where?: postMediaWhereInput
  }


  /**
   * postMedia: findUniqueOrThrow
   */
  export type postMediaFindUniqueOrThrowArgs = postMediaFindUniqueArgsBase
      

  /**
   * postMedia: findFirstOrThrow
   */
  export type postMediaFindFirstOrThrowArgs = postMediaFindFirstArgsBase
      

  /**
   * postMedia without action
   */
  export type postMediaArgs = {
    /**
     * Select specific fields to fetch from the postMedia
     * 
    **/
    select?: postMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: postMediaInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    email: string | null
    password: string | null
    name: string | null
    dpURL: string | null
    role: Role | null
  }

  export type UsersMaxAggregateOutputType = {
    email: string | null
    password: string | null
    name: string | null
    dpURL: string | null
    role: Role | null
  }

  export type UsersCountAggregateOutputType = {
    email: number
    password: number
    name: number
    dpURL: number
    role: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    email?: true
    password?: true
    name?: true
    dpURL?: true
    role?: true
  }

  export type UsersMaxAggregateInputType = {
    email?: true
    password?: true
    name?: true
    dpURL?: true
    role?: true
  }

  export type UsersCountAggregateInputType = {
    email?: true
    password?: true
    name?: true
    dpURL?: true
    role?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    email: string
    password: string
    name: string
    dpURL: string | null
    role: Role
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    email?: boolean
    password?: boolean
    name?: boolean
    dpURL?: boolean
    role?: boolean
    postemail_rs?: boolean | postsFindManyArgs
    studentEmail_user_rs?: boolean | studentsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    postemail_rs?: boolean | postsFindManyArgs
    studentEmail_user_rs?: boolean | studentsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'postemail_rs' ? Array < postsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'studentEmail_user_rs' ? Array < studentsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'postemail_rs' ? Array < postsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'studentEmail_user_rs' ? Array < studentsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const usersWithEmailOnly = await prisma.users.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find one Users that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    postemail_rs<T extends postsFindManyArgs = {}>(args?: Subset<T, postsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<posts>>, PrismaPromise<Array<postsGetPayload<T>>>>;

    studentEmail_user_rs<T extends studentsFindManyArgs = {}>(args?: Subset<T, studentsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<students>>, PrismaPromise<Array<studentsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users: findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users: findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users: findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = usersFindUniqueArgsBase
      

  /**
   * users: findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = usersFindFirstArgsBase
      

  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model students
   */


  export type AggregateStudents = {
    _count: StudentsCountAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  export type StudentsMinAggregateOutputType = {
    studentEmail: string | null
    matriculationNumber: string | null
  }

  export type StudentsMaxAggregateOutputType = {
    studentEmail: string | null
    matriculationNumber: string | null
  }

  export type StudentsCountAggregateOutputType = {
    studentEmail: number
    matriculationNumber: number
    _all: number
  }


  export type StudentsMinAggregateInputType = {
    studentEmail?: true
    matriculationNumber?: true
  }

  export type StudentsMaxAggregateInputType = {
    studentEmail?: true
    matriculationNumber?: true
  }

  export type StudentsCountAggregateInputType = {
    studentEmail?: true
    matriculationNumber?: true
    _all?: true
  }

  export type StudentsAggregateArgs = {
    /**
     * Filter which students to aggregate.
     * 
    **/
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students
    **/
    _count?: true | StudentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentsMaxAggregateInputType
  }

  export type GetStudentsAggregateType<T extends StudentsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudents[P]>
      : GetScalarType<T[P], AggregateStudents[P]>
  }




  export type StudentsGroupByArgs = {
    where?: studentsWhereInput
    orderBy?: Enumerable<studentsOrderByWithAggregationInput>
    by: Array<StudentsScalarFieldEnum>
    having?: studentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentsCountAggregateInputType | true
    _min?: StudentsMinAggregateInputType
    _max?: StudentsMaxAggregateInputType
  }


  export type StudentsGroupByOutputType = {
    studentEmail: string
    matriculationNumber: string
    _count: StudentsCountAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  type GetStudentsGroupByPayload<T extends StudentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentsGroupByOutputType[P]>
            : GetScalarType<T[P], StudentsGroupByOutputType[P]>
        }
      >
    >


  export type studentsSelect = {
    studentEmail?: boolean
    matriculationNumber?: boolean
    studentEmail_user_rs?: boolean | usersArgs
    student_Masteries_rs?: boolean | studentMasteriesFindManyArgs
    students_studentAttempt_rs?: boolean | studentAttemptsFindManyArgs
    _count?: boolean | StudentsCountOutputTypeArgs
  }

  export type studentsInclude = {
    studentEmail_user_rs?: boolean | usersArgs
    student_Masteries_rs?: boolean | studentMasteriesFindManyArgs
    students_studentAttempt_rs?: boolean | studentAttemptsFindManyArgs
    _count?: boolean | StudentsCountOutputTypeArgs
  }

  export type studentsGetPayload<
    S extends boolean | null | undefined | studentsArgs,
    U = keyof S
      > = S extends true
        ? students
    : S extends undefined
    ? never
    : S extends studentsArgs | studentsFindManyArgs
    ?'include' extends U
    ? students  & {
    [P in TrueKeys<S['include']>]:
        P extends 'studentEmail_user_rs' ? usersGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'student_Masteries_rs' ? Array < studentMasteriesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'students_studentAttempt_rs' ? Array < studentAttemptsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? StudentsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'studentEmail_user_rs' ? usersGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'student_Masteries_rs' ? Array < studentMasteriesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'students_studentAttempt_rs' ? Array < studentAttemptsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? StudentsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof students ? students[P] : never
  } 
    : students
  : students


  type studentsCountArgs = Merge<
    Omit<studentsFindManyArgs, 'select' | 'include'> & {
      select?: StudentsCountAggregateInputType | true
    }
  >

  export interface studentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Students that matches the filter.
     * @param {studentsFindUniqueArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, studentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'students'> extends True ? CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>> : CheckSelect<T, Prisma__studentsClient<students | null >, Prisma__studentsClient<studentsGetPayload<T> | null >>

    /**
     * Find the first Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindFirstArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, studentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'students'> extends True ? CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>> : CheckSelect<T, Prisma__studentsClient<students | null >, Prisma__studentsClient<studentsGetPayload<T> | null >>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.students.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.students.findMany({ take: 10 })
     * 
     * // Only select the `studentEmail`
     * const studentsWithStudentEmailOnly = await prisma.students.findMany({ select: { studentEmail: true } })
     * 
    **/
    findMany<T extends studentsFindManyArgs>(
      args?: SelectSubset<T, studentsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<students>>, PrismaPromise<Array<studentsGetPayload<T>>>>

    /**
     * Create a Students.
     * @param {studentsCreateArgs} args - Arguments to create a Students.
     * @example
     * // Create one Students
     * const Students = await prisma.students.create({
     *   data: {
     *     // ... data to create a Students
     *   }
     * })
     * 
    **/
    create<T extends studentsCreateArgs>(
      args: SelectSubset<T, studentsCreateArgs>
    ): CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>>

    /**
     * Create many Students.
     *     @param {studentsCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const students = await prisma.students.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentsCreateManyArgs>(
      args?: SelectSubset<T, studentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Students.
     * @param {studentsDeleteArgs} args - Arguments to delete one Students.
     * @example
     * // Delete one Students
     * const Students = await prisma.students.delete({
     *   where: {
     *     // ... filter to delete one Students
     *   }
     * })
     * 
    **/
    delete<T extends studentsDeleteArgs>(
      args: SelectSubset<T, studentsDeleteArgs>
    ): CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>>

    /**
     * Update one Students.
     * @param {studentsUpdateArgs} args - Arguments to update one Students.
     * @example
     * // Update one Students
     * const students = await prisma.students.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentsUpdateArgs>(
      args: SelectSubset<T, studentsUpdateArgs>
    ): CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>>

    /**
     * Delete zero or more Students.
     * @param {studentsDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.students.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentsDeleteManyArgs>(
      args?: SelectSubset<T, studentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const students = await prisma.students.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentsUpdateManyArgs>(
      args: SelectSubset<T, studentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Students.
     * @param {studentsUpsertArgs} args - Arguments to update or create a Students.
     * @example
     * // Update or create a Students
     * const students = await prisma.students.upsert({
     *   create: {
     *     // ... data to create a Students
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Students we want to update
     *   }
     * })
    **/
    upsert<T extends studentsUpsertArgs>(
      args: SelectSubset<T, studentsUpsertArgs>
    ): CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>>

    /**
     * Find one Students that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {studentsFindUniqueOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends studentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, studentsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>>

    /**
     * Find the first Students that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindFirstOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends studentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, studentsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__studentsClient<students>, Prisma__studentsClient<studentsGetPayload<T>>>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.students.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends studentsCountArgs>(
      args?: Subset<T, studentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentsAggregateArgs>(args: Subset<T, StudentsAggregateArgs>): PrismaPromise<GetStudentsAggregateType<T>>

    /**
     * Group by Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentsGroupByArgs['orderBy'] }
        : { orderBy?: StudentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for students.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__studentsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    studentEmail_user_rs<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    student_Masteries_rs<T extends studentMasteriesFindManyArgs = {}>(args?: Subset<T, studentMasteriesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<studentMasteries>>, PrismaPromise<Array<studentMasteriesGetPayload<T>>>>;

    students_studentAttempt_rs<T extends studentAttemptsFindManyArgs = {}>(args?: Subset<T, studentAttemptsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<studentAttempts>>, PrismaPromise<Array<studentAttemptsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * students base type for findUnique actions
   */
  export type studentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
    /**
     * Filter, which students to fetch.
     * 
    **/
    where: studentsWhereUniqueInput
  }

  /**
   * students: findUnique
   */
  export interface studentsFindUniqueArgs extends studentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * students base type for findFirst actions
   */
  export type studentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
    /**
     * Filter, which students to fetch.
     * 
    **/
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     * 
    **/
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     * 
    **/
    distinct?: Enumerable<StudentsScalarFieldEnum>
  }

  /**
   * students: findFirst
   */
  export interface studentsFindFirstArgs extends studentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * students findMany
   */
  export type studentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
    /**
     * Filter, which students to fetch.
     * 
    **/
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students.
     * 
    **/
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentsScalarFieldEnum>
  }


  /**
   * students create
   */
  export type studentsCreateArgs = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
    /**
     * The data needed to create a students.
     * 
    **/
    data: XOR<studentsCreateInput, studentsUncheckedCreateInput>
  }


  /**
   * students createMany
   */
  export type studentsCreateManyArgs = {
    /**
     * The data used to create many students.
     * 
    **/
    data: Enumerable<studentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * students update
   */
  export type studentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
    /**
     * The data needed to update a students.
     * 
    **/
    data: XOR<studentsUpdateInput, studentsUncheckedUpdateInput>
    /**
     * Choose, which students to update.
     * 
    **/
    where: studentsWhereUniqueInput
  }


  /**
   * students updateMany
   */
  export type studentsUpdateManyArgs = {
    /**
     * The data used to update students.
     * 
    **/
    data: XOR<studentsUpdateManyMutationInput, studentsUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     * 
    **/
    where?: studentsWhereInput
  }


  /**
   * students upsert
   */
  export type studentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
    /**
     * The filter to search for the students to update in case it exists.
     * 
    **/
    where: studentsWhereUniqueInput
    /**
     * In case the students found by the `where` argument doesn't exist, create a new students with this data.
     * 
    **/
    create: XOR<studentsCreateInput, studentsUncheckedCreateInput>
    /**
     * In case the students was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<studentsUpdateInput, studentsUncheckedUpdateInput>
  }


  /**
   * students delete
   */
  export type studentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
    /**
     * Filter which students to delete.
     * 
    **/
    where: studentsWhereUniqueInput
  }


  /**
   * students deleteMany
   */
  export type studentsDeleteManyArgs = {
    /**
     * Filter which students to delete
     * 
    **/
    where?: studentsWhereInput
  }


  /**
   * students: findUniqueOrThrow
   */
  export type studentsFindUniqueOrThrowArgs = studentsFindUniqueArgsBase
      

  /**
   * students: findFirstOrThrow
   */
  export type studentsFindFirstOrThrowArgs = studentsFindFirstArgsBase
      

  /**
   * students without action
   */
  export type studentsArgs = {
    /**
     * Select specific fields to fetch from the students
     * 
    **/
    select?: studentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentsInclude | null
  }



  /**
   * Model studentAttempts
   */


  export type AggregateStudentAttempts = {
    _count: StudentAttemptsCountAggregateOutputType | null
    _avg: StudentAttemptsAvgAggregateOutputType | null
    _sum: StudentAttemptsSumAggregateOutputType | null
    _min: StudentAttemptsMinAggregateOutputType | null
    _max: StudentAttemptsMaxAggregateOutputType | null
  }

  export type StudentAttemptsAvgAggregateOutputType = {
    attemptOption: number | null
    attemptSeconds: number | null
  }

  export type StudentAttemptsSumAggregateOutputType = {
    attemptOption: number | null
    attemptSeconds: number | null
  }

  export type StudentAttemptsMinAggregateOutputType = {
    studentEmail: string | null
    questionID: string | null
    attemptOption: number | null
    attemptCorrect: boolean | null
    attemptSeconds: number | null
  }

  export type StudentAttemptsMaxAggregateOutputType = {
    studentEmail: string | null
    questionID: string | null
    attemptOption: number | null
    attemptCorrect: boolean | null
    attemptSeconds: number | null
  }

  export type StudentAttemptsCountAggregateOutputType = {
    studentEmail: number
    questionID: number
    attemptOption: number
    attemptCorrect: number
    attemptSeconds: number
    _all: number
  }


  export type StudentAttemptsAvgAggregateInputType = {
    attemptOption?: true
    attemptSeconds?: true
  }

  export type StudentAttemptsSumAggregateInputType = {
    attemptOption?: true
    attemptSeconds?: true
  }

  export type StudentAttemptsMinAggregateInputType = {
    studentEmail?: true
    questionID?: true
    attemptOption?: true
    attemptCorrect?: true
    attemptSeconds?: true
  }

  export type StudentAttemptsMaxAggregateInputType = {
    studentEmail?: true
    questionID?: true
    attemptOption?: true
    attemptCorrect?: true
    attemptSeconds?: true
  }

  export type StudentAttemptsCountAggregateInputType = {
    studentEmail?: true
    questionID?: true
    attemptOption?: true
    attemptCorrect?: true
    attemptSeconds?: true
    _all?: true
  }

  export type StudentAttemptsAggregateArgs = {
    /**
     * Filter which studentAttempts to aggregate.
     * 
    **/
    where?: studentAttemptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentAttempts to fetch.
     * 
    **/
    orderBy?: Enumerable<studentAttemptsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: studentAttemptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentAttempts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentAttempts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned studentAttempts
    **/
    _count?: true | StudentAttemptsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAttemptsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentAttemptsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentAttemptsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentAttemptsMaxAggregateInputType
  }

  export type GetStudentAttemptsAggregateType<T extends StudentAttemptsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentAttempts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentAttempts[P]>
      : GetScalarType<T[P], AggregateStudentAttempts[P]>
  }




  export type StudentAttemptsGroupByArgs = {
    where?: studentAttemptsWhereInput
    orderBy?: Enumerable<studentAttemptsOrderByWithAggregationInput>
    by: Array<StudentAttemptsScalarFieldEnum>
    having?: studentAttemptsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentAttemptsCountAggregateInputType | true
    _avg?: StudentAttemptsAvgAggregateInputType
    _sum?: StudentAttemptsSumAggregateInputType
    _min?: StudentAttemptsMinAggregateInputType
    _max?: StudentAttemptsMaxAggregateInputType
  }


  export type StudentAttemptsGroupByOutputType = {
    studentEmail: string
    questionID: string
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
    _count: StudentAttemptsCountAggregateOutputType | null
    _avg: StudentAttemptsAvgAggregateOutputType | null
    _sum: StudentAttemptsSumAggregateOutputType | null
    _min: StudentAttemptsMinAggregateOutputType | null
    _max: StudentAttemptsMaxAggregateOutputType | null
  }

  type GetStudentAttemptsGroupByPayload<T extends StudentAttemptsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentAttemptsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentAttemptsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentAttemptsGroupByOutputType[P]>
            : GetScalarType<T[P], StudentAttemptsGroupByOutputType[P]>
        }
      >
    >


  export type studentAttemptsSelect = {
    studentEmail?: boolean
    questionID?: boolean
    attemptOption?: boolean
    attemptCorrect?: boolean
    attemptSeconds?: boolean
    students_studentAttempt_rs?: boolean | studentsArgs
    questionAttemptID_rs?: boolean | questionsArgs
  }

  export type studentAttemptsInclude = {
    students_studentAttempt_rs?: boolean | studentsArgs
    questionAttemptID_rs?: boolean | questionsArgs
  }

  export type studentAttemptsGetPayload<
    S extends boolean | null | undefined | studentAttemptsArgs,
    U = keyof S
      > = S extends true
        ? studentAttempts
    : S extends undefined
    ? never
    : S extends studentAttemptsArgs | studentAttemptsFindManyArgs
    ?'include' extends U
    ? studentAttempts  & {
    [P in TrueKeys<S['include']>]:
        P extends 'students_studentAttempt_rs' ? studentsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'questionAttemptID_rs' ? questionsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'students_studentAttempt_rs' ? studentsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'questionAttemptID_rs' ? questionsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof studentAttempts ? studentAttempts[P] : never
  } 
    : studentAttempts
  : studentAttempts


  type studentAttemptsCountArgs = Merge<
    Omit<studentAttemptsFindManyArgs, 'select' | 'include'> & {
      select?: StudentAttemptsCountAggregateInputType | true
    }
  >

  export interface studentAttemptsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one StudentAttempts that matches the filter.
     * @param {studentAttemptsFindUniqueArgs} args - Arguments to find a StudentAttempts
     * @example
     * // Get one StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentAttemptsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, studentAttemptsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'studentAttempts'> extends True ? CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>> : CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts | null >, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T> | null >>

    /**
     * Find the first StudentAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentAttemptsFindFirstArgs} args - Arguments to find a StudentAttempts
     * @example
     * // Get one StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentAttemptsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, studentAttemptsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'studentAttempts'> extends True ? CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>> : CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts | null >, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T> | null >>

    /**
     * Find zero or more StudentAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentAttemptsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.findMany()
     * 
     * // Get first 10 StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.findMany({ take: 10 })
     * 
     * // Only select the `studentEmail`
     * const studentAttemptsWithStudentEmailOnly = await prisma.studentAttempts.findMany({ select: { studentEmail: true } })
     * 
    **/
    findMany<T extends studentAttemptsFindManyArgs>(
      args?: SelectSubset<T, studentAttemptsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<studentAttempts>>, PrismaPromise<Array<studentAttemptsGetPayload<T>>>>

    /**
     * Create a StudentAttempts.
     * @param {studentAttemptsCreateArgs} args - Arguments to create a StudentAttempts.
     * @example
     * // Create one StudentAttempts
     * const StudentAttempts = await prisma.studentAttempts.create({
     *   data: {
     *     // ... data to create a StudentAttempts
     *   }
     * })
     * 
    **/
    create<T extends studentAttemptsCreateArgs>(
      args: SelectSubset<T, studentAttemptsCreateArgs>
    ): CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>>

    /**
     * Create many StudentAttempts.
     *     @param {studentAttemptsCreateManyArgs} args - Arguments to create many StudentAttempts.
     *     @example
     *     // Create many StudentAttempts
     *     const studentAttempts = await prisma.studentAttempts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentAttemptsCreateManyArgs>(
      args?: SelectSubset<T, studentAttemptsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a StudentAttempts.
     * @param {studentAttemptsDeleteArgs} args - Arguments to delete one StudentAttempts.
     * @example
     * // Delete one StudentAttempts
     * const StudentAttempts = await prisma.studentAttempts.delete({
     *   where: {
     *     // ... filter to delete one StudentAttempts
     *   }
     * })
     * 
    **/
    delete<T extends studentAttemptsDeleteArgs>(
      args: SelectSubset<T, studentAttemptsDeleteArgs>
    ): CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>>

    /**
     * Update one StudentAttempts.
     * @param {studentAttemptsUpdateArgs} args - Arguments to update one StudentAttempts.
     * @example
     * // Update one StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentAttemptsUpdateArgs>(
      args: SelectSubset<T, studentAttemptsUpdateArgs>
    ): CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>>

    /**
     * Delete zero or more StudentAttempts.
     * @param {studentAttemptsDeleteManyArgs} args - Arguments to filter StudentAttempts to delete.
     * @example
     * // Delete a few StudentAttempts
     * const { count } = await prisma.studentAttempts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentAttemptsDeleteManyArgs>(
      args?: SelectSubset<T, studentAttemptsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentAttemptsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentAttemptsUpdateManyArgs>(
      args: SelectSubset<T, studentAttemptsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentAttempts.
     * @param {studentAttemptsUpsertArgs} args - Arguments to update or create a StudentAttempts.
     * @example
     * // Update or create a StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.upsert({
     *   create: {
     *     // ... data to create a StudentAttempts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentAttempts we want to update
     *   }
     * })
    **/
    upsert<T extends studentAttemptsUpsertArgs>(
      args: SelectSubset<T, studentAttemptsUpsertArgs>
    ): CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>>

    /**
     * Find one StudentAttempts that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {studentAttemptsFindUniqueOrThrowArgs} args - Arguments to find a StudentAttempts
     * @example
     * // Get one StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends studentAttemptsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, studentAttemptsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>>

    /**
     * Find the first StudentAttempts that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentAttemptsFindFirstOrThrowArgs} args - Arguments to find a StudentAttempts
     * @example
     * // Get one StudentAttempts
     * const studentAttempts = await prisma.studentAttempts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends studentAttemptsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, studentAttemptsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__studentAttemptsClient<studentAttempts>, Prisma__studentAttemptsClient<studentAttemptsGetPayload<T>>>

    /**
     * Count the number of StudentAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentAttemptsCountArgs} args - Arguments to filter StudentAttempts to count.
     * @example
     * // Count the number of StudentAttempts
     * const count = await prisma.studentAttempts.count({
     *   where: {
     *     // ... the filter for the StudentAttempts we want to count
     *   }
     * })
    **/
    count<T extends studentAttemptsCountArgs>(
      args?: Subset<T, studentAttemptsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentAttemptsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttemptsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAttemptsAggregateArgs>(args: Subset<T, StudentAttemptsAggregateArgs>): PrismaPromise<GetStudentAttemptsAggregateType<T>>

    /**
     * Group by StudentAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttemptsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentAttemptsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentAttemptsGroupByArgs['orderBy'] }
        : { orderBy?: StudentAttemptsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentAttemptsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentAttemptsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for studentAttempts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__studentAttemptsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    students_studentAttempt_rs<T extends studentsArgs = {}>(args?: Subset<T, studentsArgs>): CheckSelect<T, Prisma__studentsClient<students | null >, Prisma__studentsClient<studentsGetPayload<T> | null >>;

    questionAttemptID_rs<T extends questionsArgs = {}>(args?: Subset<T, questionsArgs>): CheckSelect<T, Prisma__questionsClient<questions | null >, Prisma__questionsClient<questionsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * studentAttempts base type for findUnique actions
   */
  export type studentAttemptsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
    /**
     * Filter, which studentAttempts to fetch.
     * 
    **/
    where: studentAttemptsWhereUniqueInput
  }

  /**
   * studentAttempts: findUnique
   */
  export interface studentAttemptsFindUniqueArgs extends studentAttemptsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * studentAttempts base type for findFirst actions
   */
  export type studentAttemptsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
    /**
     * Filter, which studentAttempts to fetch.
     * 
    **/
    where?: studentAttemptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentAttempts to fetch.
     * 
    **/
    orderBy?: Enumerable<studentAttemptsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studentAttempts.
     * 
    **/
    cursor?: studentAttemptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentAttempts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentAttempts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studentAttempts.
     * 
    **/
    distinct?: Enumerable<StudentAttemptsScalarFieldEnum>
  }

  /**
   * studentAttempts: findFirst
   */
  export interface studentAttemptsFindFirstArgs extends studentAttemptsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * studentAttempts findMany
   */
  export type studentAttemptsFindManyArgs = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
    /**
     * Filter, which studentAttempts to fetch.
     * 
    **/
    where?: studentAttemptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentAttempts to fetch.
     * 
    **/
    orderBy?: Enumerable<studentAttemptsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing studentAttempts.
     * 
    **/
    cursor?: studentAttemptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentAttempts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentAttempts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentAttemptsScalarFieldEnum>
  }


  /**
   * studentAttempts create
   */
  export type studentAttemptsCreateArgs = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
    /**
     * The data needed to create a studentAttempts.
     * 
    **/
    data: XOR<studentAttemptsCreateInput, studentAttemptsUncheckedCreateInput>
  }


  /**
   * studentAttempts createMany
   */
  export type studentAttemptsCreateManyArgs = {
    /**
     * The data used to create many studentAttempts.
     * 
    **/
    data: Enumerable<studentAttemptsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * studentAttempts update
   */
  export type studentAttemptsUpdateArgs = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
    /**
     * The data needed to update a studentAttempts.
     * 
    **/
    data: XOR<studentAttemptsUpdateInput, studentAttemptsUncheckedUpdateInput>
    /**
     * Choose, which studentAttempts to update.
     * 
    **/
    where: studentAttemptsWhereUniqueInput
  }


  /**
   * studentAttempts updateMany
   */
  export type studentAttemptsUpdateManyArgs = {
    /**
     * The data used to update studentAttempts.
     * 
    **/
    data: XOR<studentAttemptsUpdateManyMutationInput, studentAttemptsUncheckedUpdateManyInput>
    /**
     * Filter which studentAttempts to update
     * 
    **/
    where?: studentAttemptsWhereInput
  }


  /**
   * studentAttempts upsert
   */
  export type studentAttemptsUpsertArgs = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
    /**
     * The filter to search for the studentAttempts to update in case it exists.
     * 
    **/
    where: studentAttemptsWhereUniqueInput
    /**
     * In case the studentAttempts found by the `where` argument doesn't exist, create a new studentAttempts with this data.
     * 
    **/
    create: XOR<studentAttemptsCreateInput, studentAttemptsUncheckedCreateInput>
    /**
     * In case the studentAttempts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<studentAttemptsUpdateInput, studentAttemptsUncheckedUpdateInput>
  }


  /**
   * studentAttempts delete
   */
  export type studentAttemptsDeleteArgs = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
    /**
     * Filter which studentAttempts to delete.
     * 
    **/
    where: studentAttemptsWhereUniqueInput
  }


  /**
   * studentAttempts deleteMany
   */
  export type studentAttemptsDeleteManyArgs = {
    /**
     * Filter which studentAttempts to delete
     * 
    **/
    where?: studentAttemptsWhereInput
  }


  /**
   * studentAttempts: findUniqueOrThrow
   */
  export type studentAttemptsFindUniqueOrThrowArgs = studentAttemptsFindUniqueArgsBase
      

  /**
   * studentAttempts: findFirstOrThrow
   */
  export type studentAttemptsFindFirstOrThrowArgs = studentAttemptsFindFirstArgsBase
      

  /**
   * studentAttempts without action
   */
  export type studentAttemptsArgs = {
    /**
     * Select specific fields to fetch from the studentAttempts
     * 
    **/
    select?: studentAttemptsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentAttemptsInclude | null
  }



  /**
   * Model studentMasteries
   */


  export type AggregateStudentMasteries = {
    _count: StudentMasteriesCountAggregateOutputType | null
    _avg: StudentMasteriesAvgAggregateOutputType | null
    _sum: StudentMasteriesSumAggregateOutputType | null
    _min: StudentMasteriesMinAggregateOutputType | null
    _max: StudentMasteriesMaxAggregateOutputType | null
  }

  export type StudentMasteriesAvgAggregateOutputType = {
    masteryLevel: number | null
    courseCompletion: number | null
  }

  export type StudentMasteriesSumAggregateOutputType = {
    masteryLevel: number | null
    courseCompletion: number | null
  }

  export type StudentMasteriesMinAggregateOutputType = {
    studentEmail: string | null
    topicID: string | null
    masteryLevel: number | null
    courseCompletion: number | null
  }

  export type StudentMasteriesMaxAggregateOutputType = {
    studentEmail: string | null
    topicID: string | null
    masteryLevel: number | null
    courseCompletion: number | null
  }

  export type StudentMasteriesCountAggregateOutputType = {
    studentEmail: number
    topicID: number
    masteryLevel: number
    courseCompletion: number
    _all: number
  }


  export type StudentMasteriesAvgAggregateInputType = {
    masteryLevel?: true
    courseCompletion?: true
  }

  export type StudentMasteriesSumAggregateInputType = {
    masteryLevel?: true
    courseCompletion?: true
  }

  export type StudentMasteriesMinAggregateInputType = {
    studentEmail?: true
    topicID?: true
    masteryLevel?: true
    courseCompletion?: true
  }

  export type StudentMasteriesMaxAggregateInputType = {
    studentEmail?: true
    topicID?: true
    masteryLevel?: true
    courseCompletion?: true
  }

  export type StudentMasteriesCountAggregateInputType = {
    studentEmail?: true
    topicID?: true
    masteryLevel?: true
    courseCompletion?: true
    _all?: true
  }

  export type StudentMasteriesAggregateArgs = {
    /**
     * Filter which studentMasteries to aggregate.
     * 
    **/
    where?: studentMasteriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentMasteries to fetch.
     * 
    **/
    orderBy?: Enumerable<studentMasteriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: studentMasteriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentMasteries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentMasteries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned studentMasteries
    **/
    _count?: true | StudentMasteriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentMasteriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentMasteriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMasteriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMasteriesMaxAggregateInputType
  }

  export type GetStudentMasteriesAggregateType<T extends StudentMasteriesAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentMasteries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentMasteries[P]>
      : GetScalarType<T[P], AggregateStudentMasteries[P]>
  }




  export type StudentMasteriesGroupByArgs = {
    where?: studentMasteriesWhereInput
    orderBy?: Enumerable<studentMasteriesOrderByWithAggregationInput>
    by: Array<StudentMasteriesScalarFieldEnum>
    having?: studentMasteriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentMasteriesCountAggregateInputType | true
    _avg?: StudentMasteriesAvgAggregateInputType
    _sum?: StudentMasteriesSumAggregateInputType
    _min?: StudentMasteriesMinAggregateInputType
    _max?: StudentMasteriesMaxAggregateInputType
  }


  export type StudentMasteriesGroupByOutputType = {
    studentEmail: string
    topicID: string
    masteryLevel: number
    courseCompletion: number
    _count: StudentMasteriesCountAggregateOutputType | null
    _avg: StudentMasteriesAvgAggregateOutputType | null
    _sum: StudentMasteriesSumAggregateOutputType | null
    _min: StudentMasteriesMinAggregateOutputType | null
    _max: StudentMasteriesMaxAggregateOutputType | null
  }

  type GetStudentMasteriesGroupByPayload<T extends StudentMasteriesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentMasteriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentMasteriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentMasteriesGroupByOutputType[P]>
            : GetScalarType<T[P], StudentMasteriesGroupByOutputType[P]>
        }
      >
    >


  export type studentMasteriesSelect = {
    studentEmail?: boolean
    topicID?: boolean
    masteryLevel?: boolean
    courseCompletion?: boolean
    studentMasteriesTopic_rs?: boolean | topicsArgs
    student_Masteries_rs?: boolean | studentsArgs
  }

  export type studentMasteriesInclude = {
    studentMasteriesTopic_rs?: boolean | topicsArgs
    student_Masteries_rs?: boolean | studentsArgs
  }

  export type studentMasteriesGetPayload<
    S extends boolean | null | undefined | studentMasteriesArgs,
    U = keyof S
      > = S extends true
        ? studentMasteries
    : S extends undefined
    ? never
    : S extends studentMasteriesArgs | studentMasteriesFindManyArgs
    ?'include' extends U
    ? studentMasteries  & {
    [P in TrueKeys<S['include']>]:
        P extends 'studentMasteriesTopic_rs' ? topicsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'student_Masteries_rs' ? studentsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'studentMasteriesTopic_rs' ? topicsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'student_Masteries_rs' ? studentsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof studentMasteries ? studentMasteries[P] : never
  } 
    : studentMasteries
  : studentMasteries


  type studentMasteriesCountArgs = Merge<
    Omit<studentMasteriesFindManyArgs, 'select' | 'include'> & {
      select?: StudentMasteriesCountAggregateInputType | true
    }
  >

  export interface studentMasteriesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one StudentMasteries that matches the filter.
     * @param {studentMasteriesFindUniqueArgs} args - Arguments to find a StudentMasteries
     * @example
     * // Get one StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentMasteriesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, studentMasteriesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'studentMasteries'> extends True ? CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>> : CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries | null >, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T> | null >>

    /**
     * Find the first StudentMasteries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentMasteriesFindFirstArgs} args - Arguments to find a StudentMasteries
     * @example
     * // Get one StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentMasteriesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, studentMasteriesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'studentMasteries'> extends True ? CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>> : CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries | null >, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T> | null >>

    /**
     * Find zero or more StudentMasteries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentMasteriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.findMany()
     * 
     * // Get first 10 StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.findMany({ take: 10 })
     * 
     * // Only select the `studentEmail`
     * const studentMasteriesWithStudentEmailOnly = await prisma.studentMasteries.findMany({ select: { studentEmail: true } })
     * 
    **/
    findMany<T extends studentMasteriesFindManyArgs>(
      args?: SelectSubset<T, studentMasteriesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<studentMasteries>>, PrismaPromise<Array<studentMasteriesGetPayload<T>>>>

    /**
     * Create a StudentMasteries.
     * @param {studentMasteriesCreateArgs} args - Arguments to create a StudentMasteries.
     * @example
     * // Create one StudentMasteries
     * const StudentMasteries = await prisma.studentMasteries.create({
     *   data: {
     *     // ... data to create a StudentMasteries
     *   }
     * })
     * 
    **/
    create<T extends studentMasteriesCreateArgs>(
      args: SelectSubset<T, studentMasteriesCreateArgs>
    ): CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>>

    /**
     * Create many StudentMasteries.
     *     @param {studentMasteriesCreateManyArgs} args - Arguments to create many StudentMasteries.
     *     @example
     *     // Create many StudentMasteries
     *     const studentMasteries = await prisma.studentMasteries.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentMasteriesCreateManyArgs>(
      args?: SelectSubset<T, studentMasteriesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a StudentMasteries.
     * @param {studentMasteriesDeleteArgs} args - Arguments to delete one StudentMasteries.
     * @example
     * // Delete one StudentMasteries
     * const StudentMasteries = await prisma.studentMasteries.delete({
     *   where: {
     *     // ... filter to delete one StudentMasteries
     *   }
     * })
     * 
    **/
    delete<T extends studentMasteriesDeleteArgs>(
      args: SelectSubset<T, studentMasteriesDeleteArgs>
    ): CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>>

    /**
     * Update one StudentMasteries.
     * @param {studentMasteriesUpdateArgs} args - Arguments to update one StudentMasteries.
     * @example
     * // Update one StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentMasteriesUpdateArgs>(
      args: SelectSubset<T, studentMasteriesUpdateArgs>
    ): CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>>

    /**
     * Delete zero or more StudentMasteries.
     * @param {studentMasteriesDeleteManyArgs} args - Arguments to filter StudentMasteries to delete.
     * @example
     * // Delete a few StudentMasteries
     * const { count } = await prisma.studentMasteries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentMasteriesDeleteManyArgs>(
      args?: SelectSubset<T, studentMasteriesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentMasteries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentMasteriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentMasteriesUpdateManyArgs>(
      args: SelectSubset<T, studentMasteriesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentMasteries.
     * @param {studentMasteriesUpsertArgs} args - Arguments to update or create a StudentMasteries.
     * @example
     * // Update or create a StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.upsert({
     *   create: {
     *     // ... data to create a StudentMasteries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentMasteries we want to update
     *   }
     * })
    **/
    upsert<T extends studentMasteriesUpsertArgs>(
      args: SelectSubset<T, studentMasteriesUpsertArgs>
    ): CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>>

    /**
     * Find one StudentMasteries that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {studentMasteriesFindUniqueOrThrowArgs} args - Arguments to find a StudentMasteries
     * @example
     * // Get one StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends studentMasteriesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, studentMasteriesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>>

    /**
     * Find the first StudentMasteries that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentMasteriesFindFirstOrThrowArgs} args - Arguments to find a StudentMasteries
     * @example
     * // Get one StudentMasteries
     * const studentMasteries = await prisma.studentMasteries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends studentMasteriesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, studentMasteriesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__studentMasteriesClient<studentMasteries>, Prisma__studentMasteriesClient<studentMasteriesGetPayload<T>>>

    /**
     * Count the number of StudentMasteries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentMasteriesCountArgs} args - Arguments to filter StudentMasteries to count.
     * @example
     * // Count the number of StudentMasteries
     * const count = await prisma.studentMasteries.count({
     *   where: {
     *     // ... the filter for the StudentMasteries we want to count
     *   }
     * })
    **/
    count<T extends studentMasteriesCountArgs>(
      args?: Subset<T, studentMasteriesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentMasteriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentMasteries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentMasteriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentMasteriesAggregateArgs>(args: Subset<T, StudentMasteriesAggregateArgs>): PrismaPromise<GetStudentMasteriesAggregateType<T>>

    /**
     * Group by StudentMasteries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentMasteriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentMasteriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentMasteriesGroupByArgs['orderBy'] }
        : { orderBy?: StudentMasteriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentMasteriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentMasteriesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for studentMasteries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__studentMasteriesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    studentMasteriesTopic_rs<T extends topicsArgs = {}>(args?: Subset<T, topicsArgs>): CheckSelect<T, Prisma__topicsClient<topics | null >, Prisma__topicsClient<topicsGetPayload<T> | null >>;

    student_Masteries_rs<T extends studentsArgs = {}>(args?: Subset<T, studentsArgs>): CheckSelect<T, Prisma__studentsClient<students | null >, Prisma__studentsClient<studentsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * studentMasteries base type for findUnique actions
   */
  export type studentMasteriesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
    /**
     * Filter, which studentMasteries to fetch.
     * 
    **/
    where: studentMasteriesWhereUniqueInput
  }

  /**
   * studentMasteries: findUnique
   */
  export interface studentMasteriesFindUniqueArgs extends studentMasteriesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * studentMasteries base type for findFirst actions
   */
  export type studentMasteriesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
    /**
     * Filter, which studentMasteries to fetch.
     * 
    **/
    where?: studentMasteriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentMasteries to fetch.
     * 
    **/
    orderBy?: Enumerable<studentMasteriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studentMasteries.
     * 
    **/
    cursor?: studentMasteriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentMasteries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentMasteries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studentMasteries.
     * 
    **/
    distinct?: Enumerable<StudentMasteriesScalarFieldEnum>
  }

  /**
   * studentMasteries: findFirst
   */
  export interface studentMasteriesFindFirstArgs extends studentMasteriesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * studentMasteries findMany
   */
  export type studentMasteriesFindManyArgs = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
    /**
     * Filter, which studentMasteries to fetch.
     * 
    **/
    where?: studentMasteriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentMasteries to fetch.
     * 
    **/
    orderBy?: Enumerable<studentMasteriesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing studentMasteries.
     * 
    **/
    cursor?: studentMasteriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentMasteries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentMasteries.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentMasteriesScalarFieldEnum>
  }


  /**
   * studentMasteries create
   */
  export type studentMasteriesCreateArgs = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
    /**
     * The data needed to create a studentMasteries.
     * 
    **/
    data: XOR<studentMasteriesCreateInput, studentMasteriesUncheckedCreateInput>
  }


  /**
   * studentMasteries createMany
   */
  export type studentMasteriesCreateManyArgs = {
    /**
     * The data used to create many studentMasteries.
     * 
    **/
    data: Enumerable<studentMasteriesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * studentMasteries update
   */
  export type studentMasteriesUpdateArgs = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
    /**
     * The data needed to update a studentMasteries.
     * 
    **/
    data: XOR<studentMasteriesUpdateInput, studentMasteriesUncheckedUpdateInput>
    /**
     * Choose, which studentMasteries to update.
     * 
    **/
    where: studentMasteriesWhereUniqueInput
  }


  /**
   * studentMasteries updateMany
   */
  export type studentMasteriesUpdateManyArgs = {
    /**
     * The data used to update studentMasteries.
     * 
    **/
    data: XOR<studentMasteriesUpdateManyMutationInput, studentMasteriesUncheckedUpdateManyInput>
    /**
     * Filter which studentMasteries to update
     * 
    **/
    where?: studentMasteriesWhereInput
  }


  /**
   * studentMasteries upsert
   */
  export type studentMasteriesUpsertArgs = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
    /**
     * The filter to search for the studentMasteries to update in case it exists.
     * 
    **/
    where: studentMasteriesWhereUniqueInput
    /**
     * In case the studentMasteries found by the `where` argument doesn't exist, create a new studentMasteries with this data.
     * 
    **/
    create: XOR<studentMasteriesCreateInput, studentMasteriesUncheckedCreateInput>
    /**
     * In case the studentMasteries was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<studentMasteriesUpdateInput, studentMasteriesUncheckedUpdateInput>
  }


  /**
   * studentMasteries delete
   */
  export type studentMasteriesDeleteArgs = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
    /**
     * Filter which studentMasteries to delete.
     * 
    **/
    where: studentMasteriesWhereUniqueInput
  }


  /**
   * studentMasteries deleteMany
   */
  export type studentMasteriesDeleteManyArgs = {
    /**
     * Filter which studentMasteries to delete
     * 
    **/
    where?: studentMasteriesWhereInput
  }


  /**
   * studentMasteries: findUniqueOrThrow
   */
  export type studentMasteriesFindUniqueOrThrowArgs = studentMasteriesFindUniqueArgsBase
      

  /**
   * studentMasteries: findFirstOrThrow
   */
  export type studentMasteriesFindFirstOrThrowArgs = studentMasteriesFindFirstArgsBase
      

  /**
   * studentMasteries without action
   */
  export type studentMasteriesArgs = {
    /**
     * Select specific fields to fetch from the studentMasteries
     * 
    **/
    select?: studentMasteriesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentMasteriesInclude | null
  }



  /**
   * Model topics
   */


  export type AggregateTopics = {
    _count: TopicsCountAggregateOutputType | null
    _avg: TopicsAvgAggregateOutputType | null
    _sum: TopicsSumAggregateOutputType | null
    _min: TopicsMinAggregateOutputType | null
    _max: TopicsMaxAggregateOutputType | null
  }

  export type TopicsAvgAggregateOutputType = {
    topicLevel: number | null
  }

  export type TopicsSumAggregateOutputType = {
    topicLevel: number | null
  }

  export type TopicsMinAggregateOutputType = {
    topicID: string | null
    topicName: string | null
    topicLevel: number | null
  }

  export type TopicsMaxAggregateOutputType = {
    topicID: string | null
    topicName: string | null
    topicLevel: number | null
  }

  export type TopicsCountAggregateOutputType = {
    topicID: number
    topicName: number
    topicLevel: number
    _all: number
  }


  export type TopicsAvgAggregateInputType = {
    topicLevel?: true
  }

  export type TopicsSumAggregateInputType = {
    topicLevel?: true
  }

  export type TopicsMinAggregateInputType = {
    topicID?: true
    topicName?: true
    topicLevel?: true
  }

  export type TopicsMaxAggregateInputType = {
    topicID?: true
    topicName?: true
    topicLevel?: true
  }

  export type TopicsCountAggregateInputType = {
    topicID?: true
    topicName?: true
    topicLevel?: true
    _all?: true
  }

  export type TopicsAggregateArgs = {
    /**
     * Filter which topics to aggregate.
     * 
    **/
    where?: topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     * 
    **/
    orderBy?: Enumerable<topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned topics
    **/
    _count?: true | TopicsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TopicsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TopicsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TopicsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TopicsMaxAggregateInputType
  }

  export type GetTopicsAggregateType<T extends TopicsAggregateArgs> = {
        [P in keyof T & keyof AggregateTopics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTopics[P]>
      : GetScalarType<T[P], AggregateTopics[P]>
  }




  export type TopicsGroupByArgs = {
    where?: topicsWhereInput
    orderBy?: Enumerable<topicsOrderByWithAggregationInput>
    by: Array<TopicsScalarFieldEnum>
    having?: topicsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TopicsCountAggregateInputType | true
    _avg?: TopicsAvgAggregateInputType
    _sum?: TopicsSumAggregateInputType
    _min?: TopicsMinAggregateInputType
    _max?: TopicsMaxAggregateInputType
  }


  export type TopicsGroupByOutputType = {
    topicID: string
    topicName: string
    topicLevel: number
    _count: TopicsCountAggregateOutputType | null
    _avg: TopicsAvgAggregateOutputType | null
    _sum: TopicsSumAggregateOutputType | null
    _min: TopicsMinAggregateOutputType | null
    _max: TopicsMaxAggregateOutputType | null
  }

  type GetTopicsGroupByPayload<T extends TopicsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TopicsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TopicsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TopicsGroupByOutputType[P]>
            : GetScalarType<T[P], TopicsGroupByOutputType[P]>
        }
      >
    >


  export type topicsSelect = {
    topicID?: boolean
    topicName?: boolean
    topicLevel?: boolean
    topicID_rs?: boolean | questionsFindManyArgs
    studentMasteriesTopic_rs?: boolean | studentMasteriesFindManyArgs
    _count?: boolean | TopicsCountOutputTypeArgs
  }

  export type topicsInclude = {
    topicID_rs?: boolean | questionsFindManyArgs
    studentMasteriesTopic_rs?: boolean | studentMasteriesFindManyArgs
    _count?: boolean | TopicsCountOutputTypeArgs
  }

  export type topicsGetPayload<
    S extends boolean | null | undefined | topicsArgs,
    U = keyof S
      > = S extends true
        ? topics
    : S extends undefined
    ? never
    : S extends topicsArgs | topicsFindManyArgs
    ?'include' extends U
    ? topics  & {
    [P in TrueKeys<S['include']>]:
        P extends 'topicID_rs' ? Array < questionsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'studentMasteriesTopic_rs' ? Array < studentMasteriesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? TopicsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'topicID_rs' ? Array < questionsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'studentMasteriesTopic_rs' ? Array < studentMasteriesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? TopicsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof topics ? topics[P] : never
  } 
    : topics
  : topics


  type topicsCountArgs = Merge<
    Omit<topicsFindManyArgs, 'select' | 'include'> & {
      select?: TopicsCountAggregateInputType | true
    }
  >

  export interface topicsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Topics that matches the filter.
     * @param {topicsFindUniqueArgs} args - Arguments to find a Topics
     * @example
     * // Get one Topics
     * const topics = await prisma.topics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends topicsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, topicsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'topics'> extends True ? CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>> : CheckSelect<T, Prisma__topicsClient<topics | null >, Prisma__topicsClient<topicsGetPayload<T> | null >>

    /**
     * Find the first Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicsFindFirstArgs} args - Arguments to find a Topics
     * @example
     * // Get one Topics
     * const topics = await prisma.topics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends topicsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, topicsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'topics'> extends True ? CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>> : CheckSelect<T, Prisma__topicsClient<topics | null >, Prisma__topicsClient<topicsGetPayload<T> | null >>

    /**
     * Find zero or more Topics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Topics
     * const topics = await prisma.topics.findMany()
     * 
     * // Get first 10 Topics
     * const topics = await prisma.topics.findMany({ take: 10 })
     * 
     * // Only select the `topicID`
     * const topicsWithTopicIDOnly = await prisma.topics.findMany({ select: { topicID: true } })
     * 
    **/
    findMany<T extends topicsFindManyArgs>(
      args?: SelectSubset<T, topicsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<topics>>, PrismaPromise<Array<topicsGetPayload<T>>>>

    /**
     * Create a Topics.
     * @param {topicsCreateArgs} args - Arguments to create a Topics.
     * @example
     * // Create one Topics
     * const Topics = await prisma.topics.create({
     *   data: {
     *     // ... data to create a Topics
     *   }
     * })
     * 
    **/
    create<T extends topicsCreateArgs>(
      args: SelectSubset<T, topicsCreateArgs>
    ): CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>>

    /**
     * Create many Topics.
     *     @param {topicsCreateManyArgs} args - Arguments to create many Topics.
     *     @example
     *     // Create many Topics
     *     const topics = await prisma.topics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends topicsCreateManyArgs>(
      args?: SelectSubset<T, topicsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Topics.
     * @param {topicsDeleteArgs} args - Arguments to delete one Topics.
     * @example
     * // Delete one Topics
     * const Topics = await prisma.topics.delete({
     *   where: {
     *     // ... filter to delete one Topics
     *   }
     * })
     * 
    **/
    delete<T extends topicsDeleteArgs>(
      args: SelectSubset<T, topicsDeleteArgs>
    ): CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>>

    /**
     * Update one Topics.
     * @param {topicsUpdateArgs} args - Arguments to update one Topics.
     * @example
     * // Update one Topics
     * const topics = await prisma.topics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends topicsUpdateArgs>(
      args: SelectSubset<T, topicsUpdateArgs>
    ): CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>>

    /**
     * Delete zero or more Topics.
     * @param {topicsDeleteManyArgs} args - Arguments to filter Topics to delete.
     * @example
     * // Delete a few Topics
     * const { count } = await prisma.topics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends topicsDeleteManyArgs>(
      args?: SelectSubset<T, topicsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Topics
     * const topics = await prisma.topics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends topicsUpdateManyArgs>(
      args: SelectSubset<T, topicsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Topics.
     * @param {topicsUpsertArgs} args - Arguments to update or create a Topics.
     * @example
     * // Update or create a Topics
     * const topics = await prisma.topics.upsert({
     *   create: {
     *     // ... data to create a Topics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Topics we want to update
     *   }
     * })
    **/
    upsert<T extends topicsUpsertArgs>(
      args: SelectSubset<T, topicsUpsertArgs>
    ): CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>>

    /**
     * Find one Topics that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {topicsFindUniqueOrThrowArgs} args - Arguments to find a Topics
     * @example
     * // Get one Topics
     * const topics = await prisma.topics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends topicsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, topicsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>>

    /**
     * Find the first Topics that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicsFindFirstOrThrowArgs} args - Arguments to find a Topics
     * @example
     * // Get one Topics
     * const topics = await prisma.topics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends topicsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, topicsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__topicsClient<topics>, Prisma__topicsClient<topicsGetPayload<T>>>

    /**
     * Count the number of Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {topicsCountArgs} args - Arguments to filter Topics to count.
     * @example
     * // Count the number of Topics
     * const count = await prisma.topics.count({
     *   where: {
     *     // ... the filter for the Topics we want to count
     *   }
     * })
    **/
    count<T extends topicsCountArgs>(
      args?: Subset<T, topicsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TopicsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TopicsAggregateArgs>(args: Subset<T, TopicsAggregateArgs>): PrismaPromise<GetTopicsAggregateType<T>>

    /**
     * Group by Topics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TopicsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TopicsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TopicsGroupByArgs['orderBy'] }
        : { orderBy?: TopicsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TopicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTopicsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for topics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__topicsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    topicID_rs<T extends questionsFindManyArgs = {}>(args?: Subset<T, questionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<questions>>, PrismaPromise<Array<questionsGetPayload<T>>>>;

    studentMasteriesTopic_rs<T extends studentMasteriesFindManyArgs = {}>(args?: Subset<T, studentMasteriesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<studentMasteries>>, PrismaPromise<Array<studentMasteriesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * topics base type for findUnique actions
   */
  export type topicsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
    /**
     * Filter, which topics to fetch.
     * 
    **/
    where: topicsWhereUniqueInput
  }

  /**
   * topics: findUnique
   */
  export interface topicsFindUniqueArgs extends topicsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * topics base type for findFirst actions
   */
  export type topicsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
    /**
     * Filter, which topics to fetch.
     * 
    **/
    where?: topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     * 
    **/
    orderBy?: Enumerable<topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for topics.
     * 
    **/
    cursor?: topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of topics.
     * 
    **/
    distinct?: Enumerable<TopicsScalarFieldEnum>
  }

  /**
   * topics: findFirst
   */
  export interface topicsFindFirstArgs extends topicsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * topics findMany
   */
  export type topicsFindManyArgs = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
    /**
     * Filter, which topics to fetch.
     * 
    **/
    where?: topicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of topics to fetch.
     * 
    **/
    orderBy?: Enumerable<topicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing topics.
     * 
    **/
    cursor?: topicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` topics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` topics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TopicsScalarFieldEnum>
  }


  /**
   * topics create
   */
  export type topicsCreateArgs = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
    /**
     * The data needed to create a topics.
     * 
    **/
    data: XOR<topicsCreateInput, topicsUncheckedCreateInput>
  }


  /**
   * topics createMany
   */
  export type topicsCreateManyArgs = {
    /**
     * The data used to create many topics.
     * 
    **/
    data: Enumerable<topicsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * topics update
   */
  export type topicsUpdateArgs = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
    /**
     * The data needed to update a topics.
     * 
    **/
    data: XOR<topicsUpdateInput, topicsUncheckedUpdateInput>
    /**
     * Choose, which topics to update.
     * 
    **/
    where: topicsWhereUniqueInput
  }


  /**
   * topics updateMany
   */
  export type topicsUpdateManyArgs = {
    /**
     * The data used to update topics.
     * 
    **/
    data: XOR<topicsUpdateManyMutationInput, topicsUncheckedUpdateManyInput>
    /**
     * Filter which topics to update
     * 
    **/
    where?: topicsWhereInput
  }


  /**
   * topics upsert
   */
  export type topicsUpsertArgs = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
    /**
     * The filter to search for the topics to update in case it exists.
     * 
    **/
    where: topicsWhereUniqueInput
    /**
     * In case the topics found by the `where` argument doesn't exist, create a new topics with this data.
     * 
    **/
    create: XOR<topicsCreateInput, topicsUncheckedCreateInput>
    /**
     * In case the topics was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<topicsUpdateInput, topicsUncheckedUpdateInput>
  }


  /**
   * topics delete
   */
  export type topicsDeleteArgs = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
    /**
     * Filter which topics to delete.
     * 
    **/
    where: topicsWhereUniqueInput
  }


  /**
   * topics deleteMany
   */
  export type topicsDeleteManyArgs = {
    /**
     * Filter which topics to delete
     * 
    **/
    where?: topicsWhereInput
  }


  /**
   * topics: findUniqueOrThrow
   */
  export type topicsFindUniqueOrThrowArgs = topicsFindUniqueArgsBase
      

  /**
   * topics: findFirstOrThrow
   */
  export type topicsFindFirstOrThrowArgs = topicsFindFirstArgsBase
      

  /**
   * topics without action
   */
  export type topicsArgs = {
    /**
     * Select specific fields to fetch from the topics
     * 
    **/
    select?: topicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: topicsInclude | null
  }



  /**
   * Model questions
   */


  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    questionDifficulty: number | null
  }

  export type QuestionsSumAggregateOutputType = {
    questionDifficulty: number | null
  }

  export type QuestionsMinAggregateOutputType = {
    questionID: string | null
    topicID: string | null
    questionContent: string | null
    questionDifficulty: number | null
  }

  export type QuestionsMaxAggregateOutputType = {
    questionID: string | null
    topicID: string | null
    questionContent: string | null
    questionDifficulty: number | null
  }

  export type QuestionsCountAggregateOutputType = {
    questionID: number
    topicID: number
    questionContent: number
    questionDifficulty: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    questionDifficulty?: true
  }

  export type QuestionsSumAggregateInputType = {
    questionDifficulty?: true
  }

  export type QuestionsMinAggregateInputType = {
    questionID?: true
    topicID?: true
    questionContent?: true
    questionDifficulty?: true
  }

  export type QuestionsMaxAggregateInputType = {
    questionID?: true
    topicID?: true
    questionContent?: true
    questionDifficulty?: true
  }

  export type QuestionsCountAggregateInputType = {
    questionID?: true
    topicID?: true
    questionContent?: true
    questionDifficulty?: true
    _all?: true
  }

  export type QuestionsAggregateArgs = {
    /**
     * Filter which questions to aggregate.
     * 
    **/
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     * 
    **/
    orderBy?: Enumerable<questionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type QuestionsGroupByArgs = {
    where?: questionsWhereInput
    orderBy?: Enumerable<questionsOrderByWithAggregationInput>
    by: Array<QuestionsScalarFieldEnum>
    having?: questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _avg?: QuestionsAvgAggregateInputType
    _sum?: QuestionsSumAggregateInputType
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }


  export type QuestionsGroupByOutputType = {
    questionID: string
    topicID: string
    questionContent: string
    questionDifficulty: number
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends QuestionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type questionsSelect = {
    questionID?: boolean
    topicID?: boolean
    questionContent?: boolean
    questionDifficulty?: boolean
    topicID_rs?: boolean | topicsArgs
    questionAttemptID_rs?: boolean | studentAttemptsFindManyArgs
    questionMediaID_rs?: boolean | questionMediaFindManyArgs
    questionAnswerID_rs?: boolean | answerFindManyArgs
    _count?: boolean | QuestionsCountOutputTypeArgs
  }

  export type questionsInclude = {
    topicID_rs?: boolean | topicsArgs
    questionAttemptID_rs?: boolean | studentAttemptsFindManyArgs
    questionMediaID_rs?: boolean | questionMediaFindManyArgs
    questionAnswerID_rs?: boolean | answerFindManyArgs
    _count?: boolean | QuestionsCountOutputTypeArgs
  }

  export type questionsGetPayload<
    S extends boolean | null | undefined | questionsArgs,
    U = keyof S
      > = S extends true
        ? questions
    : S extends undefined
    ? never
    : S extends questionsArgs | questionsFindManyArgs
    ?'include' extends U
    ? questions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'topicID_rs' ? topicsGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'questionAttemptID_rs' ? Array < studentAttemptsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'questionMediaID_rs' ? Array < questionMediaGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'questionAnswerID_rs' ? Array < answerGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? QuestionsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'topicID_rs' ? topicsGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'questionAttemptID_rs' ? Array < studentAttemptsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'questionMediaID_rs' ? Array < questionMediaGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'questionAnswerID_rs' ? Array < answerGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? QuestionsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof questions ? questions[P] : never
  } 
    : questions
  : questions


  type questionsCountArgs = Merge<
    Omit<questionsFindManyArgs, 'select' | 'include'> & {
      select?: QuestionsCountAggregateInputType | true
    }
  >

  export interface questionsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Questions that matches the filter.
     * @param {questionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, questionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'questions'> extends True ? CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>> : CheckSelect<T, Prisma__questionsClient<questions | null >, Prisma__questionsClient<questionsGetPayload<T> | null >>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, questionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'questions'> extends True ? CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>> : CheckSelect<T, Prisma__questionsClient<questions | null >, Prisma__questionsClient<questionsGetPayload<T> | null >>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `questionID`
     * const questionsWithQuestionIDOnly = await prisma.questions.findMany({ select: { questionID: true } })
     * 
    **/
    findMany<T extends questionsFindManyArgs>(
      args?: SelectSubset<T, questionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<questions>>, PrismaPromise<Array<questionsGetPayload<T>>>>

    /**
     * Create a Questions.
     * @param {questionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
    **/
    create<T extends questionsCreateArgs>(
      args: SelectSubset<T, questionsCreateArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Create many Questions.
     *     @param {questionsCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const questions = await prisma.questions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questionsCreateManyArgs>(
      args?: SelectSubset<T, questionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Questions.
     * @param {questionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
    **/
    delete<T extends questionsDeleteArgs>(
      args: SelectSubset<T, questionsDeleteArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Update one Questions.
     * @param {questionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionsUpdateArgs>(
      args: SelectSubset<T, questionsUpdateArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Delete zero or more Questions.
     * @param {questionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionsDeleteManyArgs>(
      args?: SelectSubset<T, questionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionsUpdateManyArgs>(
      args: SelectSubset<T, questionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {questionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
    **/
    upsert<T extends questionsUpsertArgs>(
      args: SelectSubset<T, questionsUpsertArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Find one Questions that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {questionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questionsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, questionsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Find the first Questions that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questionsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, questionsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__questionsClient<questions>, Prisma__questionsClient<questionsGetPayload<T>>>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionsCountArgs>(
      args?: Subset<T, questionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionsGroupByArgs['orderBy'] }
        : { orderBy?: QuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__questionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    topicID_rs<T extends topicsArgs = {}>(args?: Subset<T, topicsArgs>): CheckSelect<T, Prisma__topicsClient<topics | null >, Prisma__topicsClient<topicsGetPayload<T> | null >>;

    questionAttemptID_rs<T extends studentAttemptsFindManyArgs = {}>(args?: Subset<T, studentAttemptsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<studentAttempts>>, PrismaPromise<Array<studentAttemptsGetPayload<T>>>>;

    questionMediaID_rs<T extends questionMediaFindManyArgs = {}>(args?: Subset<T, questionMediaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<questionMedia>>, PrismaPromise<Array<questionMediaGetPayload<T>>>>;

    questionAnswerID_rs<T extends answerFindManyArgs = {}>(args?: Subset<T, answerFindManyArgs>): CheckSelect<T, PrismaPromise<Array<answer>>, PrismaPromise<Array<answerGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * questions base type for findUnique actions
   */
  export type questionsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
    /**
     * Filter, which questions to fetch.
     * 
    **/
    where: questionsWhereUniqueInput
  }

  /**
   * questions: findUnique
   */
  export interface questionsFindUniqueArgs extends questionsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * questions base type for findFirst actions
   */
  export type questionsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
    /**
     * Filter, which questions to fetch.
     * 
    **/
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     * 
    **/
    orderBy?: Enumerable<questionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     * 
    **/
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     * 
    **/
    distinct?: Enumerable<QuestionsScalarFieldEnum>
  }

  /**
   * questions: findFirst
   */
  export interface questionsFindFirstArgs extends questionsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * questions findMany
   */
  export type questionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
    /**
     * Filter, which questions to fetch.
     * 
    **/
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     * 
    **/
    orderBy?: Enumerable<questionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     * 
    **/
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<QuestionsScalarFieldEnum>
  }


  /**
   * questions create
   */
  export type questionsCreateArgs = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
    /**
     * The data needed to create a questions.
     * 
    **/
    data: XOR<questionsCreateInput, questionsUncheckedCreateInput>
  }


  /**
   * questions createMany
   */
  export type questionsCreateManyArgs = {
    /**
     * The data used to create many questions.
     * 
    **/
    data: Enumerable<questionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * questions update
   */
  export type questionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
    /**
     * The data needed to update a questions.
     * 
    **/
    data: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
    /**
     * Choose, which questions to update.
     * 
    **/
    where: questionsWhereUniqueInput
  }


  /**
   * questions updateMany
   */
  export type questionsUpdateManyArgs = {
    /**
     * The data used to update questions.
     * 
    **/
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     * 
    **/
    where?: questionsWhereInput
  }


  /**
   * questions upsert
   */
  export type questionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
    /**
     * The filter to search for the questions to update in case it exists.
     * 
    **/
    where: questionsWhereUniqueInput
    /**
     * In case the questions found by the `where` argument doesn't exist, create a new questions with this data.
     * 
    **/
    create: XOR<questionsCreateInput, questionsUncheckedCreateInput>
    /**
     * In case the questions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
  }


  /**
   * questions delete
   */
  export type questionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
    /**
     * Filter which questions to delete.
     * 
    **/
    where: questionsWhereUniqueInput
  }


  /**
   * questions deleteMany
   */
  export type questionsDeleteManyArgs = {
    /**
     * Filter which questions to delete
     * 
    **/
    where?: questionsWhereInput
  }


  /**
   * questions: findUniqueOrThrow
   */
  export type questionsFindUniqueOrThrowArgs = questionsFindUniqueArgsBase
      

  /**
   * questions: findFirstOrThrow
   */
  export type questionsFindFirstOrThrowArgs = questionsFindFirstArgsBase
      

  /**
   * questions without action
   */
  export type questionsArgs = {
    /**
     * Select specific fields to fetch from the questions
     * 
    **/
    select?: questionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionsInclude | null
  }



  /**
   * Model questionMedia
   */


  export type AggregateQuestionMedia = {
    _count: QuestionMediaCountAggregateOutputType | null
    _min: QuestionMediaMinAggregateOutputType | null
    _max: QuestionMediaMaxAggregateOutputType | null
  }

  export type QuestionMediaMinAggregateOutputType = {
    questionID: string | null
    questionMediaURL: string | null
  }

  export type QuestionMediaMaxAggregateOutputType = {
    questionID: string | null
    questionMediaURL: string | null
  }

  export type QuestionMediaCountAggregateOutputType = {
    questionID: number
    questionMediaURL: number
    _all: number
  }


  export type QuestionMediaMinAggregateInputType = {
    questionID?: true
    questionMediaURL?: true
  }

  export type QuestionMediaMaxAggregateInputType = {
    questionID?: true
    questionMediaURL?: true
  }

  export type QuestionMediaCountAggregateInputType = {
    questionID?: true
    questionMediaURL?: true
    _all?: true
  }

  export type QuestionMediaAggregateArgs = {
    /**
     * Filter which questionMedia to aggregate.
     * 
    **/
    where?: questionMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questionMedias to fetch.
     * 
    **/
    orderBy?: Enumerable<questionMediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: questionMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questionMedias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questionMedias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questionMedias
    **/
    _count?: true | QuestionMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMediaMaxAggregateInputType
  }

  export type GetQuestionMediaAggregateType<T extends QuestionMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionMedia[P]>
      : GetScalarType<T[P], AggregateQuestionMedia[P]>
  }




  export type QuestionMediaGroupByArgs = {
    where?: questionMediaWhereInput
    orderBy?: Enumerable<questionMediaOrderByWithAggregationInput>
    by: Array<QuestionMediaScalarFieldEnum>
    having?: questionMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionMediaCountAggregateInputType | true
    _min?: QuestionMediaMinAggregateInputType
    _max?: QuestionMediaMaxAggregateInputType
  }


  export type QuestionMediaGroupByOutputType = {
    questionID: string
    questionMediaURL: string | null
    _count: QuestionMediaCountAggregateOutputType | null
    _min: QuestionMediaMinAggregateOutputType | null
    _max: QuestionMediaMaxAggregateOutputType | null
  }

  type GetQuestionMediaGroupByPayload<T extends QuestionMediaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<QuestionMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionMediaGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionMediaGroupByOutputType[P]>
        }
      >
    >


  export type questionMediaSelect = {
    questionID?: boolean
    questionMediaURL?: boolean
    questionMediaID_rs?: boolean | questionsArgs
  }

  export type questionMediaInclude = {
    questionMediaID_rs?: boolean | questionsArgs
  }

  export type questionMediaGetPayload<
    S extends boolean | null | undefined | questionMediaArgs,
    U = keyof S
      > = S extends true
        ? questionMedia
    : S extends undefined
    ? never
    : S extends questionMediaArgs | questionMediaFindManyArgs
    ?'include' extends U
    ? questionMedia  & {
    [P in TrueKeys<S['include']>]:
        P extends 'questionMediaID_rs' ? questionsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'questionMediaID_rs' ? questionsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof questionMedia ? questionMedia[P] : never
  } 
    : questionMedia
  : questionMedia


  type questionMediaCountArgs = Merge<
    Omit<questionMediaFindManyArgs, 'select' | 'include'> & {
      select?: QuestionMediaCountAggregateInputType | true
    }
  >

  export interface questionMediaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one QuestionMedia that matches the filter.
     * @param {questionMediaFindUniqueArgs} args - Arguments to find a QuestionMedia
     * @example
     * // Get one QuestionMedia
     * const questionMedia = await prisma.questionMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questionMediaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, questionMediaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'questionMedia'> extends True ? CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>> : CheckSelect<T, Prisma__questionMediaClient<questionMedia | null >, Prisma__questionMediaClient<questionMediaGetPayload<T> | null >>

    /**
     * Find the first QuestionMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionMediaFindFirstArgs} args - Arguments to find a QuestionMedia
     * @example
     * // Get one QuestionMedia
     * const questionMedia = await prisma.questionMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questionMediaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, questionMediaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'questionMedia'> extends True ? CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>> : CheckSelect<T, Prisma__questionMediaClient<questionMedia | null >, Prisma__questionMediaClient<questionMediaGetPayload<T> | null >>

    /**
     * Find zero or more QuestionMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionMediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionMedias
     * const questionMedias = await prisma.questionMedia.findMany()
     * 
     * // Get first 10 QuestionMedias
     * const questionMedias = await prisma.questionMedia.findMany({ take: 10 })
     * 
     * // Only select the `questionID`
     * const questionMediaWithQuestionIDOnly = await prisma.questionMedia.findMany({ select: { questionID: true } })
     * 
    **/
    findMany<T extends questionMediaFindManyArgs>(
      args?: SelectSubset<T, questionMediaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<questionMedia>>, PrismaPromise<Array<questionMediaGetPayload<T>>>>

    /**
     * Create a QuestionMedia.
     * @param {questionMediaCreateArgs} args - Arguments to create a QuestionMedia.
     * @example
     * // Create one QuestionMedia
     * const QuestionMedia = await prisma.questionMedia.create({
     *   data: {
     *     // ... data to create a QuestionMedia
     *   }
     * })
     * 
    **/
    create<T extends questionMediaCreateArgs>(
      args: SelectSubset<T, questionMediaCreateArgs>
    ): CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>>

    /**
     * Create many QuestionMedias.
     *     @param {questionMediaCreateManyArgs} args - Arguments to create many QuestionMedias.
     *     @example
     *     // Create many QuestionMedias
     *     const questionMedia = await prisma.questionMedia.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questionMediaCreateManyArgs>(
      args?: SelectSubset<T, questionMediaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a QuestionMedia.
     * @param {questionMediaDeleteArgs} args - Arguments to delete one QuestionMedia.
     * @example
     * // Delete one QuestionMedia
     * const QuestionMedia = await prisma.questionMedia.delete({
     *   where: {
     *     // ... filter to delete one QuestionMedia
     *   }
     * })
     * 
    **/
    delete<T extends questionMediaDeleteArgs>(
      args: SelectSubset<T, questionMediaDeleteArgs>
    ): CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>>

    /**
     * Update one QuestionMedia.
     * @param {questionMediaUpdateArgs} args - Arguments to update one QuestionMedia.
     * @example
     * // Update one QuestionMedia
     * const questionMedia = await prisma.questionMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionMediaUpdateArgs>(
      args: SelectSubset<T, questionMediaUpdateArgs>
    ): CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>>

    /**
     * Delete zero or more QuestionMedias.
     * @param {questionMediaDeleteManyArgs} args - Arguments to filter QuestionMedias to delete.
     * @example
     * // Delete a few QuestionMedias
     * const { count } = await prisma.questionMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionMediaDeleteManyArgs>(
      args?: SelectSubset<T, questionMediaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionMedias
     * const questionMedia = await prisma.questionMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionMediaUpdateManyArgs>(
      args: SelectSubset<T, questionMediaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one QuestionMedia.
     * @param {questionMediaUpsertArgs} args - Arguments to update or create a QuestionMedia.
     * @example
     * // Update or create a QuestionMedia
     * const questionMedia = await prisma.questionMedia.upsert({
     *   create: {
     *     // ... data to create a QuestionMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionMedia we want to update
     *   }
     * })
    **/
    upsert<T extends questionMediaUpsertArgs>(
      args: SelectSubset<T, questionMediaUpsertArgs>
    ): CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>>

    /**
     * Find one QuestionMedia that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {questionMediaFindUniqueOrThrowArgs} args - Arguments to find a QuestionMedia
     * @example
     * // Get one QuestionMedia
     * const questionMedia = await prisma.questionMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questionMediaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, questionMediaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>>

    /**
     * Find the first QuestionMedia that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionMediaFindFirstOrThrowArgs} args - Arguments to find a QuestionMedia
     * @example
     * // Get one QuestionMedia
     * const questionMedia = await prisma.questionMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questionMediaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, questionMediaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__questionMediaClient<questionMedia>, Prisma__questionMediaClient<questionMediaGetPayload<T>>>

    /**
     * Count the number of QuestionMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionMediaCountArgs} args - Arguments to filter QuestionMedias to count.
     * @example
     * // Count the number of QuestionMedias
     * const count = await prisma.questionMedia.count({
     *   where: {
     *     // ... the filter for the QuestionMedias we want to count
     *   }
     * })
    **/
    count<T extends questionMediaCountArgs>(
      args?: Subset<T, questionMediaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionMediaAggregateArgs>(args: Subset<T, QuestionMediaAggregateArgs>): PrismaPromise<GetQuestionMediaAggregateType<T>>

    /**
     * Group by QuestionMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionMediaGroupByArgs['orderBy'] }
        : { orderBy?: QuestionMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionMediaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for questionMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__questionMediaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    questionMediaID_rs<T extends questionsArgs = {}>(args?: Subset<T, questionsArgs>): CheckSelect<T, Prisma__questionsClient<questions | null >, Prisma__questionsClient<questionsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * questionMedia base type for findUnique actions
   */
  export type questionMediaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
    /**
     * Filter, which questionMedia to fetch.
     * 
    **/
    where: questionMediaWhereUniqueInput
  }

  /**
   * questionMedia: findUnique
   */
  export interface questionMediaFindUniqueArgs extends questionMediaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * questionMedia base type for findFirst actions
   */
  export type questionMediaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
    /**
     * Filter, which questionMedia to fetch.
     * 
    **/
    where?: questionMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questionMedias to fetch.
     * 
    **/
    orderBy?: Enumerable<questionMediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questionMedias.
     * 
    **/
    cursor?: questionMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questionMedias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questionMedias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questionMedias.
     * 
    **/
    distinct?: Enumerable<QuestionMediaScalarFieldEnum>
  }

  /**
   * questionMedia: findFirst
   */
  export interface questionMediaFindFirstArgs extends questionMediaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * questionMedia findMany
   */
  export type questionMediaFindManyArgs = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
    /**
     * Filter, which questionMedias to fetch.
     * 
    **/
    where?: questionMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questionMedias to fetch.
     * 
    **/
    orderBy?: Enumerable<questionMediaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questionMedias.
     * 
    **/
    cursor?: questionMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questionMedias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questionMedias.
     * 
    **/
    skip?: number
    distinct?: Enumerable<QuestionMediaScalarFieldEnum>
  }


  /**
   * questionMedia create
   */
  export type questionMediaCreateArgs = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
    /**
     * The data needed to create a questionMedia.
     * 
    **/
    data: XOR<questionMediaCreateInput, questionMediaUncheckedCreateInput>
  }


  /**
   * questionMedia createMany
   */
  export type questionMediaCreateManyArgs = {
    /**
     * The data used to create many questionMedias.
     * 
    **/
    data: Enumerable<questionMediaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * questionMedia update
   */
  export type questionMediaUpdateArgs = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
    /**
     * The data needed to update a questionMedia.
     * 
    **/
    data: XOR<questionMediaUpdateInput, questionMediaUncheckedUpdateInput>
    /**
     * Choose, which questionMedia to update.
     * 
    **/
    where: questionMediaWhereUniqueInput
  }


  /**
   * questionMedia updateMany
   */
  export type questionMediaUpdateManyArgs = {
    /**
     * The data used to update questionMedias.
     * 
    **/
    data: XOR<questionMediaUpdateManyMutationInput, questionMediaUncheckedUpdateManyInput>
    /**
     * Filter which questionMedias to update
     * 
    **/
    where?: questionMediaWhereInput
  }


  /**
   * questionMedia upsert
   */
  export type questionMediaUpsertArgs = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
    /**
     * The filter to search for the questionMedia to update in case it exists.
     * 
    **/
    where: questionMediaWhereUniqueInput
    /**
     * In case the questionMedia found by the `where` argument doesn't exist, create a new questionMedia with this data.
     * 
    **/
    create: XOR<questionMediaCreateInput, questionMediaUncheckedCreateInput>
    /**
     * In case the questionMedia was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<questionMediaUpdateInput, questionMediaUncheckedUpdateInput>
  }


  /**
   * questionMedia delete
   */
  export type questionMediaDeleteArgs = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
    /**
     * Filter which questionMedia to delete.
     * 
    **/
    where: questionMediaWhereUniqueInput
  }


  /**
   * questionMedia deleteMany
   */
  export type questionMediaDeleteManyArgs = {
    /**
     * Filter which questionMedias to delete
     * 
    **/
    where?: questionMediaWhereInput
  }


  /**
   * questionMedia: findUniqueOrThrow
   */
  export type questionMediaFindUniqueOrThrowArgs = questionMediaFindUniqueArgsBase
      

  /**
   * questionMedia: findFirstOrThrow
   */
  export type questionMediaFindFirstOrThrowArgs = questionMediaFindFirstArgsBase
      

  /**
   * questionMedia without action
   */
  export type questionMediaArgs = {
    /**
     * Select specific fields to fetch from the questionMedia
     * 
    **/
    select?: questionMediaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: questionMediaInclude | null
  }



  /**
   * Model answer
   */


  export type AggregateAnswer = {
    _count: AnswerCountAggregateOutputType | null
    _avg: AnswerAvgAggregateOutputType | null
    _sum: AnswerSumAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  export type AnswerAvgAggregateOutputType = {
    optionNumber: number | null
  }

  export type AnswerSumAggregateOutputType = {
    optionNumber: number | null
  }

  export type AnswerMinAggregateOutputType = {
    questionID: string | null
    optionNumber: number | null
    answerContent: string | null
    isCorrect: boolean | null
  }

  export type AnswerMaxAggregateOutputType = {
    questionID: string | null
    optionNumber: number | null
    answerContent: string | null
    isCorrect: boolean | null
  }

  export type AnswerCountAggregateOutputType = {
    questionID: number
    optionNumber: number
    answerContent: number
    isCorrect: number
    _all: number
  }


  export type AnswerAvgAggregateInputType = {
    optionNumber?: true
  }

  export type AnswerSumAggregateInputType = {
    optionNumber?: true
  }

  export type AnswerMinAggregateInputType = {
    questionID?: true
    optionNumber?: true
    answerContent?: true
    isCorrect?: true
  }

  export type AnswerMaxAggregateInputType = {
    questionID?: true
    optionNumber?: true
    answerContent?: true
    isCorrect?: true
  }

  export type AnswerCountAggregateInputType = {
    questionID?: true
    optionNumber?: true
    answerContent?: true
    isCorrect?: true
    _all?: true
  }

  export type AnswerAggregateArgs = {
    /**
     * Filter which answer to aggregate.
     * 
    **/
    where?: answerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     * 
    **/
    orderBy?: Enumerable<answerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: answerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned answers
    **/
    _count?: true | AnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswerMaxAggregateInputType
  }

  export type GetAnswerAggregateType<T extends AnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswer[P]>
      : GetScalarType<T[P], AggregateAnswer[P]>
  }




  export type AnswerGroupByArgs = {
    where?: answerWhereInput
    orderBy?: Enumerable<answerOrderByWithAggregationInput>
    by: Array<AnswerScalarFieldEnum>
    having?: answerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswerCountAggregateInputType | true
    _avg?: AnswerAvgAggregateInputType
    _sum?: AnswerSumAggregateInputType
    _min?: AnswerMinAggregateInputType
    _max?: AnswerMaxAggregateInputType
  }


  export type AnswerGroupByOutputType = {
    questionID: string
    optionNumber: number
    answerContent: string
    isCorrect: boolean
    _count: AnswerCountAggregateOutputType | null
    _avg: AnswerAvgAggregateOutputType | null
    _sum: AnswerSumAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  type GetAnswerGroupByPayload<T extends AnswerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswerGroupByOutputType[P]>
            : GetScalarType<T[P], AnswerGroupByOutputType[P]>
        }
      >
    >


  export type answerSelect = {
    questionID?: boolean
    optionNumber?: boolean
    answerContent?: boolean
    isCorrect?: boolean
    questionAnswerID_rs?: boolean | questionsArgs
  }

  export type answerInclude = {
    questionAnswerID_rs?: boolean | questionsArgs
  }

  export type answerGetPayload<
    S extends boolean | null | undefined | answerArgs,
    U = keyof S
      > = S extends true
        ? answer
    : S extends undefined
    ? never
    : S extends answerArgs | answerFindManyArgs
    ?'include' extends U
    ? answer  & {
    [P in TrueKeys<S['include']>]:
        P extends 'questionAnswerID_rs' ? questionsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'questionAnswerID_rs' ? questionsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof answer ? answer[P] : never
  } 
    : answer
  : answer


  type answerCountArgs = Merge<
    Omit<answerFindManyArgs, 'select' | 'include'> & {
      select?: AnswerCountAggregateInputType | true
    }
  >

  export interface answerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Answer that matches the filter.
     * @param {answerFindUniqueArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends answerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, answerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'answer'> extends True ? CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>> : CheckSelect<T, Prisma__answerClient<answer | null >, Prisma__answerClient<answerGetPayload<T> | null >>

    /**
     * Find the first Answer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerFindFirstArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends answerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, answerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'answer'> extends True ? CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>> : CheckSelect<T, Prisma__answerClient<answer | null >, Prisma__answerClient<answerGetPayload<T> | null >>

    /**
     * Find zero or more Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answer.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answer.findMany({ take: 10 })
     * 
     * // Only select the `questionID`
     * const answerWithQuestionIDOnly = await prisma.answer.findMany({ select: { questionID: true } })
     * 
    **/
    findMany<T extends answerFindManyArgs>(
      args?: SelectSubset<T, answerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<answer>>, PrismaPromise<Array<answerGetPayload<T>>>>

    /**
     * Create a Answer.
     * @param {answerCreateArgs} args - Arguments to create a Answer.
     * @example
     * // Create one Answer
     * const Answer = await prisma.answer.create({
     *   data: {
     *     // ... data to create a Answer
     *   }
     * })
     * 
    **/
    create<T extends answerCreateArgs>(
      args: SelectSubset<T, answerCreateArgs>
    ): CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>>

    /**
     * Create many Answers.
     *     @param {answerCreateManyArgs} args - Arguments to create many Answers.
     *     @example
     *     // Create many Answers
     *     const answer = await prisma.answer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends answerCreateManyArgs>(
      args?: SelectSubset<T, answerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Answer.
     * @param {answerDeleteArgs} args - Arguments to delete one Answer.
     * @example
     * // Delete one Answer
     * const Answer = await prisma.answer.delete({
     *   where: {
     *     // ... filter to delete one Answer
     *   }
     * })
     * 
    **/
    delete<T extends answerDeleteArgs>(
      args: SelectSubset<T, answerDeleteArgs>
    ): CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>>

    /**
     * Update one Answer.
     * @param {answerUpdateArgs} args - Arguments to update one Answer.
     * @example
     * // Update one Answer
     * const answer = await prisma.answer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends answerUpdateArgs>(
      args: SelectSubset<T, answerUpdateArgs>
    ): CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>>

    /**
     * Delete zero or more Answers.
     * @param {answerDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends answerDeleteManyArgs>(
      args?: SelectSubset<T, answerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answer = await prisma.answer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends answerUpdateManyArgs>(
      args: SelectSubset<T, answerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Answer.
     * @param {answerUpsertArgs} args - Arguments to update or create a Answer.
     * @example
     * // Update or create a Answer
     * const answer = await prisma.answer.upsert({
     *   create: {
     *     // ... data to create a Answer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answer we want to update
     *   }
     * })
    **/
    upsert<T extends answerUpsertArgs>(
      args: SelectSubset<T, answerUpsertArgs>
    ): CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>>

    /**
     * Find one Answer that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {answerFindUniqueOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends answerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, answerFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>>

    /**
     * Find the first Answer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerFindFirstOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends answerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, answerFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__answerClient<answer>, Prisma__answerClient<answerGetPayload<T>>>

    /**
     * Count the number of Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {answerCountArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answer.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count<T extends answerCountArgs>(
      args?: Subset<T, answerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswerAggregateArgs>(args: Subset<T, AnswerAggregateArgs>): PrismaPromise<GetAnswerAggregateType<T>>

    /**
     * Group by Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnswerGroupByArgs['orderBy'] }
        : { orderBy?: AnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for answer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__answerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    questionAnswerID_rs<T extends questionsArgs = {}>(args?: Subset<T, questionsArgs>): CheckSelect<T, Prisma__questionsClient<questions | null >, Prisma__questionsClient<questionsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * answer base type for findUnique actions
   */
  export type answerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
    /**
     * Filter, which answer to fetch.
     * 
    **/
    where: answerWhereUniqueInput
  }

  /**
   * answer: findUnique
   */
  export interface answerFindUniqueArgs extends answerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * answer base type for findFirst actions
   */
  export type answerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
    /**
     * Filter, which answer to fetch.
     * 
    **/
    where?: answerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     * 
    **/
    orderBy?: Enumerable<answerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for answers.
     * 
    **/
    cursor?: answerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of answers.
     * 
    **/
    distinct?: Enumerable<AnswerScalarFieldEnum>
  }

  /**
   * answer: findFirst
   */
  export interface answerFindFirstArgs extends answerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * answer findMany
   */
  export type answerFindManyArgs = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
    /**
     * Filter, which answers to fetch.
     * 
    **/
    where?: answerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of answers to fetch.
     * 
    **/
    orderBy?: Enumerable<answerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing answers.
     * 
    **/
    cursor?: answerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` answers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` answers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AnswerScalarFieldEnum>
  }


  /**
   * answer create
   */
  export type answerCreateArgs = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
    /**
     * The data needed to create a answer.
     * 
    **/
    data: XOR<answerCreateInput, answerUncheckedCreateInput>
  }


  /**
   * answer createMany
   */
  export type answerCreateManyArgs = {
    /**
     * The data used to create many answers.
     * 
    **/
    data: Enumerable<answerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * answer update
   */
  export type answerUpdateArgs = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
    /**
     * The data needed to update a answer.
     * 
    **/
    data: XOR<answerUpdateInput, answerUncheckedUpdateInput>
    /**
     * Choose, which answer to update.
     * 
    **/
    where: answerWhereUniqueInput
  }


  /**
   * answer updateMany
   */
  export type answerUpdateManyArgs = {
    /**
     * The data used to update answers.
     * 
    **/
    data: XOR<answerUpdateManyMutationInput, answerUncheckedUpdateManyInput>
    /**
     * Filter which answers to update
     * 
    **/
    where?: answerWhereInput
  }


  /**
   * answer upsert
   */
  export type answerUpsertArgs = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
    /**
     * The filter to search for the answer to update in case it exists.
     * 
    **/
    where: answerWhereUniqueInput
    /**
     * In case the answer found by the `where` argument doesn't exist, create a new answer with this data.
     * 
    **/
    create: XOR<answerCreateInput, answerUncheckedCreateInput>
    /**
     * In case the answer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<answerUpdateInput, answerUncheckedUpdateInput>
  }


  /**
   * answer delete
   */
  export type answerDeleteArgs = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
    /**
     * Filter which answer to delete.
     * 
    **/
    where: answerWhereUniqueInput
  }


  /**
   * answer deleteMany
   */
  export type answerDeleteManyArgs = {
    /**
     * Filter which answers to delete
     * 
    **/
    where?: answerWhereInput
  }


  /**
   * answer: findUniqueOrThrow
   */
  export type answerFindUniqueOrThrowArgs = answerFindUniqueArgsBase
      

  /**
   * answer: findFirstOrThrow
   */
  export type answerFindFirstOrThrowArgs = answerFindFirstArgsBase
      

  /**
   * answer without action
   */
  export type answerArgs = {
    /**
     * Select specific fields to fetch from the answer
     * 
    **/
    select?: answerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: answerInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AnswerScalarFieldEnum: {
    questionID: 'questionID',
    optionNumber: 'optionNumber',
    answerContent: 'answerContent',
    isCorrect: 'isCorrect'
  };

  export type AnswerScalarFieldEnum = (typeof AnswerScalarFieldEnum)[keyof typeof AnswerScalarFieldEnum]


  export const PostMediaScalarFieldEnum: {
    postID: 'postID',
    postMediaURL: 'postMediaURL'
  };

  export type PostMediaScalarFieldEnum = (typeof PostMediaScalarFieldEnum)[keyof typeof PostMediaScalarFieldEnum]


  export const PostsScalarFieldEnum: {
    postID: 'postID',
    email: 'email',
    title: 'title',
    message: 'message',
    likes: 'likes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostsScalarFieldEnum = (typeof PostsScalarFieldEnum)[keyof typeof PostsScalarFieldEnum]


  export const QuestionMediaScalarFieldEnum: {
    questionID: 'questionID',
    questionMediaURL: 'questionMediaURL'
  };

  export type QuestionMediaScalarFieldEnum = (typeof QuestionMediaScalarFieldEnum)[keyof typeof QuestionMediaScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    questionID: 'questionID',
    topicID: 'topicID',
    questionContent: 'questionContent',
    questionDifficulty: 'questionDifficulty'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StudentAttemptsScalarFieldEnum: {
    studentEmail: 'studentEmail',
    questionID: 'questionID',
    attemptOption: 'attemptOption',
    attemptCorrect: 'attemptCorrect',
    attemptSeconds: 'attemptSeconds'
  };

  export type StudentAttemptsScalarFieldEnum = (typeof StudentAttemptsScalarFieldEnum)[keyof typeof StudentAttemptsScalarFieldEnum]


  export const StudentMasteriesScalarFieldEnum: {
    studentEmail: 'studentEmail',
    topicID: 'topicID',
    masteryLevel: 'masteryLevel',
    courseCompletion: 'courseCompletion'
  };

  export type StudentMasteriesScalarFieldEnum = (typeof StudentMasteriesScalarFieldEnum)[keyof typeof StudentMasteriesScalarFieldEnum]


  export const StudentsScalarFieldEnum: {
    studentEmail: 'studentEmail',
    matriculationNumber: 'matriculationNumber'
  };

  export type StudentsScalarFieldEnum = (typeof StudentsScalarFieldEnum)[keyof typeof StudentsScalarFieldEnum]


  export const TopicsScalarFieldEnum: {
    topicID: 'topicID',
    topicName: 'topicName',
    topicLevel: 'topicLevel'
  };

  export type TopicsScalarFieldEnum = (typeof TopicsScalarFieldEnum)[keyof typeof TopicsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    email: 'email',
    password: 'password',
    name: 'name',
    dpURL: 'dpURL',
    role: 'role'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type postsWhereInput = {
    AND?: Enumerable<postsWhereInput>
    OR?: Enumerable<postsWhereInput>
    NOT?: Enumerable<postsWhereInput>
    postID?: StringFilter | string
    email?: StringFilter | string
    title?: StringFilter | string
    message?: StringFilter | string
    likes?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userpost_rs?: XOR<UsersRelationFilter, usersWhereInput>
    postMedia_rs?: PostMediaListRelationFilter
  }

  export type postsOrderByWithRelationInput = {
    postID?: SortOrder
    email?: SortOrder
    title?: SortOrder
    message?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userpost_rs?: usersOrderByWithRelationInput
    postMedia_rs?: postMediaOrderByRelationAggregateInput
  }

  export type postsWhereUniqueInput = {
    postID?: string
  }

  export type postsOrderByWithAggregationInput = {
    postID?: SortOrder
    email?: SortOrder
    title?: SortOrder
    message?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: postsCountOrderByAggregateInput
    _avg?: postsAvgOrderByAggregateInput
    _max?: postsMaxOrderByAggregateInput
    _min?: postsMinOrderByAggregateInput
    _sum?: postsSumOrderByAggregateInput
  }

  export type postsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<postsScalarWhereWithAggregatesInput>
    OR?: Enumerable<postsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<postsScalarWhereWithAggregatesInput>
    postID?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    likes?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type postMediaWhereInput = {
    AND?: Enumerable<postMediaWhereInput>
    OR?: Enumerable<postMediaWhereInput>
    NOT?: Enumerable<postMediaWhereInput>
    postID?: StringFilter | string
    postMediaURL?: StringNullableFilter | string | null
    postMedia_rs?: XOR<PostsRelationFilter, postsWhereInput>
  }

  export type postMediaOrderByWithRelationInput = {
    postID?: SortOrder
    postMediaURL?: SortOrder
    postMedia_rs?: postsOrderByWithRelationInput
  }

  export type postMediaWhereUniqueInput = {
    postID?: string
  }

  export type postMediaOrderByWithAggregationInput = {
    postID?: SortOrder
    postMediaURL?: SortOrder
    _count?: postMediaCountOrderByAggregateInput
    _max?: postMediaMaxOrderByAggregateInput
    _min?: postMediaMinOrderByAggregateInput
  }

  export type postMediaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<postMediaScalarWhereWithAggregatesInput>
    OR?: Enumerable<postMediaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<postMediaScalarWhereWithAggregatesInput>
    postID?: StringWithAggregatesFilter | string
    postMediaURL?: StringNullableWithAggregatesFilter | string | null
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    email?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    dpURL?: StringNullableFilter | string | null
    role?: EnumRoleFilter | Role
    postemail_rs?: PostsListRelationFilter
    studentEmail_user_rs?: StudentsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    dpURL?: SortOrder
    role?: SortOrder
    postemail_rs?: postsOrderByRelationAggregateInput
    studentEmail_user_rs?: studentsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    dpURL?: SortOrder
    role?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    dpURL?: StringNullableWithAggregatesFilter | string | null
    role?: EnumRoleWithAggregatesFilter | Role
  }

  export type studentsWhereInput = {
    AND?: Enumerable<studentsWhereInput>
    OR?: Enumerable<studentsWhereInput>
    NOT?: Enumerable<studentsWhereInput>
    studentEmail?: StringFilter | string
    matriculationNumber?: StringFilter | string
    studentEmail_user_rs?: XOR<UsersRelationFilter, usersWhereInput>
    student_Masteries_rs?: StudentMasteriesListRelationFilter
    students_studentAttempt_rs?: StudentAttemptsListRelationFilter
  }

  export type studentsOrderByWithRelationInput = {
    studentEmail?: SortOrder
    matriculationNumber?: SortOrder
    studentEmail_user_rs?: usersOrderByWithRelationInput
    student_Masteries_rs?: studentMasteriesOrderByRelationAggregateInput
    students_studentAttempt_rs?: studentAttemptsOrderByRelationAggregateInput
  }

  export type studentsWhereUniqueInput = {
    studentEmail?: string
    matriculationNumber?: string
  }

  export type studentsOrderByWithAggregationInput = {
    studentEmail?: SortOrder
    matriculationNumber?: SortOrder
    _count?: studentsCountOrderByAggregateInput
    _max?: studentsMaxOrderByAggregateInput
    _min?: studentsMinOrderByAggregateInput
  }

  export type studentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<studentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<studentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<studentsScalarWhereWithAggregatesInput>
    studentEmail?: StringWithAggregatesFilter | string
    matriculationNumber?: StringWithAggregatesFilter | string
  }

  export type studentAttemptsWhereInput = {
    AND?: Enumerable<studentAttemptsWhereInput>
    OR?: Enumerable<studentAttemptsWhereInput>
    NOT?: Enumerable<studentAttemptsWhereInput>
    studentEmail?: StringFilter | string
    questionID?: StringFilter | string
    attemptOption?: IntFilter | number
    attemptCorrect?: BoolFilter | boolean
    attemptSeconds?: IntFilter | number
    students_studentAttempt_rs?: XOR<StudentsRelationFilter, studentsWhereInput>
    questionAttemptID_rs?: XOR<QuestionsRelationFilter, questionsWhereInput>
  }

  export type studentAttemptsOrderByWithRelationInput = {
    studentEmail?: SortOrder
    questionID?: SortOrder
    attemptOption?: SortOrder
    attemptCorrect?: SortOrder
    attemptSeconds?: SortOrder
    students_studentAttempt_rs?: studentsOrderByWithRelationInput
    questionAttemptID_rs?: questionsOrderByWithRelationInput
  }

  export type studentAttemptsWhereUniqueInput = {
    studentEmail_questionID?: studentAttemptsStudentEmailQuestionIDCompoundUniqueInput
  }

  export type studentAttemptsOrderByWithAggregationInput = {
    studentEmail?: SortOrder
    questionID?: SortOrder
    attemptOption?: SortOrder
    attemptCorrect?: SortOrder
    attemptSeconds?: SortOrder
    _count?: studentAttemptsCountOrderByAggregateInput
    _avg?: studentAttemptsAvgOrderByAggregateInput
    _max?: studentAttemptsMaxOrderByAggregateInput
    _min?: studentAttemptsMinOrderByAggregateInput
    _sum?: studentAttemptsSumOrderByAggregateInput
  }

  export type studentAttemptsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<studentAttemptsScalarWhereWithAggregatesInput>
    OR?: Enumerable<studentAttemptsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<studentAttemptsScalarWhereWithAggregatesInput>
    studentEmail?: StringWithAggregatesFilter | string
    questionID?: StringWithAggregatesFilter | string
    attemptOption?: IntWithAggregatesFilter | number
    attemptCorrect?: BoolWithAggregatesFilter | boolean
    attemptSeconds?: IntWithAggregatesFilter | number
  }

  export type studentMasteriesWhereInput = {
    AND?: Enumerable<studentMasteriesWhereInput>
    OR?: Enumerable<studentMasteriesWhereInput>
    NOT?: Enumerable<studentMasteriesWhereInput>
    studentEmail?: StringFilter | string
    topicID?: StringFilter | string
    masteryLevel?: FloatFilter | number
    courseCompletion?: FloatFilter | number
    studentMasteriesTopic_rs?: XOR<TopicsRelationFilter, topicsWhereInput>
    student_Masteries_rs?: XOR<StudentsRelationFilter, studentsWhereInput>
  }

  export type studentMasteriesOrderByWithRelationInput = {
    studentEmail?: SortOrder
    topicID?: SortOrder
    masteryLevel?: SortOrder
    courseCompletion?: SortOrder
    studentMasteriesTopic_rs?: topicsOrderByWithRelationInput
    student_Masteries_rs?: studentsOrderByWithRelationInput
  }

  export type studentMasteriesWhereUniqueInput = {
    topicID?: string
  }

  export type studentMasteriesOrderByWithAggregationInput = {
    studentEmail?: SortOrder
    topicID?: SortOrder
    masteryLevel?: SortOrder
    courseCompletion?: SortOrder
    _count?: studentMasteriesCountOrderByAggregateInput
    _avg?: studentMasteriesAvgOrderByAggregateInput
    _max?: studentMasteriesMaxOrderByAggregateInput
    _min?: studentMasteriesMinOrderByAggregateInput
    _sum?: studentMasteriesSumOrderByAggregateInput
  }

  export type studentMasteriesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<studentMasteriesScalarWhereWithAggregatesInput>
    OR?: Enumerable<studentMasteriesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<studentMasteriesScalarWhereWithAggregatesInput>
    studentEmail?: StringWithAggregatesFilter | string
    topicID?: StringWithAggregatesFilter | string
    masteryLevel?: FloatWithAggregatesFilter | number
    courseCompletion?: FloatWithAggregatesFilter | number
  }

  export type topicsWhereInput = {
    AND?: Enumerable<topicsWhereInput>
    OR?: Enumerable<topicsWhereInput>
    NOT?: Enumerable<topicsWhereInput>
    topicID?: StringFilter | string
    topicName?: StringFilter | string
    topicLevel?: IntFilter | number
    topicID_rs?: QuestionsListRelationFilter
    studentMasteriesTopic_rs?: StudentMasteriesListRelationFilter
  }

  export type topicsOrderByWithRelationInput = {
    topicID?: SortOrder
    topicName?: SortOrder
    topicLevel?: SortOrder
    topicID_rs?: questionsOrderByRelationAggregateInput
    studentMasteriesTopic_rs?: studentMasteriesOrderByRelationAggregateInput
  }

  export type topicsWhereUniqueInput = {
    topicID?: string
  }

  export type topicsOrderByWithAggregationInput = {
    topicID?: SortOrder
    topicName?: SortOrder
    topicLevel?: SortOrder
    _count?: topicsCountOrderByAggregateInput
    _avg?: topicsAvgOrderByAggregateInput
    _max?: topicsMaxOrderByAggregateInput
    _min?: topicsMinOrderByAggregateInput
    _sum?: topicsSumOrderByAggregateInput
  }

  export type topicsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<topicsScalarWhereWithAggregatesInput>
    OR?: Enumerable<topicsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<topicsScalarWhereWithAggregatesInput>
    topicID?: StringWithAggregatesFilter | string
    topicName?: StringWithAggregatesFilter | string
    topicLevel?: IntWithAggregatesFilter | number
  }

  export type questionsWhereInput = {
    AND?: Enumerable<questionsWhereInput>
    OR?: Enumerable<questionsWhereInput>
    NOT?: Enumerable<questionsWhereInput>
    questionID?: StringFilter | string
    topicID?: StringFilter | string
    questionContent?: StringFilter | string
    questionDifficulty?: IntFilter | number
    topicID_rs?: XOR<TopicsRelationFilter, topicsWhereInput>
    questionAttemptID_rs?: StudentAttemptsListRelationFilter
    questionMediaID_rs?: QuestionMediaListRelationFilter
    questionAnswerID_rs?: AnswerListRelationFilter
  }

  export type questionsOrderByWithRelationInput = {
    questionID?: SortOrder
    topicID?: SortOrder
    questionContent?: SortOrder
    questionDifficulty?: SortOrder
    topicID_rs?: topicsOrderByWithRelationInput
    questionAttemptID_rs?: studentAttemptsOrderByRelationAggregateInput
    questionMediaID_rs?: questionMediaOrderByRelationAggregateInput
    questionAnswerID_rs?: answerOrderByRelationAggregateInput
  }

  export type questionsWhereUniqueInput = {
    questionID?: string
  }

  export type questionsOrderByWithAggregationInput = {
    questionID?: SortOrder
    topicID?: SortOrder
    questionContent?: SortOrder
    questionDifficulty?: SortOrder
    _count?: questionsCountOrderByAggregateInput
    _avg?: questionsAvgOrderByAggregateInput
    _max?: questionsMaxOrderByAggregateInput
    _min?: questionsMinOrderByAggregateInput
    _sum?: questionsSumOrderByAggregateInput
  }

  export type questionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<questionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<questionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<questionsScalarWhereWithAggregatesInput>
    questionID?: StringWithAggregatesFilter | string
    topicID?: StringWithAggregatesFilter | string
    questionContent?: StringWithAggregatesFilter | string
    questionDifficulty?: IntWithAggregatesFilter | number
  }

  export type questionMediaWhereInput = {
    AND?: Enumerable<questionMediaWhereInput>
    OR?: Enumerable<questionMediaWhereInput>
    NOT?: Enumerable<questionMediaWhereInput>
    questionID?: StringFilter | string
    questionMediaURL?: StringNullableFilter | string | null
    questionMediaID_rs?: XOR<QuestionsRelationFilter, questionsWhereInput>
  }

  export type questionMediaOrderByWithRelationInput = {
    questionID?: SortOrder
    questionMediaURL?: SortOrder
    questionMediaID_rs?: questionsOrderByWithRelationInput
  }

  export type questionMediaWhereUniqueInput = {
    questionID?: string
  }

  export type questionMediaOrderByWithAggregationInput = {
    questionID?: SortOrder
    questionMediaURL?: SortOrder
    _count?: questionMediaCountOrderByAggregateInput
    _max?: questionMediaMaxOrderByAggregateInput
    _min?: questionMediaMinOrderByAggregateInput
  }

  export type questionMediaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<questionMediaScalarWhereWithAggregatesInput>
    OR?: Enumerable<questionMediaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<questionMediaScalarWhereWithAggregatesInput>
    questionID?: StringWithAggregatesFilter | string
    questionMediaURL?: StringNullableWithAggregatesFilter | string | null
  }

  export type answerWhereInput = {
    AND?: Enumerable<answerWhereInput>
    OR?: Enumerable<answerWhereInput>
    NOT?: Enumerable<answerWhereInput>
    questionID?: StringFilter | string
    optionNumber?: IntFilter | number
    answerContent?: StringFilter | string
    isCorrect?: BoolFilter | boolean
    questionAnswerID_rs?: XOR<QuestionsRelationFilter, questionsWhereInput>
  }

  export type answerOrderByWithRelationInput = {
    questionID?: SortOrder
    optionNumber?: SortOrder
    answerContent?: SortOrder
    isCorrect?: SortOrder
    questionAnswerID_rs?: questionsOrderByWithRelationInput
  }

  export type answerWhereUniqueInput = {
    questionID_optionNumber?: answerQuestionIDOptionNumberCompoundUniqueInput
  }

  export type answerOrderByWithAggregationInput = {
    questionID?: SortOrder
    optionNumber?: SortOrder
    answerContent?: SortOrder
    isCorrect?: SortOrder
    _count?: answerCountOrderByAggregateInput
    _avg?: answerAvgOrderByAggregateInput
    _max?: answerMaxOrderByAggregateInput
    _min?: answerMinOrderByAggregateInput
    _sum?: answerSumOrderByAggregateInput
  }

  export type answerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<answerScalarWhereWithAggregatesInput>
    OR?: Enumerable<answerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<answerScalarWhereWithAggregatesInput>
    questionID?: StringWithAggregatesFilter | string
    optionNumber?: IntWithAggregatesFilter | number
    answerContent?: StringWithAggregatesFilter | string
    isCorrect?: BoolWithAggregatesFilter | boolean
  }

  export type postsCreateInput = {
    postID?: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userpost_rs: usersCreateNestedOneWithoutPostemail_rsInput
    postMedia_rs?: postMediaCreateNestedManyWithoutPostMedia_rsInput
  }

  export type postsUncheckedCreateInput = {
    postID?: string
    email: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
    postMedia_rs?: postMediaUncheckedCreateNestedManyWithoutPostMedia_rsInput
  }

  export type postsUpdateInput = {
    postID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userpost_rs?: usersUpdateOneRequiredWithoutPostemail_rsNestedInput
    postMedia_rs?: postMediaUpdateManyWithoutPostMedia_rsNestedInput
  }

  export type postsUncheckedUpdateInput = {
    postID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postMedia_rs?: postMediaUncheckedUpdateManyWithoutPostMedia_rsNestedInput
  }

  export type postsCreateManyInput = {
    postID?: string
    email: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type postsUpdateManyMutationInput = {
    postID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postsUncheckedUpdateManyInput = {
    postID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postMediaCreateInput = {
    postMediaURL?: string | null
    postMedia_rs?: postsCreateNestedOneWithoutPostMedia_rsInput
  }

  export type postMediaUncheckedCreateInput = {
    postID?: string
    postMediaURL?: string | null
  }

  export type postMediaUpdateInput = {
    postMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
    postMedia_rs?: postsUpdateOneRequiredWithoutPostMedia_rsNestedInput
  }

  export type postMediaUncheckedUpdateInput = {
    postID?: StringFieldUpdateOperationsInput | string
    postMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postMediaCreateManyInput = {
    postID?: string
    postMediaURL?: string | null
  }

  export type postMediaUpdateManyMutationInput = {
    postMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postMediaUncheckedUpdateManyInput = {
    postID?: StringFieldUpdateOperationsInput | string
    postMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    email: string
    password: string
    name: string
    dpURL?: string | null
    role: Role
    postemail_rs?: postsCreateNestedManyWithoutUserpost_rsInput
    studentEmail_user_rs?: studentsCreateNestedManyWithoutStudentEmail_user_rsInput
  }

  export type usersUncheckedCreateInput = {
    email: string
    password: string
    name: string
    dpURL?: string | null
    role: Role
    postemail_rs?: postsUncheckedCreateNestedManyWithoutUserpost_rsInput
    studentEmail_user_rs?: studentsUncheckedCreateNestedManyWithoutStudentEmail_user_rsInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    postemail_rs?: postsUpdateManyWithoutUserpost_rsNestedInput
    studentEmail_user_rs?: studentsUpdateManyWithoutStudentEmail_user_rsNestedInput
  }

  export type usersUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    postemail_rs?: postsUncheckedUpdateManyWithoutUserpost_rsNestedInput
    studentEmail_user_rs?: studentsUncheckedUpdateManyWithoutStudentEmail_user_rsNestedInput
  }

  export type usersCreateManyInput = {
    email: string
    password: string
    name: string
    dpURL?: string | null
    role: Role
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type usersUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type studentsCreateInput = {
    matriculationNumber: string
    studentEmail_user_rs: usersCreateNestedOneWithoutStudentEmail_user_rsInput
    student_Masteries_rs?: studentMasteriesCreateNestedManyWithoutStudent_Masteries_rsInput
    students_studentAttempt_rs?: studentAttemptsCreateNestedManyWithoutStudents_studentAttempt_rsInput
  }

  export type studentsUncheckedCreateInput = {
    studentEmail: string
    matriculationNumber: string
    student_Masteries_rs?: studentMasteriesUncheckedCreateNestedManyWithoutStudent_Masteries_rsInput
    students_studentAttempt_rs?: studentAttemptsUncheckedCreateNestedManyWithoutStudents_studentAttempt_rsInput
  }

  export type studentsUpdateInput = {
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    studentEmail_user_rs?: usersUpdateOneRequiredWithoutStudentEmail_user_rsNestedInput
    student_Masteries_rs?: studentMasteriesUpdateManyWithoutStudent_Masteries_rsNestedInput
    students_studentAttempt_rs?: studentAttemptsUpdateManyWithoutStudents_studentAttempt_rsNestedInput
  }

  export type studentsUncheckedUpdateInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    student_Masteries_rs?: studentMasteriesUncheckedUpdateManyWithoutStudent_Masteries_rsNestedInput
    students_studentAttempt_rs?: studentAttemptsUncheckedUpdateManyWithoutStudents_studentAttempt_rsNestedInput
  }

  export type studentsCreateManyInput = {
    studentEmail: string
    matriculationNumber: string
  }

  export type studentsUpdateManyMutationInput = {
    matriculationNumber?: StringFieldUpdateOperationsInput | string
  }

  export type studentsUncheckedUpdateManyInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    matriculationNumber?: StringFieldUpdateOperationsInput | string
  }

  export type studentAttemptsCreateInput = {
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
    students_studentAttempt_rs: studentsCreateNestedOneWithoutStudents_studentAttempt_rsInput
    questionAttemptID_rs: questionsCreateNestedOneWithoutQuestionAttemptID_rsInput
  }

  export type studentAttemptsUncheckedCreateInput = {
    studentEmail: string
    questionID: string
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
  }

  export type studentAttemptsUpdateInput = {
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
    students_studentAttempt_rs?: studentsUpdateOneRequiredWithoutStudents_studentAttempt_rsNestedInput
    questionAttemptID_rs?: questionsUpdateOneRequiredWithoutQuestionAttemptID_rsNestedInput
  }

  export type studentAttemptsUncheckedUpdateInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    questionID?: StringFieldUpdateOperationsInput | string
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
  }

  export type studentAttemptsCreateManyInput = {
    studentEmail: string
    questionID: string
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
  }

  export type studentAttemptsUpdateManyMutationInput = {
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
  }

  export type studentAttemptsUncheckedUpdateManyInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    questionID?: StringFieldUpdateOperationsInput | string
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
  }

  export type studentMasteriesCreateInput = {
    masteryLevel?: number
    courseCompletion?: number
    studentMasteriesTopic_rs?: topicsCreateNestedOneWithoutStudentMasteriesTopic_rsInput
    student_Masteries_rs: studentsCreateNestedOneWithoutStudent_Masteries_rsInput
  }

  export type studentMasteriesUncheckedCreateInput = {
    studentEmail: string
    topicID?: string
    masteryLevel?: number
    courseCompletion?: number
  }

  export type studentMasteriesUpdateInput = {
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
    studentMasteriesTopic_rs?: topicsUpdateOneRequiredWithoutStudentMasteriesTopic_rsNestedInput
    student_Masteries_rs?: studentsUpdateOneRequiredWithoutStudent_Masteries_rsNestedInput
  }

  export type studentMasteriesUncheckedUpdateInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    topicID?: StringFieldUpdateOperationsInput | string
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
  }

  export type studentMasteriesCreateManyInput = {
    studentEmail: string
    topicID?: string
    masteryLevel?: number
    courseCompletion?: number
  }

  export type studentMasteriesUpdateManyMutationInput = {
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
  }

  export type studentMasteriesUncheckedUpdateManyInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    topicID?: StringFieldUpdateOperationsInput | string
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
  }

  export type topicsCreateInput = {
    topicID?: string
    topicName: string
    topicLevel: number
    topicID_rs?: questionsCreateNestedManyWithoutTopicID_rsInput
    studentMasteriesTopic_rs?: studentMasteriesCreateNestedManyWithoutStudentMasteriesTopic_rsInput
  }

  export type topicsUncheckedCreateInput = {
    topicID?: string
    topicName: string
    topicLevel: number
    topicID_rs?: questionsUncheckedCreateNestedManyWithoutTopicID_rsInput
    studentMasteriesTopic_rs?: studentMasteriesUncheckedCreateNestedManyWithoutStudentMasteriesTopic_rsInput
  }

  export type topicsUpdateInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
    topicID_rs?: questionsUpdateManyWithoutTopicID_rsNestedInput
    studentMasteriesTopic_rs?: studentMasteriesUpdateManyWithoutStudentMasteriesTopic_rsNestedInput
  }

  export type topicsUncheckedUpdateInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
    topicID_rs?: questionsUncheckedUpdateManyWithoutTopicID_rsNestedInput
    studentMasteriesTopic_rs?: studentMasteriesUncheckedUpdateManyWithoutStudentMasteriesTopic_rsNestedInput
  }

  export type topicsCreateManyInput = {
    topicID?: string
    topicName: string
    topicLevel: number
  }

  export type topicsUpdateManyMutationInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
  }

  export type topicsUncheckedUpdateManyInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
  }

  export type questionsCreateInput = {
    questionID?: string
    questionContent: string
    questionDifficulty: number
    topicID_rs: topicsCreateNestedOneWithoutTopicID_rsInput
    questionAttemptID_rs?: studentAttemptsCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionMediaID_rs?: questionMediaCreateNestedManyWithoutQuestionMediaID_rsInput
    questionAnswerID_rs?: answerCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsUncheckedCreateInput = {
    questionID?: string
    topicID: string
    questionContent: string
    questionDifficulty: number
    questionAttemptID_rs?: studentAttemptsUncheckedCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionMediaID_rs?: questionMediaUncheckedCreateNestedManyWithoutQuestionMediaID_rsInput
    questionAnswerID_rs?: answerUncheckedCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsUpdateInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    topicID_rs?: topicsUpdateOneRequiredWithoutTopicID_rsNestedInput
    questionAttemptID_rs?: studentAttemptsUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionMediaID_rs?: questionMediaUpdateManyWithoutQuestionMediaID_rsNestedInput
    questionAnswerID_rs?: answerUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type questionsUncheckedUpdateInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    topicID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    questionAttemptID_rs?: studentAttemptsUncheckedUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionMediaID_rs?: questionMediaUncheckedUpdateManyWithoutQuestionMediaID_rsNestedInput
    questionAnswerID_rs?: answerUncheckedUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type questionsCreateManyInput = {
    questionID?: string
    topicID: string
    questionContent: string
    questionDifficulty: number
  }

  export type questionsUpdateManyMutationInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
  }

  export type questionsUncheckedUpdateManyInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    topicID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
  }

  export type questionMediaCreateInput = {
    questionMediaURL?: string | null
    questionMediaID_rs?: questionsCreateNestedOneWithoutQuestionMediaID_rsInput
  }

  export type questionMediaUncheckedCreateInput = {
    questionID?: string
    questionMediaURL?: string | null
  }

  export type questionMediaUpdateInput = {
    questionMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
    questionMediaID_rs?: questionsUpdateOneRequiredWithoutQuestionMediaID_rsNestedInput
  }

  export type questionMediaUncheckedUpdateInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type questionMediaCreateManyInput = {
    questionID?: string
    questionMediaURL?: string | null
  }

  export type questionMediaUpdateManyMutationInput = {
    questionMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type questionMediaUncheckedUpdateManyInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type answerCreateInput = {
    optionNumber: number
    answerContent: string
    isCorrect: boolean
    questionAnswerID_rs?: questionsCreateNestedOneWithoutQuestionAnswerID_rsInput
  }

  export type answerUncheckedCreateInput = {
    questionID?: string
    optionNumber: number
    answerContent: string
    isCorrect: boolean
  }

  export type answerUpdateInput = {
    optionNumber?: IntFieldUpdateOperationsInput | number
    answerContent?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
    questionAnswerID_rs?: questionsUpdateOneRequiredWithoutQuestionAnswerID_rsNestedInput
  }

  export type answerUncheckedUpdateInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    optionNumber?: IntFieldUpdateOperationsInput | number
    answerContent?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type answerCreateManyInput = {
    questionID?: string
    optionNumber: number
    answerContent: string
    isCorrect: boolean
  }

  export type answerUpdateManyMutationInput = {
    optionNumber?: IntFieldUpdateOperationsInput | number
    answerContent?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type answerUncheckedUpdateManyInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    optionNumber?: IntFieldUpdateOperationsInput | number
    answerContent?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type PostMediaListRelationFilter = {
    every?: postMediaWhereInput
    some?: postMediaWhereInput
    none?: postMediaWhereInput
  }

  export type postMediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type postsCountOrderByAggregateInput = {
    postID?: SortOrder
    email?: SortOrder
    title?: SortOrder
    message?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type postsAvgOrderByAggregateInput = {
    likes?: SortOrder
  }

  export type postsMaxOrderByAggregateInput = {
    postID?: SortOrder
    email?: SortOrder
    title?: SortOrder
    message?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type postsMinOrderByAggregateInput = {
    postID?: SortOrder
    email?: SortOrder
    title?: SortOrder
    message?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type postsSumOrderByAggregateInput = {
    likes?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type PostsRelationFilter = {
    is?: postsWhereInput
    isNot?: postsWhereInput
  }

  export type postMediaCountOrderByAggregateInput = {
    postID?: SortOrder
    postMediaURL?: SortOrder
  }

  export type postMediaMaxOrderByAggregateInput = {
    postID?: SortOrder
    postMediaURL?: SortOrder
  }

  export type postMediaMinOrderByAggregateInput = {
    postID?: SortOrder
    postMediaURL?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type PostsListRelationFilter = {
    every?: postsWhereInput
    some?: postsWhereInput
    none?: postsWhereInput
  }

  export type StudentsListRelationFilter = {
    every?: studentsWhereInput
    some?: studentsWhereInput
    none?: studentsWhereInput
  }

  export type postsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    dpURL?: SortOrder
    role?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    dpURL?: SortOrder
    role?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    dpURL?: SortOrder
    role?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type StudentMasteriesListRelationFilter = {
    every?: studentMasteriesWhereInput
    some?: studentMasteriesWhereInput
    none?: studentMasteriesWhereInput
  }

  export type StudentAttemptsListRelationFilter = {
    every?: studentAttemptsWhereInput
    some?: studentAttemptsWhereInput
    none?: studentAttemptsWhereInput
  }

  export type studentMasteriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentAttemptsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentsCountOrderByAggregateInput = {
    studentEmail?: SortOrder
    matriculationNumber?: SortOrder
  }

  export type studentsMaxOrderByAggregateInput = {
    studentEmail?: SortOrder
    matriculationNumber?: SortOrder
  }

  export type studentsMinOrderByAggregateInput = {
    studentEmail?: SortOrder
    matriculationNumber?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StudentsRelationFilter = {
    is?: studentsWhereInput
    isNot?: studentsWhereInput
  }

  export type QuestionsRelationFilter = {
    is?: questionsWhereInput
    isNot?: questionsWhereInput
  }

  export type studentAttemptsStudentEmailQuestionIDCompoundUniqueInput = {
    studentEmail: string
    questionID: string
  }

  export type studentAttemptsCountOrderByAggregateInput = {
    studentEmail?: SortOrder
    questionID?: SortOrder
    attemptOption?: SortOrder
    attemptCorrect?: SortOrder
    attemptSeconds?: SortOrder
  }

  export type studentAttemptsAvgOrderByAggregateInput = {
    attemptOption?: SortOrder
    attemptSeconds?: SortOrder
  }

  export type studentAttemptsMaxOrderByAggregateInput = {
    studentEmail?: SortOrder
    questionID?: SortOrder
    attemptOption?: SortOrder
    attemptCorrect?: SortOrder
    attemptSeconds?: SortOrder
  }

  export type studentAttemptsMinOrderByAggregateInput = {
    studentEmail?: SortOrder
    questionID?: SortOrder
    attemptOption?: SortOrder
    attemptCorrect?: SortOrder
    attemptSeconds?: SortOrder
  }

  export type studentAttemptsSumOrderByAggregateInput = {
    attemptOption?: SortOrder
    attemptSeconds?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type TopicsRelationFilter = {
    is?: topicsWhereInput
    isNot?: topicsWhereInput
  }

  export type studentMasteriesCountOrderByAggregateInput = {
    studentEmail?: SortOrder
    topicID?: SortOrder
    masteryLevel?: SortOrder
    courseCompletion?: SortOrder
  }

  export type studentMasteriesAvgOrderByAggregateInput = {
    masteryLevel?: SortOrder
    courseCompletion?: SortOrder
  }

  export type studentMasteriesMaxOrderByAggregateInput = {
    studentEmail?: SortOrder
    topicID?: SortOrder
    masteryLevel?: SortOrder
    courseCompletion?: SortOrder
  }

  export type studentMasteriesMinOrderByAggregateInput = {
    studentEmail?: SortOrder
    topicID?: SortOrder
    masteryLevel?: SortOrder
    courseCompletion?: SortOrder
  }

  export type studentMasteriesSumOrderByAggregateInput = {
    masteryLevel?: SortOrder
    courseCompletion?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type QuestionsListRelationFilter = {
    every?: questionsWhereInput
    some?: questionsWhereInput
    none?: questionsWhereInput
  }

  export type questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type topicsCountOrderByAggregateInput = {
    topicID?: SortOrder
    topicName?: SortOrder
    topicLevel?: SortOrder
  }

  export type topicsAvgOrderByAggregateInput = {
    topicLevel?: SortOrder
  }

  export type topicsMaxOrderByAggregateInput = {
    topicID?: SortOrder
    topicName?: SortOrder
    topicLevel?: SortOrder
  }

  export type topicsMinOrderByAggregateInput = {
    topicID?: SortOrder
    topicName?: SortOrder
    topicLevel?: SortOrder
  }

  export type topicsSumOrderByAggregateInput = {
    topicLevel?: SortOrder
  }

  export type QuestionMediaListRelationFilter = {
    every?: questionMediaWhereInput
    some?: questionMediaWhereInput
    none?: questionMediaWhereInput
  }

  export type AnswerListRelationFilter = {
    every?: answerWhereInput
    some?: answerWhereInput
    none?: answerWhereInput
  }

  export type questionMediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type answerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type questionsCountOrderByAggregateInput = {
    questionID?: SortOrder
    topicID?: SortOrder
    questionContent?: SortOrder
    questionDifficulty?: SortOrder
  }

  export type questionsAvgOrderByAggregateInput = {
    questionDifficulty?: SortOrder
  }

  export type questionsMaxOrderByAggregateInput = {
    questionID?: SortOrder
    topicID?: SortOrder
    questionContent?: SortOrder
    questionDifficulty?: SortOrder
  }

  export type questionsMinOrderByAggregateInput = {
    questionID?: SortOrder
    topicID?: SortOrder
    questionContent?: SortOrder
    questionDifficulty?: SortOrder
  }

  export type questionsSumOrderByAggregateInput = {
    questionDifficulty?: SortOrder
  }

  export type questionMediaCountOrderByAggregateInput = {
    questionID?: SortOrder
    questionMediaURL?: SortOrder
  }

  export type questionMediaMaxOrderByAggregateInput = {
    questionID?: SortOrder
    questionMediaURL?: SortOrder
  }

  export type questionMediaMinOrderByAggregateInput = {
    questionID?: SortOrder
    questionMediaURL?: SortOrder
  }

  export type answerQuestionIDOptionNumberCompoundUniqueInput = {
    questionID: string
    optionNumber: number
  }

  export type answerCountOrderByAggregateInput = {
    questionID?: SortOrder
    optionNumber?: SortOrder
    answerContent?: SortOrder
    isCorrect?: SortOrder
  }

  export type answerAvgOrderByAggregateInput = {
    optionNumber?: SortOrder
  }

  export type answerMaxOrderByAggregateInput = {
    questionID?: SortOrder
    optionNumber?: SortOrder
    answerContent?: SortOrder
    isCorrect?: SortOrder
  }

  export type answerMinOrderByAggregateInput = {
    questionID?: SortOrder
    optionNumber?: SortOrder
    answerContent?: SortOrder
    isCorrect?: SortOrder
  }

  export type answerSumOrderByAggregateInput = {
    optionNumber?: SortOrder
  }

  export type usersCreateNestedOneWithoutPostemail_rsInput = {
    create?: XOR<usersCreateWithoutPostemail_rsInput, usersUncheckedCreateWithoutPostemail_rsInput>
    connectOrCreate?: usersCreateOrConnectWithoutPostemail_rsInput
    connect?: usersWhereUniqueInput
  }

  export type postMediaCreateNestedManyWithoutPostMedia_rsInput = {
    create?: XOR<Enumerable<postMediaCreateWithoutPostMedia_rsInput>, Enumerable<postMediaUncheckedCreateWithoutPostMedia_rsInput>>
    connectOrCreate?: Enumerable<postMediaCreateOrConnectWithoutPostMedia_rsInput>
    createMany?: postMediaCreateManyPostMedia_rsInputEnvelope
    connect?: Enumerable<postMediaWhereUniqueInput>
  }

  export type postMediaUncheckedCreateNestedManyWithoutPostMedia_rsInput = {
    create?: XOR<Enumerable<postMediaCreateWithoutPostMedia_rsInput>, Enumerable<postMediaUncheckedCreateWithoutPostMedia_rsInput>>
    connectOrCreate?: Enumerable<postMediaCreateOrConnectWithoutPostMedia_rsInput>
    createMany?: postMediaCreateManyPostMedia_rsInputEnvelope
    connect?: Enumerable<postMediaWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutPostemail_rsNestedInput = {
    create?: XOR<usersCreateWithoutPostemail_rsInput, usersUncheckedCreateWithoutPostemail_rsInput>
    connectOrCreate?: usersCreateOrConnectWithoutPostemail_rsInput
    upsert?: usersUpsertWithoutPostemail_rsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutPostemail_rsInput, usersUncheckedUpdateWithoutPostemail_rsInput>
  }

  export type postMediaUpdateManyWithoutPostMedia_rsNestedInput = {
    create?: XOR<Enumerable<postMediaCreateWithoutPostMedia_rsInput>, Enumerable<postMediaUncheckedCreateWithoutPostMedia_rsInput>>
    connectOrCreate?: Enumerable<postMediaCreateOrConnectWithoutPostMedia_rsInput>
    upsert?: Enumerable<postMediaUpsertWithWhereUniqueWithoutPostMedia_rsInput>
    createMany?: postMediaCreateManyPostMedia_rsInputEnvelope
    set?: Enumerable<postMediaWhereUniqueInput>
    disconnect?: Enumerable<postMediaWhereUniqueInput>
    delete?: Enumerable<postMediaWhereUniqueInput>
    connect?: Enumerable<postMediaWhereUniqueInput>
    update?: Enumerable<postMediaUpdateWithWhereUniqueWithoutPostMedia_rsInput>
    updateMany?: Enumerable<postMediaUpdateManyWithWhereWithoutPostMedia_rsInput>
    deleteMany?: Enumerable<postMediaScalarWhereInput>
  }

  export type postMediaUncheckedUpdateManyWithoutPostMedia_rsNestedInput = {
    create?: XOR<Enumerable<postMediaCreateWithoutPostMedia_rsInput>, Enumerable<postMediaUncheckedCreateWithoutPostMedia_rsInput>>
    connectOrCreate?: Enumerable<postMediaCreateOrConnectWithoutPostMedia_rsInput>
    upsert?: Enumerable<postMediaUpsertWithWhereUniqueWithoutPostMedia_rsInput>
    createMany?: postMediaCreateManyPostMedia_rsInputEnvelope
    set?: Enumerable<postMediaWhereUniqueInput>
    disconnect?: Enumerable<postMediaWhereUniqueInput>
    delete?: Enumerable<postMediaWhereUniqueInput>
    connect?: Enumerable<postMediaWhereUniqueInput>
    update?: Enumerable<postMediaUpdateWithWhereUniqueWithoutPostMedia_rsInput>
    updateMany?: Enumerable<postMediaUpdateManyWithWhereWithoutPostMedia_rsInput>
    deleteMany?: Enumerable<postMediaScalarWhereInput>
  }

  export type postsCreateNestedOneWithoutPostMedia_rsInput = {
    create?: XOR<postsCreateWithoutPostMedia_rsInput, postsUncheckedCreateWithoutPostMedia_rsInput>
    connectOrCreate?: postsCreateOrConnectWithoutPostMedia_rsInput
    connect?: postsWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type postsUpdateOneRequiredWithoutPostMedia_rsNestedInput = {
    create?: XOR<postsCreateWithoutPostMedia_rsInput, postsUncheckedCreateWithoutPostMedia_rsInput>
    connectOrCreate?: postsCreateOrConnectWithoutPostMedia_rsInput
    upsert?: postsUpsertWithoutPostMedia_rsInput
    connect?: postsWhereUniqueInput
    update?: XOR<postsUpdateWithoutPostMedia_rsInput, postsUncheckedUpdateWithoutPostMedia_rsInput>
  }

  export type postsCreateNestedManyWithoutUserpost_rsInput = {
    create?: XOR<Enumerable<postsCreateWithoutUserpost_rsInput>, Enumerable<postsUncheckedCreateWithoutUserpost_rsInput>>
    connectOrCreate?: Enumerable<postsCreateOrConnectWithoutUserpost_rsInput>
    createMany?: postsCreateManyUserpost_rsInputEnvelope
    connect?: Enumerable<postsWhereUniqueInput>
  }

  export type studentsCreateNestedManyWithoutStudentEmail_user_rsInput = {
    create?: XOR<Enumerable<studentsCreateWithoutStudentEmail_user_rsInput>, Enumerable<studentsUncheckedCreateWithoutStudentEmail_user_rsInput>>
    connectOrCreate?: Enumerable<studentsCreateOrConnectWithoutStudentEmail_user_rsInput>
    createMany?: studentsCreateManyStudentEmail_user_rsInputEnvelope
    connect?: Enumerable<studentsWhereUniqueInput>
  }

  export type postsUncheckedCreateNestedManyWithoutUserpost_rsInput = {
    create?: XOR<Enumerable<postsCreateWithoutUserpost_rsInput>, Enumerable<postsUncheckedCreateWithoutUserpost_rsInput>>
    connectOrCreate?: Enumerable<postsCreateOrConnectWithoutUserpost_rsInput>
    createMany?: postsCreateManyUserpost_rsInputEnvelope
    connect?: Enumerable<postsWhereUniqueInput>
  }

  export type studentsUncheckedCreateNestedManyWithoutStudentEmail_user_rsInput = {
    create?: XOR<Enumerable<studentsCreateWithoutStudentEmail_user_rsInput>, Enumerable<studentsUncheckedCreateWithoutStudentEmail_user_rsInput>>
    connectOrCreate?: Enumerable<studentsCreateOrConnectWithoutStudentEmail_user_rsInput>
    createMany?: studentsCreateManyStudentEmail_user_rsInputEnvelope
    connect?: Enumerable<studentsWhereUniqueInput>
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type postsUpdateManyWithoutUserpost_rsNestedInput = {
    create?: XOR<Enumerable<postsCreateWithoutUserpost_rsInput>, Enumerable<postsUncheckedCreateWithoutUserpost_rsInput>>
    connectOrCreate?: Enumerable<postsCreateOrConnectWithoutUserpost_rsInput>
    upsert?: Enumerable<postsUpsertWithWhereUniqueWithoutUserpost_rsInput>
    createMany?: postsCreateManyUserpost_rsInputEnvelope
    set?: Enumerable<postsWhereUniqueInput>
    disconnect?: Enumerable<postsWhereUniqueInput>
    delete?: Enumerable<postsWhereUniqueInput>
    connect?: Enumerable<postsWhereUniqueInput>
    update?: Enumerable<postsUpdateWithWhereUniqueWithoutUserpost_rsInput>
    updateMany?: Enumerable<postsUpdateManyWithWhereWithoutUserpost_rsInput>
    deleteMany?: Enumerable<postsScalarWhereInput>
  }

  export type studentsUpdateManyWithoutStudentEmail_user_rsNestedInput = {
    create?: XOR<Enumerable<studentsCreateWithoutStudentEmail_user_rsInput>, Enumerable<studentsUncheckedCreateWithoutStudentEmail_user_rsInput>>
    connectOrCreate?: Enumerable<studentsCreateOrConnectWithoutStudentEmail_user_rsInput>
    upsert?: Enumerable<studentsUpsertWithWhereUniqueWithoutStudentEmail_user_rsInput>
    createMany?: studentsCreateManyStudentEmail_user_rsInputEnvelope
    set?: Enumerable<studentsWhereUniqueInput>
    disconnect?: Enumerable<studentsWhereUniqueInput>
    delete?: Enumerable<studentsWhereUniqueInput>
    connect?: Enumerable<studentsWhereUniqueInput>
    update?: Enumerable<studentsUpdateWithWhereUniqueWithoutStudentEmail_user_rsInput>
    updateMany?: Enumerable<studentsUpdateManyWithWhereWithoutStudentEmail_user_rsInput>
    deleteMany?: Enumerable<studentsScalarWhereInput>
  }

  export type postsUncheckedUpdateManyWithoutUserpost_rsNestedInput = {
    create?: XOR<Enumerable<postsCreateWithoutUserpost_rsInput>, Enumerable<postsUncheckedCreateWithoutUserpost_rsInput>>
    connectOrCreate?: Enumerable<postsCreateOrConnectWithoutUserpost_rsInput>
    upsert?: Enumerable<postsUpsertWithWhereUniqueWithoutUserpost_rsInput>
    createMany?: postsCreateManyUserpost_rsInputEnvelope
    set?: Enumerable<postsWhereUniqueInput>
    disconnect?: Enumerable<postsWhereUniqueInput>
    delete?: Enumerable<postsWhereUniqueInput>
    connect?: Enumerable<postsWhereUniqueInput>
    update?: Enumerable<postsUpdateWithWhereUniqueWithoutUserpost_rsInput>
    updateMany?: Enumerable<postsUpdateManyWithWhereWithoutUserpost_rsInput>
    deleteMany?: Enumerable<postsScalarWhereInput>
  }

  export type studentsUncheckedUpdateManyWithoutStudentEmail_user_rsNestedInput = {
    create?: XOR<Enumerable<studentsCreateWithoutStudentEmail_user_rsInput>, Enumerable<studentsUncheckedCreateWithoutStudentEmail_user_rsInput>>
    connectOrCreate?: Enumerable<studentsCreateOrConnectWithoutStudentEmail_user_rsInput>
    upsert?: Enumerable<studentsUpsertWithWhereUniqueWithoutStudentEmail_user_rsInput>
    createMany?: studentsCreateManyStudentEmail_user_rsInputEnvelope
    set?: Enumerable<studentsWhereUniqueInput>
    disconnect?: Enumerable<studentsWhereUniqueInput>
    delete?: Enumerable<studentsWhereUniqueInput>
    connect?: Enumerable<studentsWhereUniqueInput>
    update?: Enumerable<studentsUpdateWithWhereUniqueWithoutStudentEmail_user_rsInput>
    updateMany?: Enumerable<studentsUpdateManyWithWhereWithoutStudentEmail_user_rsInput>
    deleteMany?: Enumerable<studentsScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutStudentEmail_user_rsInput = {
    create?: XOR<usersCreateWithoutStudentEmail_user_rsInput, usersUncheckedCreateWithoutStudentEmail_user_rsInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudentEmail_user_rsInput
    connect?: usersWhereUniqueInput
  }

  export type studentMasteriesCreateNestedManyWithoutStudent_Masteries_rsInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudent_Masteries_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudent_Masteries_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudent_Masteries_rsInput>
    createMany?: studentMasteriesCreateManyStudent_Masteries_rsInputEnvelope
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
  }

  export type studentAttemptsCreateNestedManyWithoutStudents_studentAttempt_rsInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutStudents_studentAttempt_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutStudents_studentAttempt_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutStudents_studentAttempt_rsInput>
    createMany?: studentAttemptsCreateManyStudents_studentAttempt_rsInputEnvelope
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
  }

  export type studentMasteriesUncheckedCreateNestedManyWithoutStudent_Masteries_rsInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudent_Masteries_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudent_Masteries_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudent_Masteries_rsInput>
    createMany?: studentMasteriesCreateManyStudent_Masteries_rsInputEnvelope
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
  }

  export type studentAttemptsUncheckedCreateNestedManyWithoutStudents_studentAttempt_rsInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutStudents_studentAttempt_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutStudents_studentAttempt_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutStudents_studentAttempt_rsInput>
    createMany?: studentAttemptsCreateManyStudents_studentAttempt_rsInputEnvelope
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutStudentEmail_user_rsNestedInput = {
    create?: XOR<usersCreateWithoutStudentEmail_user_rsInput, usersUncheckedCreateWithoutStudentEmail_user_rsInput>
    connectOrCreate?: usersCreateOrConnectWithoutStudentEmail_user_rsInput
    upsert?: usersUpsertWithoutStudentEmail_user_rsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutStudentEmail_user_rsInput, usersUncheckedUpdateWithoutStudentEmail_user_rsInput>
  }

  export type studentMasteriesUpdateManyWithoutStudent_Masteries_rsNestedInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudent_Masteries_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudent_Masteries_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudent_Masteries_rsInput>
    upsert?: Enumerable<studentMasteriesUpsertWithWhereUniqueWithoutStudent_Masteries_rsInput>
    createMany?: studentMasteriesCreateManyStudent_Masteries_rsInputEnvelope
    set?: Enumerable<studentMasteriesWhereUniqueInput>
    disconnect?: Enumerable<studentMasteriesWhereUniqueInput>
    delete?: Enumerable<studentMasteriesWhereUniqueInput>
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
    update?: Enumerable<studentMasteriesUpdateWithWhereUniqueWithoutStudent_Masteries_rsInput>
    updateMany?: Enumerable<studentMasteriesUpdateManyWithWhereWithoutStudent_Masteries_rsInput>
    deleteMany?: Enumerable<studentMasteriesScalarWhereInput>
  }

  export type studentAttemptsUpdateManyWithoutStudents_studentAttempt_rsNestedInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutStudents_studentAttempt_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutStudents_studentAttempt_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutStudents_studentAttempt_rsInput>
    upsert?: Enumerable<studentAttemptsUpsertWithWhereUniqueWithoutStudents_studentAttempt_rsInput>
    createMany?: studentAttemptsCreateManyStudents_studentAttempt_rsInputEnvelope
    set?: Enumerable<studentAttemptsWhereUniqueInput>
    disconnect?: Enumerable<studentAttemptsWhereUniqueInput>
    delete?: Enumerable<studentAttemptsWhereUniqueInput>
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
    update?: Enumerable<studentAttemptsUpdateWithWhereUniqueWithoutStudents_studentAttempt_rsInput>
    updateMany?: Enumerable<studentAttemptsUpdateManyWithWhereWithoutStudents_studentAttempt_rsInput>
    deleteMany?: Enumerable<studentAttemptsScalarWhereInput>
  }

  export type studentMasteriesUncheckedUpdateManyWithoutStudent_Masteries_rsNestedInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudent_Masteries_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudent_Masteries_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudent_Masteries_rsInput>
    upsert?: Enumerable<studentMasteriesUpsertWithWhereUniqueWithoutStudent_Masteries_rsInput>
    createMany?: studentMasteriesCreateManyStudent_Masteries_rsInputEnvelope
    set?: Enumerable<studentMasteriesWhereUniqueInput>
    disconnect?: Enumerable<studentMasteriesWhereUniqueInput>
    delete?: Enumerable<studentMasteriesWhereUniqueInput>
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
    update?: Enumerable<studentMasteriesUpdateWithWhereUniqueWithoutStudent_Masteries_rsInput>
    updateMany?: Enumerable<studentMasteriesUpdateManyWithWhereWithoutStudent_Masteries_rsInput>
    deleteMany?: Enumerable<studentMasteriesScalarWhereInput>
  }

  export type studentAttemptsUncheckedUpdateManyWithoutStudents_studentAttempt_rsNestedInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutStudents_studentAttempt_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutStudents_studentAttempt_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutStudents_studentAttempt_rsInput>
    upsert?: Enumerable<studentAttemptsUpsertWithWhereUniqueWithoutStudents_studentAttempt_rsInput>
    createMany?: studentAttemptsCreateManyStudents_studentAttempt_rsInputEnvelope
    set?: Enumerable<studentAttemptsWhereUniqueInput>
    disconnect?: Enumerable<studentAttemptsWhereUniqueInput>
    delete?: Enumerable<studentAttemptsWhereUniqueInput>
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
    update?: Enumerable<studentAttemptsUpdateWithWhereUniqueWithoutStudents_studentAttempt_rsInput>
    updateMany?: Enumerable<studentAttemptsUpdateManyWithWhereWithoutStudents_studentAttempt_rsInput>
    deleteMany?: Enumerable<studentAttemptsScalarWhereInput>
  }

  export type studentsCreateNestedOneWithoutStudents_studentAttempt_rsInput = {
    create?: XOR<studentsCreateWithoutStudents_studentAttempt_rsInput, studentsUncheckedCreateWithoutStudents_studentAttempt_rsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutStudents_studentAttempt_rsInput
    connect?: studentsWhereUniqueInput
  }

  export type questionsCreateNestedOneWithoutQuestionAttemptID_rsInput = {
    create?: XOR<questionsCreateWithoutQuestionAttemptID_rsInput, questionsUncheckedCreateWithoutQuestionAttemptID_rsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuestionAttemptID_rsInput
    connect?: questionsWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type studentsUpdateOneRequiredWithoutStudents_studentAttempt_rsNestedInput = {
    create?: XOR<studentsCreateWithoutStudents_studentAttempt_rsInput, studentsUncheckedCreateWithoutStudents_studentAttempt_rsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutStudents_studentAttempt_rsInput
    upsert?: studentsUpsertWithoutStudents_studentAttempt_rsInput
    connect?: studentsWhereUniqueInput
    update?: XOR<studentsUpdateWithoutStudents_studentAttempt_rsInput, studentsUncheckedUpdateWithoutStudents_studentAttempt_rsInput>
  }

  export type questionsUpdateOneRequiredWithoutQuestionAttemptID_rsNestedInput = {
    create?: XOR<questionsCreateWithoutQuestionAttemptID_rsInput, questionsUncheckedCreateWithoutQuestionAttemptID_rsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuestionAttemptID_rsInput
    upsert?: questionsUpsertWithoutQuestionAttemptID_rsInput
    connect?: questionsWhereUniqueInput
    update?: XOR<questionsUpdateWithoutQuestionAttemptID_rsInput, questionsUncheckedUpdateWithoutQuestionAttemptID_rsInput>
  }

  export type topicsCreateNestedOneWithoutStudentMasteriesTopic_rsInput = {
    create?: XOR<topicsCreateWithoutStudentMasteriesTopic_rsInput, topicsUncheckedCreateWithoutStudentMasteriesTopic_rsInput>
    connectOrCreate?: topicsCreateOrConnectWithoutStudentMasteriesTopic_rsInput
    connect?: topicsWhereUniqueInput
  }

  export type studentsCreateNestedOneWithoutStudent_Masteries_rsInput = {
    create?: XOR<studentsCreateWithoutStudent_Masteries_rsInput, studentsUncheckedCreateWithoutStudent_Masteries_rsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutStudent_Masteries_rsInput
    connect?: studentsWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type topicsUpdateOneRequiredWithoutStudentMasteriesTopic_rsNestedInput = {
    create?: XOR<topicsCreateWithoutStudentMasteriesTopic_rsInput, topicsUncheckedCreateWithoutStudentMasteriesTopic_rsInput>
    connectOrCreate?: topicsCreateOrConnectWithoutStudentMasteriesTopic_rsInput
    upsert?: topicsUpsertWithoutStudentMasteriesTopic_rsInput
    connect?: topicsWhereUniqueInput
    update?: XOR<topicsUpdateWithoutStudentMasteriesTopic_rsInput, topicsUncheckedUpdateWithoutStudentMasteriesTopic_rsInput>
  }

  export type studentsUpdateOneRequiredWithoutStudent_Masteries_rsNestedInput = {
    create?: XOR<studentsCreateWithoutStudent_Masteries_rsInput, studentsUncheckedCreateWithoutStudent_Masteries_rsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutStudent_Masteries_rsInput
    upsert?: studentsUpsertWithoutStudent_Masteries_rsInput
    connect?: studentsWhereUniqueInput
    update?: XOR<studentsUpdateWithoutStudent_Masteries_rsInput, studentsUncheckedUpdateWithoutStudent_Masteries_rsInput>
  }

  export type questionsCreateNestedManyWithoutTopicID_rsInput = {
    create?: XOR<Enumerable<questionsCreateWithoutTopicID_rsInput>, Enumerable<questionsUncheckedCreateWithoutTopicID_rsInput>>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutTopicID_rsInput>
    createMany?: questionsCreateManyTopicID_rsInputEnvelope
    connect?: Enumerable<questionsWhereUniqueInput>
  }

  export type studentMasteriesCreateNestedManyWithoutStudentMasteriesTopic_rsInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudentMasteriesTopic_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudentMasteriesTopic_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudentMasteriesTopic_rsInput>
    createMany?: studentMasteriesCreateManyStudentMasteriesTopic_rsInputEnvelope
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
  }

  export type questionsUncheckedCreateNestedManyWithoutTopicID_rsInput = {
    create?: XOR<Enumerable<questionsCreateWithoutTopicID_rsInput>, Enumerable<questionsUncheckedCreateWithoutTopicID_rsInput>>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutTopicID_rsInput>
    createMany?: questionsCreateManyTopicID_rsInputEnvelope
    connect?: Enumerable<questionsWhereUniqueInput>
  }

  export type studentMasteriesUncheckedCreateNestedManyWithoutStudentMasteriesTopic_rsInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudentMasteriesTopic_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudentMasteriesTopic_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudentMasteriesTopic_rsInput>
    createMany?: studentMasteriesCreateManyStudentMasteriesTopic_rsInputEnvelope
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
  }

  export type questionsUpdateManyWithoutTopicID_rsNestedInput = {
    create?: XOR<Enumerable<questionsCreateWithoutTopicID_rsInput>, Enumerable<questionsUncheckedCreateWithoutTopicID_rsInput>>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutTopicID_rsInput>
    upsert?: Enumerable<questionsUpsertWithWhereUniqueWithoutTopicID_rsInput>
    createMany?: questionsCreateManyTopicID_rsInputEnvelope
    set?: Enumerable<questionsWhereUniqueInput>
    disconnect?: Enumerable<questionsWhereUniqueInput>
    delete?: Enumerable<questionsWhereUniqueInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    update?: Enumerable<questionsUpdateWithWhereUniqueWithoutTopicID_rsInput>
    updateMany?: Enumerable<questionsUpdateManyWithWhereWithoutTopicID_rsInput>
    deleteMany?: Enumerable<questionsScalarWhereInput>
  }

  export type studentMasteriesUpdateManyWithoutStudentMasteriesTopic_rsNestedInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudentMasteriesTopic_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudentMasteriesTopic_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudentMasteriesTopic_rsInput>
    upsert?: Enumerable<studentMasteriesUpsertWithWhereUniqueWithoutStudentMasteriesTopic_rsInput>
    createMany?: studentMasteriesCreateManyStudentMasteriesTopic_rsInputEnvelope
    set?: Enumerable<studentMasteriesWhereUniqueInput>
    disconnect?: Enumerable<studentMasteriesWhereUniqueInput>
    delete?: Enumerable<studentMasteriesWhereUniqueInput>
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
    update?: Enumerable<studentMasteriesUpdateWithWhereUniqueWithoutStudentMasteriesTopic_rsInput>
    updateMany?: Enumerable<studentMasteriesUpdateManyWithWhereWithoutStudentMasteriesTopic_rsInput>
    deleteMany?: Enumerable<studentMasteriesScalarWhereInput>
  }

  export type questionsUncheckedUpdateManyWithoutTopicID_rsNestedInput = {
    create?: XOR<Enumerable<questionsCreateWithoutTopicID_rsInput>, Enumerable<questionsUncheckedCreateWithoutTopicID_rsInput>>
    connectOrCreate?: Enumerable<questionsCreateOrConnectWithoutTopicID_rsInput>
    upsert?: Enumerable<questionsUpsertWithWhereUniqueWithoutTopicID_rsInput>
    createMany?: questionsCreateManyTopicID_rsInputEnvelope
    set?: Enumerable<questionsWhereUniqueInput>
    disconnect?: Enumerable<questionsWhereUniqueInput>
    delete?: Enumerable<questionsWhereUniqueInput>
    connect?: Enumerable<questionsWhereUniqueInput>
    update?: Enumerable<questionsUpdateWithWhereUniqueWithoutTopicID_rsInput>
    updateMany?: Enumerable<questionsUpdateManyWithWhereWithoutTopicID_rsInput>
    deleteMany?: Enumerable<questionsScalarWhereInput>
  }

  export type studentMasteriesUncheckedUpdateManyWithoutStudentMasteriesTopic_rsNestedInput = {
    create?: XOR<Enumerable<studentMasteriesCreateWithoutStudentMasteriesTopic_rsInput>, Enumerable<studentMasteriesUncheckedCreateWithoutStudentMasteriesTopic_rsInput>>
    connectOrCreate?: Enumerable<studentMasteriesCreateOrConnectWithoutStudentMasteriesTopic_rsInput>
    upsert?: Enumerable<studentMasteriesUpsertWithWhereUniqueWithoutStudentMasteriesTopic_rsInput>
    createMany?: studentMasteriesCreateManyStudentMasteriesTopic_rsInputEnvelope
    set?: Enumerable<studentMasteriesWhereUniqueInput>
    disconnect?: Enumerable<studentMasteriesWhereUniqueInput>
    delete?: Enumerable<studentMasteriesWhereUniqueInput>
    connect?: Enumerable<studentMasteriesWhereUniqueInput>
    update?: Enumerable<studentMasteriesUpdateWithWhereUniqueWithoutStudentMasteriesTopic_rsInput>
    updateMany?: Enumerable<studentMasteriesUpdateManyWithWhereWithoutStudentMasteriesTopic_rsInput>
    deleteMany?: Enumerable<studentMasteriesScalarWhereInput>
  }

  export type topicsCreateNestedOneWithoutTopicID_rsInput = {
    create?: XOR<topicsCreateWithoutTopicID_rsInput, topicsUncheckedCreateWithoutTopicID_rsInput>
    connectOrCreate?: topicsCreateOrConnectWithoutTopicID_rsInput
    connect?: topicsWhereUniqueInput
  }

  export type studentAttemptsCreateNestedManyWithoutQuestionAttemptID_rsInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutQuestionAttemptID_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutQuestionAttemptID_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutQuestionAttemptID_rsInput>
    createMany?: studentAttemptsCreateManyQuestionAttemptID_rsInputEnvelope
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
  }

  export type questionMediaCreateNestedManyWithoutQuestionMediaID_rsInput = {
    create?: XOR<Enumerable<questionMediaCreateWithoutQuestionMediaID_rsInput>, Enumerable<questionMediaUncheckedCreateWithoutQuestionMediaID_rsInput>>
    connectOrCreate?: Enumerable<questionMediaCreateOrConnectWithoutQuestionMediaID_rsInput>
    createMany?: questionMediaCreateManyQuestionMediaID_rsInputEnvelope
    connect?: Enumerable<questionMediaWhereUniqueInput>
  }

  export type answerCreateNestedManyWithoutQuestionAnswerID_rsInput = {
    create?: XOR<Enumerable<answerCreateWithoutQuestionAnswerID_rsInput>, Enumerable<answerUncheckedCreateWithoutQuestionAnswerID_rsInput>>
    connectOrCreate?: Enumerable<answerCreateOrConnectWithoutQuestionAnswerID_rsInput>
    createMany?: answerCreateManyQuestionAnswerID_rsInputEnvelope
    connect?: Enumerable<answerWhereUniqueInput>
  }

  export type studentAttemptsUncheckedCreateNestedManyWithoutQuestionAttemptID_rsInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutQuestionAttemptID_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutQuestionAttemptID_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutQuestionAttemptID_rsInput>
    createMany?: studentAttemptsCreateManyQuestionAttemptID_rsInputEnvelope
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
  }

  export type questionMediaUncheckedCreateNestedManyWithoutQuestionMediaID_rsInput = {
    create?: XOR<Enumerable<questionMediaCreateWithoutQuestionMediaID_rsInput>, Enumerable<questionMediaUncheckedCreateWithoutQuestionMediaID_rsInput>>
    connectOrCreate?: Enumerable<questionMediaCreateOrConnectWithoutQuestionMediaID_rsInput>
    createMany?: questionMediaCreateManyQuestionMediaID_rsInputEnvelope
    connect?: Enumerable<questionMediaWhereUniqueInput>
  }

  export type answerUncheckedCreateNestedManyWithoutQuestionAnswerID_rsInput = {
    create?: XOR<Enumerable<answerCreateWithoutQuestionAnswerID_rsInput>, Enumerable<answerUncheckedCreateWithoutQuestionAnswerID_rsInput>>
    connectOrCreate?: Enumerable<answerCreateOrConnectWithoutQuestionAnswerID_rsInput>
    createMany?: answerCreateManyQuestionAnswerID_rsInputEnvelope
    connect?: Enumerable<answerWhereUniqueInput>
  }

  export type topicsUpdateOneRequiredWithoutTopicID_rsNestedInput = {
    create?: XOR<topicsCreateWithoutTopicID_rsInput, topicsUncheckedCreateWithoutTopicID_rsInput>
    connectOrCreate?: topicsCreateOrConnectWithoutTopicID_rsInput
    upsert?: topicsUpsertWithoutTopicID_rsInput
    connect?: topicsWhereUniqueInput
    update?: XOR<topicsUpdateWithoutTopicID_rsInput, topicsUncheckedUpdateWithoutTopicID_rsInput>
  }

  export type studentAttemptsUpdateManyWithoutQuestionAttemptID_rsNestedInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutQuestionAttemptID_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutQuestionAttemptID_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutQuestionAttemptID_rsInput>
    upsert?: Enumerable<studentAttemptsUpsertWithWhereUniqueWithoutQuestionAttemptID_rsInput>
    createMany?: studentAttemptsCreateManyQuestionAttemptID_rsInputEnvelope
    set?: Enumerable<studentAttemptsWhereUniqueInput>
    disconnect?: Enumerable<studentAttemptsWhereUniqueInput>
    delete?: Enumerable<studentAttemptsWhereUniqueInput>
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
    update?: Enumerable<studentAttemptsUpdateWithWhereUniqueWithoutQuestionAttemptID_rsInput>
    updateMany?: Enumerable<studentAttemptsUpdateManyWithWhereWithoutQuestionAttemptID_rsInput>
    deleteMany?: Enumerable<studentAttemptsScalarWhereInput>
  }

  export type questionMediaUpdateManyWithoutQuestionMediaID_rsNestedInput = {
    create?: XOR<Enumerable<questionMediaCreateWithoutQuestionMediaID_rsInput>, Enumerable<questionMediaUncheckedCreateWithoutQuestionMediaID_rsInput>>
    connectOrCreate?: Enumerable<questionMediaCreateOrConnectWithoutQuestionMediaID_rsInput>
    upsert?: Enumerable<questionMediaUpsertWithWhereUniqueWithoutQuestionMediaID_rsInput>
    createMany?: questionMediaCreateManyQuestionMediaID_rsInputEnvelope
    set?: Enumerable<questionMediaWhereUniqueInput>
    disconnect?: Enumerable<questionMediaWhereUniqueInput>
    delete?: Enumerable<questionMediaWhereUniqueInput>
    connect?: Enumerable<questionMediaWhereUniqueInput>
    update?: Enumerable<questionMediaUpdateWithWhereUniqueWithoutQuestionMediaID_rsInput>
    updateMany?: Enumerable<questionMediaUpdateManyWithWhereWithoutQuestionMediaID_rsInput>
    deleteMany?: Enumerable<questionMediaScalarWhereInput>
  }

  export type answerUpdateManyWithoutQuestionAnswerID_rsNestedInput = {
    create?: XOR<Enumerable<answerCreateWithoutQuestionAnswerID_rsInput>, Enumerable<answerUncheckedCreateWithoutQuestionAnswerID_rsInput>>
    connectOrCreate?: Enumerable<answerCreateOrConnectWithoutQuestionAnswerID_rsInput>
    upsert?: Enumerable<answerUpsertWithWhereUniqueWithoutQuestionAnswerID_rsInput>
    createMany?: answerCreateManyQuestionAnswerID_rsInputEnvelope
    set?: Enumerable<answerWhereUniqueInput>
    disconnect?: Enumerable<answerWhereUniqueInput>
    delete?: Enumerable<answerWhereUniqueInput>
    connect?: Enumerable<answerWhereUniqueInput>
    update?: Enumerable<answerUpdateWithWhereUniqueWithoutQuestionAnswerID_rsInput>
    updateMany?: Enumerable<answerUpdateManyWithWhereWithoutQuestionAnswerID_rsInput>
    deleteMany?: Enumerable<answerScalarWhereInput>
  }

  export type studentAttemptsUncheckedUpdateManyWithoutQuestionAttemptID_rsNestedInput = {
    create?: XOR<Enumerable<studentAttemptsCreateWithoutQuestionAttemptID_rsInput>, Enumerable<studentAttemptsUncheckedCreateWithoutQuestionAttemptID_rsInput>>
    connectOrCreate?: Enumerable<studentAttemptsCreateOrConnectWithoutQuestionAttemptID_rsInput>
    upsert?: Enumerable<studentAttemptsUpsertWithWhereUniqueWithoutQuestionAttemptID_rsInput>
    createMany?: studentAttemptsCreateManyQuestionAttemptID_rsInputEnvelope
    set?: Enumerable<studentAttemptsWhereUniqueInput>
    disconnect?: Enumerable<studentAttemptsWhereUniqueInput>
    delete?: Enumerable<studentAttemptsWhereUniqueInput>
    connect?: Enumerable<studentAttemptsWhereUniqueInput>
    update?: Enumerable<studentAttemptsUpdateWithWhereUniqueWithoutQuestionAttemptID_rsInput>
    updateMany?: Enumerable<studentAttemptsUpdateManyWithWhereWithoutQuestionAttemptID_rsInput>
    deleteMany?: Enumerable<studentAttemptsScalarWhereInput>
  }

  export type questionMediaUncheckedUpdateManyWithoutQuestionMediaID_rsNestedInput = {
    create?: XOR<Enumerable<questionMediaCreateWithoutQuestionMediaID_rsInput>, Enumerable<questionMediaUncheckedCreateWithoutQuestionMediaID_rsInput>>
    connectOrCreate?: Enumerable<questionMediaCreateOrConnectWithoutQuestionMediaID_rsInput>
    upsert?: Enumerable<questionMediaUpsertWithWhereUniqueWithoutQuestionMediaID_rsInput>
    createMany?: questionMediaCreateManyQuestionMediaID_rsInputEnvelope
    set?: Enumerable<questionMediaWhereUniqueInput>
    disconnect?: Enumerable<questionMediaWhereUniqueInput>
    delete?: Enumerable<questionMediaWhereUniqueInput>
    connect?: Enumerable<questionMediaWhereUniqueInput>
    update?: Enumerable<questionMediaUpdateWithWhereUniqueWithoutQuestionMediaID_rsInput>
    updateMany?: Enumerable<questionMediaUpdateManyWithWhereWithoutQuestionMediaID_rsInput>
    deleteMany?: Enumerable<questionMediaScalarWhereInput>
  }

  export type answerUncheckedUpdateManyWithoutQuestionAnswerID_rsNestedInput = {
    create?: XOR<Enumerable<answerCreateWithoutQuestionAnswerID_rsInput>, Enumerable<answerUncheckedCreateWithoutQuestionAnswerID_rsInput>>
    connectOrCreate?: Enumerable<answerCreateOrConnectWithoutQuestionAnswerID_rsInput>
    upsert?: Enumerable<answerUpsertWithWhereUniqueWithoutQuestionAnswerID_rsInput>
    createMany?: answerCreateManyQuestionAnswerID_rsInputEnvelope
    set?: Enumerable<answerWhereUniqueInput>
    disconnect?: Enumerable<answerWhereUniqueInput>
    delete?: Enumerable<answerWhereUniqueInput>
    connect?: Enumerable<answerWhereUniqueInput>
    update?: Enumerable<answerUpdateWithWhereUniqueWithoutQuestionAnswerID_rsInput>
    updateMany?: Enumerable<answerUpdateManyWithWhereWithoutQuestionAnswerID_rsInput>
    deleteMany?: Enumerable<answerScalarWhereInput>
  }

  export type questionsCreateNestedOneWithoutQuestionMediaID_rsInput = {
    create?: XOR<questionsCreateWithoutQuestionMediaID_rsInput, questionsUncheckedCreateWithoutQuestionMediaID_rsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuestionMediaID_rsInput
    connect?: questionsWhereUniqueInput
  }

  export type questionsUpdateOneRequiredWithoutQuestionMediaID_rsNestedInput = {
    create?: XOR<questionsCreateWithoutQuestionMediaID_rsInput, questionsUncheckedCreateWithoutQuestionMediaID_rsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuestionMediaID_rsInput
    upsert?: questionsUpsertWithoutQuestionMediaID_rsInput
    connect?: questionsWhereUniqueInput
    update?: XOR<questionsUpdateWithoutQuestionMediaID_rsInput, questionsUncheckedUpdateWithoutQuestionMediaID_rsInput>
  }

  export type questionsCreateNestedOneWithoutQuestionAnswerID_rsInput = {
    create?: XOR<questionsCreateWithoutQuestionAnswerID_rsInput, questionsUncheckedCreateWithoutQuestionAnswerID_rsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuestionAnswerID_rsInput
    connect?: questionsWhereUniqueInput
  }

  export type questionsUpdateOneRequiredWithoutQuestionAnswerID_rsNestedInput = {
    create?: XOR<questionsCreateWithoutQuestionAnswerID_rsInput, questionsUncheckedCreateWithoutQuestionAnswerID_rsInput>
    connectOrCreate?: questionsCreateOrConnectWithoutQuestionAnswerID_rsInput
    upsert?: questionsUpsertWithoutQuestionAnswerID_rsInput
    connect?: questionsWhereUniqueInput
    update?: XOR<questionsUpdateWithoutQuestionAnswerID_rsInput, questionsUncheckedUpdateWithoutQuestionAnswerID_rsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type usersCreateWithoutPostemail_rsInput = {
    email: string
    password: string
    name: string
    dpURL?: string | null
    role: Role
    studentEmail_user_rs?: studentsCreateNestedManyWithoutStudentEmail_user_rsInput
  }

  export type usersUncheckedCreateWithoutPostemail_rsInput = {
    email: string
    password: string
    name: string
    dpURL?: string | null
    role: Role
    studentEmail_user_rs?: studentsUncheckedCreateNestedManyWithoutStudentEmail_user_rsInput
  }

  export type usersCreateOrConnectWithoutPostemail_rsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPostemail_rsInput, usersUncheckedCreateWithoutPostemail_rsInput>
  }

  export type postMediaCreateWithoutPostMedia_rsInput = {
    postMediaURL?: string | null
  }

  export type postMediaUncheckedCreateWithoutPostMedia_rsInput = {
    postMediaURL?: string | null
  }

  export type postMediaCreateOrConnectWithoutPostMedia_rsInput = {
    where: postMediaWhereUniqueInput
    create: XOR<postMediaCreateWithoutPostMedia_rsInput, postMediaUncheckedCreateWithoutPostMedia_rsInput>
  }

  export type postMediaCreateManyPostMedia_rsInputEnvelope = {
    data: Enumerable<postMediaCreateManyPostMedia_rsInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutPostemail_rsInput = {
    update: XOR<usersUpdateWithoutPostemail_rsInput, usersUncheckedUpdateWithoutPostemail_rsInput>
    create: XOR<usersCreateWithoutPostemail_rsInput, usersUncheckedCreateWithoutPostemail_rsInput>
  }

  export type usersUpdateWithoutPostemail_rsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    studentEmail_user_rs?: studentsUpdateManyWithoutStudentEmail_user_rsNestedInput
  }

  export type usersUncheckedUpdateWithoutPostemail_rsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    studentEmail_user_rs?: studentsUncheckedUpdateManyWithoutStudentEmail_user_rsNestedInput
  }

  export type postMediaUpsertWithWhereUniqueWithoutPostMedia_rsInput = {
    where: postMediaWhereUniqueInput
    update: XOR<postMediaUpdateWithoutPostMedia_rsInput, postMediaUncheckedUpdateWithoutPostMedia_rsInput>
    create: XOR<postMediaCreateWithoutPostMedia_rsInput, postMediaUncheckedCreateWithoutPostMedia_rsInput>
  }

  export type postMediaUpdateWithWhereUniqueWithoutPostMedia_rsInput = {
    where: postMediaWhereUniqueInput
    data: XOR<postMediaUpdateWithoutPostMedia_rsInput, postMediaUncheckedUpdateWithoutPostMedia_rsInput>
  }

  export type postMediaUpdateManyWithWhereWithoutPostMedia_rsInput = {
    where: postMediaScalarWhereInput
    data: XOR<postMediaUpdateManyMutationInput, postMediaUncheckedUpdateManyWithoutPostMedia_rsInput>
  }

  export type postMediaScalarWhereInput = {
    AND?: Enumerable<postMediaScalarWhereInput>
    OR?: Enumerable<postMediaScalarWhereInput>
    NOT?: Enumerable<postMediaScalarWhereInput>
    postID?: StringFilter | string
    postMediaURL?: StringNullableFilter | string | null
  }

  export type postsCreateWithoutPostMedia_rsInput = {
    postID?: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userpost_rs: usersCreateNestedOneWithoutPostemail_rsInput
  }

  export type postsUncheckedCreateWithoutPostMedia_rsInput = {
    postID?: string
    email: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type postsCreateOrConnectWithoutPostMedia_rsInput = {
    where: postsWhereUniqueInput
    create: XOR<postsCreateWithoutPostMedia_rsInput, postsUncheckedCreateWithoutPostMedia_rsInput>
  }

  export type postsUpsertWithoutPostMedia_rsInput = {
    update: XOR<postsUpdateWithoutPostMedia_rsInput, postsUncheckedUpdateWithoutPostMedia_rsInput>
    create: XOR<postsCreateWithoutPostMedia_rsInput, postsUncheckedCreateWithoutPostMedia_rsInput>
  }

  export type postsUpdateWithoutPostMedia_rsInput = {
    postID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userpost_rs?: usersUpdateOneRequiredWithoutPostemail_rsNestedInput
  }

  export type postsUncheckedUpdateWithoutPostMedia_rsInput = {
    postID?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postsCreateWithoutUserpost_rsInput = {
    postID?: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
    postMedia_rs?: postMediaCreateNestedManyWithoutPostMedia_rsInput
  }

  export type postsUncheckedCreateWithoutUserpost_rsInput = {
    postID?: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
    postMedia_rs?: postMediaUncheckedCreateNestedManyWithoutPostMedia_rsInput
  }

  export type postsCreateOrConnectWithoutUserpost_rsInput = {
    where: postsWhereUniqueInput
    create: XOR<postsCreateWithoutUserpost_rsInput, postsUncheckedCreateWithoutUserpost_rsInput>
  }

  export type postsCreateManyUserpost_rsInputEnvelope = {
    data: Enumerable<postsCreateManyUserpost_rsInput>
    skipDuplicates?: boolean
  }

  export type studentsCreateWithoutStudentEmail_user_rsInput = {
    matriculationNumber: string
    student_Masteries_rs?: studentMasteriesCreateNestedManyWithoutStudent_Masteries_rsInput
    students_studentAttempt_rs?: studentAttemptsCreateNestedManyWithoutStudents_studentAttempt_rsInput
  }

  export type studentsUncheckedCreateWithoutStudentEmail_user_rsInput = {
    matriculationNumber: string
    student_Masteries_rs?: studentMasteriesUncheckedCreateNestedManyWithoutStudent_Masteries_rsInput
    students_studentAttempt_rs?: studentAttemptsUncheckedCreateNestedManyWithoutStudents_studentAttempt_rsInput
  }

  export type studentsCreateOrConnectWithoutStudentEmail_user_rsInput = {
    where: studentsWhereUniqueInput
    create: XOR<studentsCreateWithoutStudentEmail_user_rsInput, studentsUncheckedCreateWithoutStudentEmail_user_rsInput>
  }

  export type studentsCreateManyStudentEmail_user_rsInputEnvelope = {
    data: Enumerable<studentsCreateManyStudentEmail_user_rsInput>
    skipDuplicates?: boolean
  }

  export type postsUpsertWithWhereUniqueWithoutUserpost_rsInput = {
    where: postsWhereUniqueInput
    update: XOR<postsUpdateWithoutUserpost_rsInput, postsUncheckedUpdateWithoutUserpost_rsInput>
    create: XOR<postsCreateWithoutUserpost_rsInput, postsUncheckedCreateWithoutUserpost_rsInput>
  }

  export type postsUpdateWithWhereUniqueWithoutUserpost_rsInput = {
    where: postsWhereUniqueInput
    data: XOR<postsUpdateWithoutUserpost_rsInput, postsUncheckedUpdateWithoutUserpost_rsInput>
  }

  export type postsUpdateManyWithWhereWithoutUserpost_rsInput = {
    where: postsScalarWhereInput
    data: XOR<postsUpdateManyMutationInput, postsUncheckedUpdateManyWithoutPostemail_rsInput>
  }

  export type postsScalarWhereInput = {
    AND?: Enumerable<postsScalarWhereInput>
    OR?: Enumerable<postsScalarWhereInput>
    NOT?: Enumerable<postsScalarWhereInput>
    postID?: StringFilter | string
    email?: StringFilter | string
    title?: StringFilter | string
    message?: StringFilter | string
    likes?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type studentsUpsertWithWhereUniqueWithoutStudentEmail_user_rsInput = {
    where: studentsWhereUniqueInput
    update: XOR<studentsUpdateWithoutStudentEmail_user_rsInput, studentsUncheckedUpdateWithoutStudentEmail_user_rsInput>
    create: XOR<studentsCreateWithoutStudentEmail_user_rsInput, studentsUncheckedCreateWithoutStudentEmail_user_rsInput>
  }

  export type studentsUpdateWithWhereUniqueWithoutStudentEmail_user_rsInput = {
    where: studentsWhereUniqueInput
    data: XOR<studentsUpdateWithoutStudentEmail_user_rsInput, studentsUncheckedUpdateWithoutStudentEmail_user_rsInput>
  }

  export type studentsUpdateManyWithWhereWithoutStudentEmail_user_rsInput = {
    where: studentsScalarWhereInput
    data: XOR<studentsUpdateManyMutationInput, studentsUncheckedUpdateManyWithoutStudentEmail_user_rsInput>
  }

  export type studentsScalarWhereInput = {
    AND?: Enumerable<studentsScalarWhereInput>
    OR?: Enumerable<studentsScalarWhereInput>
    NOT?: Enumerable<studentsScalarWhereInput>
    studentEmail?: StringFilter | string
    matriculationNumber?: StringFilter | string
  }

  export type usersCreateWithoutStudentEmail_user_rsInput = {
    email: string
    password: string
    name: string
    dpURL?: string | null
    role: Role
    postemail_rs?: postsCreateNestedManyWithoutUserpost_rsInput
  }

  export type usersUncheckedCreateWithoutStudentEmail_user_rsInput = {
    email: string
    password: string
    name: string
    dpURL?: string | null
    role: Role
    postemail_rs?: postsUncheckedCreateNestedManyWithoutUserpost_rsInput
  }

  export type usersCreateOrConnectWithoutStudentEmail_user_rsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutStudentEmail_user_rsInput, usersUncheckedCreateWithoutStudentEmail_user_rsInput>
  }

  export type studentMasteriesCreateWithoutStudent_Masteries_rsInput = {
    masteryLevel?: number
    courseCompletion?: number
    studentMasteriesTopic_rs?: topicsCreateNestedOneWithoutStudentMasteriesTopic_rsInput
  }

  export type studentMasteriesUncheckedCreateWithoutStudent_Masteries_rsInput = {
    topicID?: string
    masteryLevel?: number
    courseCompletion?: number
  }

  export type studentMasteriesCreateOrConnectWithoutStudent_Masteries_rsInput = {
    where: studentMasteriesWhereUniqueInput
    create: XOR<studentMasteriesCreateWithoutStudent_Masteries_rsInput, studentMasteriesUncheckedCreateWithoutStudent_Masteries_rsInput>
  }

  export type studentMasteriesCreateManyStudent_Masteries_rsInputEnvelope = {
    data: Enumerable<studentMasteriesCreateManyStudent_Masteries_rsInput>
    skipDuplicates?: boolean
  }

  export type studentAttemptsCreateWithoutStudents_studentAttempt_rsInput = {
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
    questionAttemptID_rs: questionsCreateNestedOneWithoutQuestionAttemptID_rsInput
  }

  export type studentAttemptsUncheckedCreateWithoutStudents_studentAttempt_rsInput = {
    questionID: string
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
  }

  export type studentAttemptsCreateOrConnectWithoutStudents_studentAttempt_rsInput = {
    where: studentAttemptsWhereUniqueInput
    create: XOR<studentAttemptsCreateWithoutStudents_studentAttempt_rsInput, studentAttemptsUncheckedCreateWithoutStudents_studentAttempt_rsInput>
  }

  export type studentAttemptsCreateManyStudents_studentAttempt_rsInputEnvelope = {
    data: Enumerable<studentAttemptsCreateManyStudents_studentAttempt_rsInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutStudentEmail_user_rsInput = {
    update: XOR<usersUpdateWithoutStudentEmail_user_rsInput, usersUncheckedUpdateWithoutStudentEmail_user_rsInput>
    create: XOR<usersCreateWithoutStudentEmail_user_rsInput, usersUncheckedCreateWithoutStudentEmail_user_rsInput>
  }

  export type usersUpdateWithoutStudentEmail_user_rsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    postemail_rs?: postsUpdateManyWithoutUserpost_rsNestedInput
  }

  export type usersUncheckedUpdateWithoutStudentEmail_user_rsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dpURL?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    postemail_rs?: postsUncheckedUpdateManyWithoutUserpost_rsNestedInput
  }

  export type studentMasteriesUpsertWithWhereUniqueWithoutStudent_Masteries_rsInput = {
    where: studentMasteriesWhereUniqueInput
    update: XOR<studentMasteriesUpdateWithoutStudent_Masteries_rsInput, studentMasteriesUncheckedUpdateWithoutStudent_Masteries_rsInput>
    create: XOR<studentMasteriesCreateWithoutStudent_Masteries_rsInput, studentMasteriesUncheckedCreateWithoutStudent_Masteries_rsInput>
  }

  export type studentMasteriesUpdateWithWhereUniqueWithoutStudent_Masteries_rsInput = {
    where: studentMasteriesWhereUniqueInput
    data: XOR<studentMasteriesUpdateWithoutStudent_Masteries_rsInput, studentMasteriesUncheckedUpdateWithoutStudent_Masteries_rsInput>
  }

  export type studentMasteriesUpdateManyWithWhereWithoutStudent_Masteries_rsInput = {
    where: studentMasteriesScalarWhereInput
    data: XOR<studentMasteriesUpdateManyMutationInput, studentMasteriesUncheckedUpdateManyWithoutStudent_Masteries_rsInput>
  }

  export type studentMasteriesScalarWhereInput = {
    AND?: Enumerable<studentMasteriesScalarWhereInput>
    OR?: Enumerable<studentMasteriesScalarWhereInput>
    NOT?: Enumerable<studentMasteriesScalarWhereInput>
    studentEmail?: StringFilter | string
    topicID?: StringFilter | string
    masteryLevel?: FloatFilter | number
    courseCompletion?: FloatFilter | number
  }

  export type studentAttemptsUpsertWithWhereUniqueWithoutStudents_studentAttempt_rsInput = {
    where: studentAttemptsWhereUniqueInput
    update: XOR<studentAttemptsUpdateWithoutStudents_studentAttempt_rsInput, studentAttemptsUncheckedUpdateWithoutStudents_studentAttempt_rsInput>
    create: XOR<studentAttemptsCreateWithoutStudents_studentAttempt_rsInput, studentAttemptsUncheckedCreateWithoutStudents_studentAttempt_rsInput>
  }

  export type studentAttemptsUpdateWithWhereUniqueWithoutStudents_studentAttempt_rsInput = {
    where: studentAttemptsWhereUniqueInput
    data: XOR<studentAttemptsUpdateWithoutStudents_studentAttempt_rsInput, studentAttemptsUncheckedUpdateWithoutStudents_studentAttempt_rsInput>
  }

  export type studentAttemptsUpdateManyWithWhereWithoutStudents_studentAttempt_rsInput = {
    where: studentAttemptsScalarWhereInput
    data: XOR<studentAttemptsUpdateManyMutationInput, studentAttemptsUncheckedUpdateManyWithoutStudents_studentAttempt_rsInput>
  }

  export type studentAttemptsScalarWhereInput = {
    AND?: Enumerable<studentAttemptsScalarWhereInput>
    OR?: Enumerable<studentAttemptsScalarWhereInput>
    NOT?: Enumerable<studentAttemptsScalarWhereInput>
    studentEmail?: StringFilter | string
    questionID?: StringFilter | string
    attemptOption?: IntFilter | number
    attemptCorrect?: BoolFilter | boolean
    attemptSeconds?: IntFilter | number
  }

  export type studentsCreateWithoutStudents_studentAttempt_rsInput = {
    matriculationNumber: string
    studentEmail_user_rs: usersCreateNestedOneWithoutStudentEmail_user_rsInput
    student_Masteries_rs?: studentMasteriesCreateNestedManyWithoutStudent_Masteries_rsInput
  }

  export type studentsUncheckedCreateWithoutStudents_studentAttempt_rsInput = {
    studentEmail: string
    matriculationNumber: string
    student_Masteries_rs?: studentMasteriesUncheckedCreateNestedManyWithoutStudent_Masteries_rsInput
  }

  export type studentsCreateOrConnectWithoutStudents_studentAttempt_rsInput = {
    where: studentsWhereUniqueInput
    create: XOR<studentsCreateWithoutStudents_studentAttempt_rsInput, studentsUncheckedCreateWithoutStudents_studentAttempt_rsInput>
  }

  export type questionsCreateWithoutQuestionAttemptID_rsInput = {
    questionID?: string
    questionContent: string
    questionDifficulty: number
    topicID_rs: topicsCreateNestedOneWithoutTopicID_rsInput
    questionMediaID_rs?: questionMediaCreateNestedManyWithoutQuestionMediaID_rsInput
    questionAnswerID_rs?: answerCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsUncheckedCreateWithoutQuestionAttemptID_rsInput = {
    questionID?: string
    topicID: string
    questionContent: string
    questionDifficulty: number
    questionMediaID_rs?: questionMediaUncheckedCreateNestedManyWithoutQuestionMediaID_rsInput
    questionAnswerID_rs?: answerUncheckedCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsCreateOrConnectWithoutQuestionAttemptID_rsInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutQuestionAttemptID_rsInput, questionsUncheckedCreateWithoutQuestionAttemptID_rsInput>
  }

  export type studentsUpsertWithoutStudents_studentAttempt_rsInput = {
    update: XOR<studentsUpdateWithoutStudents_studentAttempt_rsInput, studentsUncheckedUpdateWithoutStudents_studentAttempt_rsInput>
    create: XOR<studentsCreateWithoutStudents_studentAttempt_rsInput, studentsUncheckedCreateWithoutStudents_studentAttempt_rsInput>
  }

  export type studentsUpdateWithoutStudents_studentAttempt_rsInput = {
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    studentEmail_user_rs?: usersUpdateOneRequiredWithoutStudentEmail_user_rsNestedInput
    student_Masteries_rs?: studentMasteriesUpdateManyWithoutStudent_Masteries_rsNestedInput
  }

  export type studentsUncheckedUpdateWithoutStudents_studentAttempt_rsInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    student_Masteries_rs?: studentMasteriesUncheckedUpdateManyWithoutStudent_Masteries_rsNestedInput
  }

  export type questionsUpsertWithoutQuestionAttemptID_rsInput = {
    update: XOR<questionsUpdateWithoutQuestionAttemptID_rsInput, questionsUncheckedUpdateWithoutQuestionAttemptID_rsInput>
    create: XOR<questionsCreateWithoutQuestionAttemptID_rsInput, questionsUncheckedCreateWithoutQuestionAttemptID_rsInput>
  }

  export type questionsUpdateWithoutQuestionAttemptID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    topicID_rs?: topicsUpdateOneRequiredWithoutTopicID_rsNestedInput
    questionMediaID_rs?: questionMediaUpdateManyWithoutQuestionMediaID_rsNestedInput
    questionAnswerID_rs?: answerUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type questionsUncheckedUpdateWithoutQuestionAttemptID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    topicID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    questionMediaID_rs?: questionMediaUncheckedUpdateManyWithoutQuestionMediaID_rsNestedInput
    questionAnswerID_rs?: answerUncheckedUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type topicsCreateWithoutStudentMasteriesTopic_rsInput = {
    topicID?: string
    topicName: string
    topicLevel: number
    topicID_rs?: questionsCreateNestedManyWithoutTopicID_rsInput
  }

  export type topicsUncheckedCreateWithoutStudentMasteriesTopic_rsInput = {
    topicID?: string
    topicName: string
    topicLevel: number
    topicID_rs?: questionsUncheckedCreateNestedManyWithoutTopicID_rsInput
  }

  export type topicsCreateOrConnectWithoutStudentMasteriesTopic_rsInput = {
    where: topicsWhereUniqueInput
    create: XOR<topicsCreateWithoutStudentMasteriesTopic_rsInput, topicsUncheckedCreateWithoutStudentMasteriesTopic_rsInput>
  }

  export type studentsCreateWithoutStudent_Masteries_rsInput = {
    matriculationNumber: string
    studentEmail_user_rs: usersCreateNestedOneWithoutStudentEmail_user_rsInput
    students_studentAttempt_rs?: studentAttemptsCreateNestedManyWithoutStudents_studentAttempt_rsInput
  }

  export type studentsUncheckedCreateWithoutStudent_Masteries_rsInput = {
    studentEmail: string
    matriculationNumber: string
    students_studentAttempt_rs?: studentAttemptsUncheckedCreateNestedManyWithoutStudents_studentAttempt_rsInput
  }

  export type studentsCreateOrConnectWithoutStudent_Masteries_rsInput = {
    where: studentsWhereUniqueInput
    create: XOR<studentsCreateWithoutStudent_Masteries_rsInput, studentsUncheckedCreateWithoutStudent_Masteries_rsInput>
  }

  export type topicsUpsertWithoutStudentMasteriesTopic_rsInput = {
    update: XOR<topicsUpdateWithoutStudentMasteriesTopic_rsInput, topicsUncheckedUpdateWithoutStudentMasteriesTopic_rsInput>
    create: XOR<topicsCreateWithoutStudentMasteriesTopic_rsInput, topicsUncheckedCreateWithoutStudentMasteriesTopic_rsInput>
  }

  export type topicsUpdateWithoutStudentMasteriesTopic_rsInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
    topicID_rs?: questionsUpdateManyWithoutTopicID_rsNestedInput
  }

  export type topicsUncheckedUpdateWithoutStudentMasteriesTopic_rsInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
    topicID_rs?: questionsUncheckedUpdateManyWithoutTopicID_rsNestedInput
  }

  export type studentsUpsertWithoutStudent_Masteries_rsInput = {
    update: XOR<studentsUpdateWithoutStudent_Masteries_rsInput, studentsUncheckedUpdateWithoutStudent_Masteries_rsInput>
    create: XOR<studentsCreateWithoutStudent_Masteries_rsInput, studentsUncheckedCreateWithoutStudent_Masteries_rsInput>
  }

  export type studentsUpdateWithoutStudent_Masteries_rsInput = {
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    studentEmail_user_rs?: usersUpdateOneRequiredWithoutStudentEmail_user_rsNestedInput
    students_studentAttempt_rs?: studentAttemptsUpdateManyWithoutStudents_studentAttempt_rsNestedInput
  }

  export type studentsUncheckedUpdateWithoutStudent_Masteries_rsInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    students_studentAttempt_rs?: studentAttemptsUncheckedUpdateManyWithoutStudents_studentAttempt_rsNestedInput
  }

  export type questionsCreateWithoutTopicID_rsInput = {
    questionID?: string
    questionContent: string
    questionDifficulty: number
    questionAttemptID_rs?: studentAttemptsCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionMediaID_rs?: questionMediaCreateNestedManyWithoutQuestionMediaID_rsInput
    questionAnswerID_rs?: answerCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsUncheckedCreateWithoutTopicID_rsInput = {
    questionID?: string
    questionContent: string
    questionDifficulty: number
    questionAttemptID_rs?: studentAttemptsUncheckedCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionMediaID_rs?: questionMediaUncheckedCreateNestedManyWithoutQuestionMediaID_rsInput
    questionAnswerID_rs?: answerUncheckedCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsCreateOrConnectWithoutTopicID_rsInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutTopicID_rsInput, questionsUncheckedCreateWithoutTopicID_rsInput>
  }

  export type questionsCreateManyTopicID_rsInputEnvelope = {
    data: Enumerable<questionsCreateManyTopicID_rsInput>
    skipDuplicates?: boolean
  }

  export type studentMasteriesCreateWithoutStudentMasteriesTopic_rsInput = {
    masteryLevel?: number
    courseCompletion?: number
    student_Masteries_rs: studentsCreateNestedOneWithoutStudent_Masteries_rsInput
  }

  export type studentMasteriesUncheckedCreateWithoutStudentMasteriesTopic_rsInput = {
    studentEmail: string
    masteryLevel?: number
    courseCompletion?: number
  }

  export type studentMasteriesCreateOrConnectWithoutStudentMasteriesTopic_rsInput = {
    where: studentMasteriesWhereUniqueInput
    create: XOR<studentMasteriesCreateWithoutStudentMasteriesTopic_rsInput, studentMasteriesUncheckedCreateWithoutStudentMasteriesTopic_rsInput>
  }

  export type studentMasteriesCreateManyStudentMasteriesTopic_rsInputEnvelope = {
    data: Enumerable<studentMasteriesCreateManyStudentMasteriesTopic_rsInput>
    skipDuplicates?: boolean
  }

  export type questionsUpsertWithWhereUniqueWithoutTopicID_rsInput = {
    where: questionsWhereUniqueInput
    update: XOR<questionsUpdateWithoutTopicID_rsInput, questionsUncheckedUpdateWithoutTopicID_rsInput>
    create: XOR<questionsCreateWithoutTopicID_rsInput, questionsUncheckedCreateWithoutTopicID_rsInput>
  }

  export type questionsUpdateWithWhereUniqueWithoutTopicID_rsInput = {
    where: questionsWhereUniqueInput
    data: XOR<questionsUpdateWithoutTopicID_rsInput, questionsUncheckedUpdateWithoutTopicID_rsInput>
  }

  export type questionsUpdateManyWithWhereWithoutTopicID_rsInput = {
    where: questionsScalarWhereInput
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyWithoutTopicID_rsInput>
  }

  export type questionsScalarWhereInput = {
    AND?: Enumerable<questionsScalarWhereInput>
    OR?: Enumerable<questionsScalarWhereInput>
    NOT?: Enumerable<questionsScalarWhereInput>
    questionID?: StringFilter | string
    topicID?: StringFilter | string
    questionContent?: StringFilter | string
    questionDifficulty?: IntFilter | number
  }

  export type studentMasteriesUpsertWithWhereUniqueWithoutStudentMasteriesTopic_rsInput = {
    where: studentMasteriesWhereUniqueInput
    update: XOR<studentMasteriesUpdateWithoutStudentMasteriesTopic_rsInput, studentMasteriesUncheckedUpdateWithoutStudentMasteriesTopic_rsInput>
    create: XOR<studentMasteriesCreateWithoutStudentMasteriesTopic_rsInput, studentMasteriesUncheckedCreateWithoutStudentMasteriesTopic_rsInput>
  }

  export type studentMasteriesUpdateWithWhereUniqueWithoutStudentMasteriesTopic_rsInput = {
    where: studentMasteriesWhereUniqueInput
    data: XOR<studentMasteriesUpdateWithoutStudentMasteriesTopic_rsInput, studentMasteriesUncheckedUpdateWithoutStudentMasteriesTopic_rsInput>
  }

  export type studentMasteriesUpdateManyWithWhereWithoutStudentMasteriesTopic_rsInput = {
    where: studentMasteriesScalarWhereInput
    data: XOR<studentMasteriesUpdateManyMutationInput, studentMasteriesUncheckedUpdateManyWithoutStudentMasteriesTopic_rsInput>
  }

  export type topicsCreateWithoutTopicID_rsInput = {
    topicID?: string
    topicName: string
    topicLevel: number
    studentMasteriesTopic_rs?: studentMasteriesCreateNestedManyWithoutStudentMasteriesTopic_rsInput
  }

  export type topicsUncheckedCreateWithoutTopicID_rsInput = {
    topicID?: string
    topicName: string
    topicLevel: number
    studentMasteriesTopic_rs?: studentMasteriesUncheckedCreateNestedManyWithoutStudentMasteriesTopic_rsInput
  }

  export type topicsCreateOrConnectWithoutTopicID_rsInput = {
    where: topicsWhereUniqueInput
    create: XOR<topicsCreateWithoutTopicID_rsInput, topicsUncheckedCreateWithoutTopicID_rsInput>
  }

  export type studentAttemptsCreateWithoutQuestionAttemptID_rsInput = {
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
    students_studentAttempt_rs: studentsCreateNestedOneWithoutStudents_studentAttempt_rsInput
  }

  export type studentAttemptsUncheckedCreateWithoutQuestionAttemptID_rsInput = {
    studentEmail: string
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
  }

  export type studentAttemptsCreateOrConnectWithoutQuestionAttemptID_rsInput = {
    where: studentAttemptsWhereUniqueInput
    create: XOR<studentAttemptsCreateWithoutQuestionAttemptID_rsInput, studentAttemptsUncheckedCreateWithoutQuestionAttemptID_rsInput>
  }

  export type studentAttemptsCreateManyQuestionAttemptID_rsInputEnvelope = {
    data: Enumerable<studentAttemptsCreateManyQuestionAttemptID_rsInput>
    skipDuplicates?: boolean
  }

  export type questionMediaCreateWithoutQuestionMediaID_rsInput = {
    questionMediaURL?: string | null
  }

  export type questionMediaUncheckedCreateWithoutQuestionMediaID_rsInput = {
    questionMediaURL?: string | null
  }

  export type questionMediaCreateOrConnectWithoutQuestionMediaID_rsInput = {
    where: questionMediaWhereUniqueInput
    create: XOR<questionMediaCreateWithoutQuestionMediaID_rsInput, questionMediaUncheckedCreateWithoutQuestionMediaID_rsInput>
  }

  export type questionMediaCreateManyQuestionMediaID_rsInputEnvelope = {
    data: Enumerable<questionMediaCreateManyQuestionMediaID_rsInput>
    skipDuplicates?: boolean
  }

  export type answerCreateWithoutQuestionAnswerID_rsInput = {
    optionNumber: number
    answerContent: string
    isCorrect: boolean
  }

  export type answerUncheckedCreateWithoutQuestionAnswerID_rsInput = {
    optionNumber: number
    answerContent: string
    isCorrect: boolean
  }

  export type answerCreateOrConnectWithoutQuestionAnswerID_rsInput = {
    where: answerWhereUniqueInput
    create: XOR<answerCreateWithoutQuestionAnswerID_rsInput, answerUncheckedCreateWithoutQuestionAnswerID_rsInput>
  }

  export type answerCreateManyQuestionAnswerID_rsInputEnvelope = {
    data: Enumerable<answerCreateManyQuestionAnswerID_rsInput>
    skipDuplicates?: boolean
  }

  export type topicsUpsertWithoutTopicID_rsInput = {
    update: XOR<topicsUpdateWithoutTopicID_rsInput, topicsUncheckedUpdateWithoutTopicID_rsInput>
    create: XOR<topicsCreateWithoutTopicID_rsInput, topicsUncheckedCreateWithoutTopicID_rsInput>
  }

  export type topicsUpdateWithoutTopicID_rsInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
    studentMasteriesTopic_rs?: studentMasteriesUpdateManyWithoutStudentMasteriesTopic_rsNestedInput
  }

  export type topicsUncheckedUpdateWithoutTopicID_rsInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    topicName?: StringFieldUpdateOperationsInput | string
    topicLevel?: IntFieldUpdateOperationsInput | number
    studentMasteriesTopic_rs?: studentMasteriesUncheckedUpdateManyWithoutStudentMasteriesTopic_rsNestedInput
  }

  export type studentAttemptsUpsertWithWhereUniqueWithoutQuestionAttemptID_rsInput = {
    where: studentAttemptsWhereUniqueInput
    update: XOR<studentAttemptsUpdateWithoutQuestionAttemptID_rsInput, studentAttemptsUncheckedUpdateWithoutQuestionAttemptID_rsInput>
    create: XOR<studentAttemptsCreateWithoutQuestionAttemptID_rsInput, studentAttemptsUncheckedCreateWithoutQuestionAttemptID_rsInput>
  }

  export type studentAttemptsUpdateWithWhereUniqueWithoutQuestionAttemptID_rsInput = {
    where: studentAttemptsWhereUniqueInput
    data: XOR<studentAttemptsUpdateWithoutQuestionAttemptID_rsInput, studentAttemptsUncheckedUpdateWithoutQuestionAttemptID_rsInput>
  }

  export type studentAttemptsUpdateManyWithWhereWithoutQuestionAttemptID_rsInput = {
    where: studentAttemptsScalarWhereInput
    data: XOR<studentAttemptsUpdateManyMutationInput, studentAttemptsUncheckedUpdateManyWithoutQuestionAttemptID_rsInput>
  }

  export type questionMediaUpsertWithWhereUniqueWithoutQuestionMediaID_rsInput = {
    where: questionMediaWhereUniqueInput
    update: XOR<questionMediaUpdateWithoutQuestionMediaID_rsInput, questionMediaUncheckedUpdateWithoutQuestionMediaID_rsInput>
    create: XOR<questionMediaCreateWithoutQuestionMediaID_rsInput, questionMediaUncheckedCreateWithoutQuestionMediaID_rsInput>
  }

  export type questionMediaUpdateWithWhereUniqueWithoutQuestionMediaID_rsInput = {
    where: questionMediaWhereUniqueInput
    data: XOR<questionMediaUpdateWithoutQuestionMediaID_rsInput, questionMediaUncheckedUpdateWithoutQuestionMediaID_rsInput>
  }

  export type questionMediaUpdateManyWithWhereWithoutQuestionMediaID_rsInput = {
    where: questionMediaScalarWhereInput
    data: XOR<questionMediaUpdateManyMutationInput, questionMediaUncheckedUpdateManyWithoutQuestionMediaID_rsInput>
  }

  export type questionMediaScalarWhereInput = {
    AND?: Enumerable<questionMediaScalarWhereInput>
    OR?: Enumerable<questionMediaScalarWhereInput>
    NOT?: Enumerable<questionMediaScalarWhereInput>
    questionID?: StringFilter | string
    questionMediaURL?: StringNullableFilter | string | null
  }

  export type answerUpsertWithWhereUniqueWithoutQuestionAnswerID_rsInput = {
    where: answerWhereUniqueInput
    update: XOR<answerUpdateWithoutQuestionAnswerID_rsInput, answerUncheckedUpdateWithoutQuestionAnswerID_rsInput>
    create: XOR<answerCreateWithoutQuestionAnswerID_rsInput, answerUncheckedCreateWithoutQuestionAnswerID_rsInput>
  }

  export type answerUpdateWithWhereUniqueWithoutQuestionAnswerID_rsInput = {
    where: answerWhereUniqueInput
    data: XOR<answerUpdateWithoutQuestionAnswerID_rsInput, answerUncheckedUpdateWithoutQuestionAnswerID_rsInput>
  }

  export type answerUpdateManyWithWhereWithoutQuestionAnswerID_rsInput = {
    where: answerScalarWhereInput
    data: XOR<answerUpdateManyMutationInput, answerUncheckedUpdateManyWithoutQuestionAnswerID_rsInput>
  }

  export type answerScalarWhereInput = {
    AND?: Enumerable<answerScalarWhereInput>
    OR?: Enumerable<answerScalarWhereInput>
    NOT?: Enumerable<answerScalarWhereInput>
    questionID?: StringFilter | string
    optionNumber?: IntFilter | number
    answerContent?: StringFilter | string
    isCorrect?: BoolFilter | boolean
  }

  export type questionsCreateWithoutQuestionMediaID_rsInput = {
    questionID?: string
    questionContent: string
    questionDifficulty: number
    topicID_rs: topicsCreateNestedOneWithoutTopicID_rsInput
    questionAttemptID_rs?: studentAttemptsCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionAnswerID_rs?: answerCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsUncheckedCreateWithoutQuestionMediaID_rsInput = {
    questionID?: string
    topicID: string
    questionContent: string
    questionDifficulty: number
    questionAttemptID_rs?: studentAttemptsUncheckedCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionAnswerID_rs?: answerUncheckedCreateNestedManyWithoutQuestionAnswerID_rsInput
  }

  export type questionsCreateOrConnectWithoutQuestionMediaID_rsInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutQuestionMediaID_rsInput, questionsUncheckedCreateWithoutQuestionMediaID_rsInput>
  }

  export type questionsUpsertWithoutQuestionMediaID_rsInput = {
    update: XOR<questionsUpdateWithoutQuestionMediaID_rsInput, questionsUncheckedUpdateWithoutQuestionMediaID_rsInput>
    create: XOR<questionsCreateWithoutQuestionMediaID_rsInput, questionsUncheckedCreateWithoutQuestionMediaID_rsInput>
  }

  export type questionsUpdateWithoutQuestionMediaID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    topicID_rs?: topicsUpdateOneRequiredWithoutTopicID_rsNestedInput
    questionAttemptID_rs?: studentAttemptsUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionAnswerID_rs?: answerUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type questionsUncheckedUpdateWithoutQuestionMediaID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    topicID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    questionAttemptID_rs?: studentAttemptsUncheckedUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionAnswerID_rs?: answerUncheckedUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type questionsCreateWithoutQuestionAnswerID_rsInput = {
    questionID?: string
    questionContent: string
    questionDifficulty: number
    topicID_rs: topicsCreateNestedOneWithoutTopicID_rsInput
    questionAttemptID_rs?: studentAttemptsCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionMediaID_rs?: questionMediaCreateNestedManyWithoutQuestionMediaID_rsInput
  }

  export type questionsUncheckedCreateWithoutQuestionAnswerID_rsInput = {
    questionID?: string
    topicID: string
    questionContent: string
    questionDifficulty: number
    questionAttemptID_rs?: studentAttemptsUncheckedCreateNestedManyWithoutQuestionAttemptID_rsInput
    questionMediaID_rs?: questionMediaUncheckedCreateNestedManyWithoutQuestionMediaID_rsInput
  }

  export type questionsCreateOrConnectWithoutQuestionAnswerID_rsInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutQuestionAnswerID_rsInput, questionsUncheckedCreateWithoutQuestionAnswerID_rsInput>
  }

  export type questionsUpsertWithoutQuestionAnswerID_rsInput = {
    update: XOR<questionsUpdateWithoutQuestionAnswerID_rsInput, questionsUncheckedUpdateWithoutQuestionAnswerID_rsInput>
    create: XOR<questionsCreateWithoutQuestionAnswerID_rsInput, questionsUncheckedCreateWithoutQuestionAnswerID_rsInput>
  }

  export type questionsUpdateWithoutQuestionAnswerID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    topicID_rs?: topicsUpdateOneRequiredWithoutTopicID_rsNestedInput
    questionAttemptID_rs?: studentAttemptsUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionMediaID_rs?: questionMediaUpdateManyWithoutQuestionMediaID_rsNestedInput
  }

  export type questionsUncheckedUpdateWithoutQuestionAnswerID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    topicID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    questionAttemptID_rs?: studentAttemptsUncheckedUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionMediaID_rs?: questionMediaUncheckedUpdateManyWithoutQuestionMediaID_rsNestedInput
  }

  export type postMediaCreateManyPostMedia_rsInput = {
    postMediaURL?: string | null
  }

  export type postMediaUpdateWithoutPostMedia_rsInput = {
    postMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postMediaUncheckedUpdateWithoutPostMedia_rsInput = {
    postMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postMediaUncheckedUpdateManyWithoutPostMedia_rsInput = {
    postMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postsCreateManyUserpost_rsInput = {
    postID?: string
    title: string
    message: string
    likes: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type studentsCreateManyStudentEmail_user_rsInput = {
    matriculationNumber: string
  }

  export type postsUpdateWithoutUserpost_rsInput = {
    postID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postMedia_rs?: postMediaUpdateManyWithoutPostMedia_rsNestedInput
  }

  export type postsUncheckedUpdateWithoutUserpost_rsInput = {
    postID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postMedia_rs?: postMediaUncheckedUpdateManyWithoutPostMedia_rsNestedInput
  }

  export type postsUncheckedUpdateManyWithoutPostemail_rsInput = {
    postID?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentsUpdateWithoutStudentEmail_user_rsInput = {
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    student_Masteries_rs?: studentMasteriesUpdateManyWithoutStudent_Masteries_rsNestedInput
    students_studentAttempt_rs?: studentAttemptsUpdateManyWithoutStudents_studentAttempt_rsNestedInput
  }

  export type studentsUncheckedUpdateWithoutStudentEmail_user_rsInput = {
    matriculationNumber?: StringFieldUpdateOperationsInput | string
    student_Masteries_rs?: studentMasteriesUncheckedUpdateManyWithoutStudent_Masteries_rsNestedInput
    students_studentAttempt_rs?: studentAttemptsUncheckedUpdateManyWithoutStudents_studentAttempt_rsNestedInput
  }

  export type studentsUncheckedUpdateManyWithoutStudentEmail_user_rsInput = {
    matriculationNumber?: StringFieldUpdateOperationsInput | string
  }

  export type studentMasteriesCreateManyStudent_Masteries_rsInput = {
    topicID?: string
    masteryLevel?: number
    courseCompletion?: number
  }

  export type studentAttemptsCreateManyStudents_studentAttempt_rsInput = {
    questionID: string
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
  }

  export type studentMasteriesUpdateWithoutStudent_Masteries_rsInput = {
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
    studentMasteriesTopic_rs?: topicsUpdateOneRequiredWithoutStudentMasteriesTopic_rsNestedInput
  }

  export type studentMasteriesUncheckedUpdateWithoutStudent_Masteries_rsInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
  }

  export type studentMasteriesUncheckedUpdateManyWithoutStudent_Masteries_rsInput = {
    topicID?: StringFieldUpdateOperationsInput | string
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
  }

  export type studentAttemptsUpdateWithoutStudents_studentAttempt_rsInput = {
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
    questionAttemptID_rs?: questionsUpdateOneRequiredWithoutQuestionAttemptID_rsNestedInput
  }

  export type studentAttemptsUncheckedUpdateWithoutStudents_studentAttempt_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
  }

  export type studentAttemptsUncheckedUpdateManyWithoutStudents_studentAttempt_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
  }

  export type questionsCreateManyTopicID_rsInput = {
    questionID?: string
    questionContent: string
    questionDifficulty: number
  }

  export type studentMasteriesCreateManyStudentMasteriesTopic_rsInput = {
    studentEmail: string
    masteryLevel?: number
    courseCompletion?: number
  }

  export type questionsUpdateWithoutTopicID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    questionAttemptID_rs?: studentAttemptsUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionMediaID_rs?: questionMediaUpdateManyWithoutQuestionMediaID_rsNestedInput
    questionAnswerID_rs?: answerUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type questionsUncheckedUpdateWithoutTopicID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
    questionAttemptID_rs?: studentAttemptsUncheckedUpdateManyWithoutQuestionAttemptID_rsNestedInput
    questionMediaID_rs?: questionMediaUncheckedUpdateManyWithoutQuestionMediaID_rsNestedInput
    questionAnswerID_rs?: answerUncheckedUpdateManyWithoutQuestionAnswerID_rsNestedInput
  }

  export type questionsUncheckedUpdateManyWithoutTopicID_rsInput = {
    questionID?: StringFieldUpdateOperationsInput | string
    questionContent?: StringFieldUpdateOperationsInput | string
    questionDifficulty?: IntFieldUpdateOperationsInput | number
  }

  export type studentMasteriesUpdateWithoutStudentMasteriesTopic_rsInput = {
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
    student_Masteries_rs?: studentsUpdateOneRequiredWithoutStudent_Masteries_rsNestedInput
  }

  export type studentMasteriesUncheckedUpdateWithoutStudentMasteriesTopic_rsInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
  }

  export type studentMasteriesUncheckedUpdateManyWithoutStudentMasteriesTopic_rsInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    masteryLevel?: FloatFieldUpdateOperationsInput | number
    courseCompletion?: FloatFieldUpdateOperationsInput | number
  }

  export type studentAttemptsCreateManyQuestionAttemptID_rsInput = {
    studentEmail: string
    attemptOption: number
    attemptCorrect: boolean
    attemptSeconds: number
  }

  export type questionMediaCreateManyQuestionMediaID_rsInput = {
    questionMediaURL?: string | null
  }

  export type answerCreateManyQuestionAnswerID_rsInput = {
    optionNumber: number
    answerContent: string
    isCorrect: boolean
  }

  export type studentAttemptsUpdateWithoutQuestionAttemptID_rsInput = {
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
    students_studentAttempt_rs?: studentsUpdateOneRequiredWithoutStudents_studentAttempt_rsNestedInput
  }

  export type studentAttemptsUncheckedUpdateWithoutQuestionAttemptID_rsInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
  }

  export type studentAttemptsUncheckedUpdateManyWithoutQuestionAttemptID_rsInput = {
    studentEmail?: StringFieldUpdateOperationsInput | string
    attemptOption?: IntFieldUpdateOperationsInput | number
    attemptCorrect?: BoolFieldUpdateOperationsInput | boolean
    attemptSeconds?: IntFieldUpdateOperationsInput | number
  }

  export type questionMediaUpdateWithoutQuestionMediaID_rsInput = {
    questionMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type questionMediaUncheckedUpdateWithoutQuestionMediaID_rsInput = {
    questionMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type questionMediaUncheckedUpdateManyWithoutQuestionMediaID_rsInput = {
    questionMediaURL?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type answerUpdateWithoutQuestionAnswerID_rsInput = {
    optionNumber?: IntFieldUpdateOperationsInput | number
    answerContent?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type answerUncheckedUpdateWithoutQuestionAnswerID_rsInput = {
    optionNumber?: IntFieldUpdateOperationsInput | number
    answerContent?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }

  export type answerUncheckedUpdateManyWithoutQuestionAnswerID_rsInput = {
    optionNumber?: IntFieldUpdateOperationsInput | number
    answerContent?: StringFieldUpdateOperationsInput | string
    isCorrect?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}