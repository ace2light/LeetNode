
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.1
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.1",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AnswerScalarFieldEnum = makeEnum({
  questionID: 'questionID',
  optionNumber: 'optionNumber',
  answerContent: 'answerContent',
  isCorrect: 'isCorrect'
});

exports.Prisma.PostMediaScalarFieldEnum = makeEnum({
  postID: 'postID',
  postMediaURL: 'postMediaURL'
});

exports.Prisma.PostsScalarFieldEnum = makeEnum({
  postID: 'postID',
  email: 'email',
  title: 'title',
  message: 'message',
  likes: 'likes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QuestionMediaScalarFieldEnum = makeEnum({
  questionID: 'questionID',
  questionMediaURL: 'questionMediaURL'
});

exports.Prisma.QuestionsScalarFieldEnum = makeEnum({
  questionID: 'questionID',
  topicID: 'topicID',
  questionContent: 'questionContent',
  questionDifficulty: 'questionDifficulty'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StudentAttemptsScalarFieldEnum = makeEnum({
  studentEmail: 'studentEmail',
  questionID: 'questionID',
  attemptOption: 'attemptOption',
  attemptCorrect: 'attemptCorrect',
  attemptSeconds: 'attemptSeconds'
});

exports.Prisma.StudentMasteriesScalarFieldEnum = makeEnum({
  studentEmail: 'studentEmail',
  topicID: 'topicID',
  masteryLevel: 'masteryLevel',
  courseCompletion: 'courseCompletion'
});

exports.Prisma.StudentsScalarFieldEnum = makeEnum({
  studentEmail: 'studentEmail',
  matriculationNumber: 'matriculationNumber'
});

exports.Prisma.TopicsScalarFieldEnum = makeEnum({
  topicID: 'topicID',
  topicName: 'topicName',
  topicLevel: 'topicLevel'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  email: 'email',
  password: 'password',
  name: 'name',
  dpURL: 'dpURL',
  role: 'role'
});
exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN'
});

exports.Prisma.ModelName = makeEnum({
  posts: 'posts',
  postMedia: 'postMedia',
  users: 'users',
  students: 'students',
  studentAttempts: 'studentAttempts',
  studentMasteries: 'studentMasteries',
  topics: 'topics',
  questions: 'questions',
  questionMedia: 'questionMedia',
  answer: 'answer'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
