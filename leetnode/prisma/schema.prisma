generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String               @id @default(cuid())
  nusnetId        String?              @unique // KIV
  name            String
  email           String               @unique
  emailVerified   DateTime? // KIV
  image           String               @default("https://robohash.org/LeetNode?set=set4")
  role            Role                 @default(USER)
  accounts        Account[]
  sessions        Session[]
  attempts        Attempt[]
  courseQuestions UserCourseQuestion[]
  masteries       Mastery[]
  posts           Post[]
}

enum Role {
  ADMIN
  USER
}

model Attempt {
  attemptId      String   @id @default(cuid())
  userId         String
  questionId     Int
  attemptOption  Int
  submittedAt    DateTime @default(now())
  attemptSeconds Int? // KIV
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question       Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  answer         Answer   @relation(fields: [questionId, attemptOption], references: [questionId, optionNumber], onDelete: Cascade)

  @@unique([userId, questionId, submittedAt])
}

// QUESTION BANK
model Course {
  courseSlug    String               @id
  courseName    String
  courseContent Json? // KIV, maybe structure by pages and inside each page, have videos, slides and/or questions
  userQuestions UserCourseQuestion[]
}

model UserCourseQuestion {
  id               String     @id @default(cuid())
  userId           String
  courseSlug       String
  courseCompletion Float      @default(0)
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course           Course     @relation(fields: [courseSlug], references: [courseSlug], onDelete: Cascade)
  questions        Question[]
}

model Mastery {
  userId       String
  topicSlug    String
  masteryLevel Float  @default(0)
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic        Topic  @relation(fields: [topicSlug], references: [topicSlug], onDelete: Cascade)

  @@id([userId, topicSlug])
}

model Topic {
  topicSlug  String     @id
  topicName  String
  topicLevel TopicLevel
  questions  Question[]
  mastery    Mastery[]

  @@index([topicLevel])
}

enum TopicLevel {
  Foundational
  Intermediate
  Advanced
}

model Question {
  questionId          Int                  @id @default(autoincrement())
  topicSlug           String
  questionContent     String               @db.VarChar(500)
  questionDifficulty  QuestionDifficulty
  topic               Topic                @relation(fields: [topicSlug], references: [topicSlug])
  attempts            Attempt[]
  questionMedia       QuestionMedia[]
  answers             Answer[]
  userCourseQuestions UserCourseQuestion[]

  @@index([questionDifficulty])
}

enum QuestionDifficulty {
  Easy
  Medium
  Hard
}

model QuestionMedia {
  questionId       Int
  questionMediaURL String   @db.VarChar(500)
  question         Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@unique([questionId, questionMediaURL])
}

model Answer {
  questionId    Int
  optionNumber  Int
  answerContent String    @db.VarChar(500)
  isCorrect     Boolean
  question      Question  @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  attempts      Attempt[]

  @@unique([questionId, optionNumber])
}

// DISCUSSION POSTS
model Post {
  postId    String      @id @default(cuid())
  userId    String
  title     String
  message   String
  likes     Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  postMedia PostMedia[]

  @@index([userId])
}

model PostMedia {
  postId       String
  postMediaURL String @db.VarChar(500)
  post         Post   @relation(fields: [postId], references: [postId])

  @@unique([postId, postMediaURL])
}
