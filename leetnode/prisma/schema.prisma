generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  nusnetId      String?   @unique // KIV
  name          String
  email         String    @unique
  emailVerified DateTime? // KIV
  image         String    @default("https://robohash.org/LeetNode?set=set4")
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  attempts      Attempt[]
  masteries     Mastery[]
  posts         Post[]
}

enum Role {
  ADMIN
  USER
}

model Attempt {
  userId         String
  questionID     String
  attemptOption  Int
  attemptCorrect Boolean
  attemptSeconds Int? // KIV
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question       Question @relation(fields: [questionID], references: [questionID], onDelete: Cascade)

  @@id([userId, questionID])
  @@index([userId, questionID])
}

model Mastery {
  userId           String
  topicID          String
  masteryLevel     Float  @default(0)
  courseCompletion Float  @default(0)
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic            Topic  @relation(fields: [topicID], references: [topicID], onDelete: Cascade)

  @@id([userId, topicID])
  @@index([userId, topicID])
}

// QUESTION BANK
model Topic {
  topicID    String     @id @default(cuid())
  topicName  String
  topicLevel TopicLevel
  questions  Question[]
  masteries  Mastery[]
}

enum TopicLevel {
  Foundational
  Intermediate
  Advanced
}

model Question {
  questionID         String             @id @default(cuid())
  topicID            String
  questionContent    String             @db.VarChar(500)
  questionDifficulty QuestionDifficulty
  topic              Topic              @relation(fields: [topicID], references: [topicID])
  attempts           Attempt[]
  questionMedia      QuestionMedia[]
  answers            Answer[]

  @@index([topicID])
}

enum QuestionDifficulty {
  Easy
  Medium
  Hard
}

model QuestionMedia {
  questionID       String   @id @default(cuid())
  questionMediaURL String?
  question         Question @relation(fields: [questionID], references: [questionID], onDelete: Cascade)

  @@index([questionID])
}

model Answer {
  questionID    String   @default(cuid())
  optionNumber  Int
  answerContent String
  isCorrect     Boolean
  question      Question @relation(fields: [questionID], references: [questionID], onDelete: Cascade)

  @@id([questionID, optionNumber])
  @@index([questionID])
}

// DISCUSSION POSTS
model Post {
  postID    String      @id @default(cuid())
  userId    String
  title     String
  message   String
  likes     Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  postMedia PostMedia[]

  @@index([userId])
}

model PostMedia {
  postID       String  @id @default(cuid())
  postMediaURL String?
  post         Post    @relation(fields: [postID], references: [postID])

  @@index([postMediaURL])
}
