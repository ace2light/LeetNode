generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// NEXT AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String               @id @default(cuid())
  nusnetId        String?              @unique // KIV
  name            String
  email           String               @unique
  emailVerified   DateTime? // KIV
  image           String               @default("https://robohash.org/LeetNode?set=set4")
  role            Role                 @default(USER)
  accounts        Account[]
  sessions        Session[]
  attempts        Attempt[]
  courseQuestions UserCourseQuestion[]
  masteries       Mastery[]
  posts           Post[]
  comments        Comment[]
}

enum Role {
  ADMIN
  USER
}

model Attempt {
  attemptId      String   @id @default(cuid())
  userId         String
  questionId     Int
  attemptOption  Int
  isCorrect      Boolean
  submittedAt    DateTime @default(now())
  attemptSeconds Int? // KIV
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question       Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  answer         Answer   @relation(fields: [questionId, attemptOption], references: [questionId, optionNumber], onDelete: Cascade)

  @@unique([userId, questionId, submittedAt])
}

// QUESTION BANK
enum Level {
  Foundational
  Intermediate
  Advanced
}

enum CourseType {
  Content
  Quiz
}

model Course {
  courseSlug          String               @id
  courseName          String               @unique
  courseDescription   String
  courseImage         String
  courseLevel         Level
  type                CourseType
  moduleCode          String
  moduleTitle         String
  week                Int?
  studio              Int?
  slide               String?              @db.VarChar(500)
  video               String?              @db.VarChar(500)
  markdown            String?              @db.VarChar(10000)
  topics              Topic[]
  userCourseQuestions UserCourseQuestion[]
  posts               Post[]
}

model UserCourseQuestion {
  userId                 String
  courseSlug             String
  courseCompletion       Int                     @default(0)
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course                 Course                  @relation(fields: [courseSlug], references: [courseSlug], onDelete: Cascade)
  questionsWithAddedTime QuestionWithAddedTime[]

  @@id([userId, courseSlug])
}

model Mastery {
  userId       String
  topicSlug    String
  masteryLevel Float  @default(0)
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic        Topic  @relation(fields: [topicSlug], references: [topicSlug], onDelete: Cascade)

  @@id([userId, topicSlug])
}

model Topic {
  topicSlug  String     @id
  topicName  String     @unique
  topicLevel Level
  questions  Question[]
  mastery    Mastery[]
  courses    Course[]
  posts      Post[]

  @@index([topicLevel])
}

model QuestionWithAddedTime {
  questionId Int
  userId     String
  courseSlug String
  addedTime  DateTime           @default(now())
  question   Question           @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  userCourse UserCourseQuestion @relation(fields: [userId, courseSlug], references: [userId, courseSlug], onDelete: Cascade)

  @@id([questionId, userId, courseSlug])
}

model Question {
  questionId             Int                     @id @default(autoincrement())
  variationId            Int                     @default(1)
  topicSlug              String
  questionContent        String                  @db.VarChar(500)
  questionDifficulty     QuestionDifficulty
  topic                  Topic                   @relation(fields: [topicSlug], references: [topicSlug])
  attempts               Attempt[]
  questionMedia          QuestionMedia[]
  answers                Answer[]
  questionsWithAddedTime QuestionWithAddedTime[]

  @@index([questionDifficulty])
}

enum QuestionDifficulty {
  Easy
  Medium
  Hard
}

model QuestionMedia {
  questionId       Int
  questionMediaURL String   @db.VarChar(500)
  question         Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  @@id([questionId, questionMediaURL])
}

model Answer {
  questionId    Int
  optionNumber  Int
  answerContent String    @db.VarChar(500)
  isCorrect     Boolean
  question      Question  @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  attempts      Attempt[]

  @@id([questionId, optionNumber])
}

// DISCUSSION POSTS
model Post {
  postId      String      @id @default(cuid())
  userId      String
  title       String
  message     Json?       
  likes       Int         @default(0)
  courseName  String
  topicName   String?     //kiv until dynamic loading implemented
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  course      Course      @relation(fields: [courseName], references: [courseName], onDelete: Cascade)
  topic       Topic?      @relation(fields: [topicName], references: [topicName])
  postMedia   PostMedia[]
  comment     Comment[]
  postType    PostType

  @@index([userId])
}

enum PostType {
  Content
  Quiz
  Misc
}

model PostMedia {
  postId       String
  postMediaURL String @db.VarChar(500)
  post         Post   @relation(fields: [postId], references: [postId], onDelete: Cascade)

  @@id([postId, postMediaURL])
}

model Comment {
  commentId    String      @id @default(cuid())
  postId       String      
  userId       String
  message      Json?       
  likes        Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  post         Post        @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id])
  commentMedia CommentMedia[]
}

model CommentMedia {
  commentId       String
  commentMediaURL String @db.VarChar(500)
  comment         Comment   @relation(fields: [commentId], references: [commentId], onDelete: Cascade)

  @@id([commentId, commentMediaURL])
}